
HomeControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004652  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000218  00800060  00004652  000046e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800278  00800278  000048fe  2**0
                  ALLOC
  3 .stab         00005a78  00000000  00000000  00004900  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002111  00000000  00000000  0000a378  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000c489  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f1  00000000  00000000  0000c629  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000228e  00000000  00000000  0000c81a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012ca  00000000  00000000  0000eaa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000010d4  00000000  00000000  0000fd72  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00010e48  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c9  00000000  00000000  00011008  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ea  00000000  00000000  000112d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011bbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e5       	ldi	r30, 0x52	; 82
      68:	f6 e4       	ldi	r31, 0x46	; 70
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8d 1c 	call	0x391a	; 0x391a <main>
      8a:	0c 94 27 23 	jmp	0x464e	; 0x464e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f0 22 	jmp	0x45e0	; 0x45e0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e0       	ldi	r26, 0x0A	; 10
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0c 23 	jmp	0x4618	; 0x4618 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fc 22 	jmp	0x45f8	; 0x45f8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 18 23 	jmp	0x4630	; 0x4630 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fc 22 	jmp	0x45f8	; 0x45f8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 18 23 	jmp	0x4630	; 0x4630 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f0 22 	jmp	0x45e0	; 0x45e0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e0       	ldi	r24, 0x0A	; 10
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0c 23 	jmp	0x4618	; 0x4618 <__epilogue_restores__>

00000632 <__nesf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fc 22 	jmp	0x45f8	; 0x45f8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__nesf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__nesf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__nesf2+0x58>
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 18 23 	jmp	0x4630	; 0x4630 <__epilogue_restores__+0x18>

00000692 <__gtsf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 fc 22 	jmp	0x45f8	; 0x45f8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gtsf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gtsf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gtsf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 18 23 	jmp	0x4630	; 0x4630 <__epilogue_restores__+0x18>

000006f2 <__gesf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 fc 22 	jmp	0x45f8	; 0x45f8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__gesf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__gesf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__gesf2+0x58>
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 18 23 	jmp	0x4630	; 0x4630 <__epilogue_restores__+0x18>

00000752 <__ltsf2>:
     752:	a8 e1       	ldi	r26, 0x18	; 24
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 fc 22 	jmp	0x45f8	; 0x45f8 <__prologue_saves__+0x18>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	2d 83       	std	Y+5, r18	; 0x05
     768:	3e 83       	std	Y+6, r19	; 0x06
     76a:	4f 83       	std	Y+7, r20	; 0x07
     76c:	58 87       	std	Y+8, r21	; 0x08
     76e:	89 e0       	ldi	r24, 0x09	; 9
     770:	e8 2e       	mov	r14, r24
     772:	f1 2c       	mov	r15, r1
     774:	ec 0e       	add	r14, r28
     776:	fd 1e       	adc	r15, r29
     778:	ce 01       	movw	r24, r28
     77a:	01 96       	adiw	r24, 0x01	; 1
     77c:	b7 01       	movw	r22, r14
     77e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     782:	8e 01       	movw	r16, r28
     784:	0f 5e       	subi	r16, 0xEF	; 239
     786:	1f 4f       	sbci	r17, 0xFF	; 255
     788:	ce 01       	movw	r24, r28
     78a:	05 96       	adiw	r24, 0x05	; 5
     78c:	b8 01       	movw	r22, r16
     78e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     792:	89 85       	ldd	r24, Y+9	; 0x09
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	40 f0       	brcs	.+16     	; 0x7a8 <__ltsf2+0x56>
     798:	89 89       	ldd	r24, Y+17	; 0x11
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	28 f0       	brcs	.+10     	; 0x7a8 <__ltsf2+0x56>
     79e:	c7 01       	movw	r24, r14
     7a0:	b8 01       	movw	r22, r16
     7a2:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <__ltsf2+0x58>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	68 96       	adiw	r28, 0x18	; 24
     7ac:	e6 e0       	ldi	r30, 0x06	; 6
     7ae:	0c 94 18 23 	jmp	0x4630	; 0x4630 <__epilogue_restores__+0x18>

000007b2 <__fixsfsi>:
     7b2:	ac e0       	ldi	r26, 0x0C	; 12
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	ef ed       	ldi	r30, 0xDF	; 223
     7b8:	f3 e0       	ldi	r31, 0x03	; 3
     7ba:	0c 94 00 23 	jmp	0x4600	; 0x4600 <__prologue_saves__+0x20>
     7be:	69 83       	std	Y+1, r22	; 0x01
     7c0:	7a 83       	std	Y+2, r23	; 0x02
     7c2:	8b 83       	std	Y+3, r24	; 0x03
     7c4:	9c 83       	std	Y+4, r25	; 0x04
     7c6:	ce 01       	movw	r24, r28
     7c8:	01 96       	adiw	r24, 0x01	; 1
     7ca:	be 01       	movw	r22, r28
     7cc:	6b 5f       	subi	r22, 0xFB	; 251
     7ce:	7f 4f       	sbci	r23, 0xFF	; 255
     7d0:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     7d4:	8d 81       	ldd	r24, Y+5	; 0x05
     7d6:	82 30       	cpi	r24, 0x02	; 2
     7d8:	61 f1       	breq	.+88     	; 0x832 <__fixsfsi+0x80>
     7da:	82 30       	cpi	r24, 0x02	; 2
     7dc:	50 f1       	brcs	.+84     	; 0x832 <__fixsfsi+0x80>
     7de:	84 30       	cpi	r24, 0x04	; 4
     7e0:	21 f4       	brne	.+8      	; 0x7ea <__fixsfsi+0x38>
     7e2:	8e 81       	ldd	r24, Y+6	; 0x06
     7e4:	88 23       	and	r24, r24
     7e6:	51 f1       	breq	.+84     	; 0x83c <__fixsfsi+0x8a>
     7e8:	2e c0       	rjmp	.+92     	; 0x846 <__fixsfsi+0x94>
     7ea:	2f 81       	ldd	r18, Y+7	; 0x07
     7ec:	38 85       	ldd	r19, Y+8	; 0x08
     7ee:	37 fd       	sbrc	r19, 7
     7f0:	20 c0       	rjmp	.+64     	; 0x832 <__fixsfsi+0x80>
     7f2:	6e 81       	ldd	r22, Y+6	; 0x06
     7f4:	2f 31       	cpi	r18, 0x1F	; 31
     7f6:	31 05       	cpc	r19, r1
     7f8:	1c f0       	brlt	.+6      	; 0x800 <__fixsfsi+0x4e>
     7fa:	66 23       	and	r22, r22
     7fc:	f9 f0       	breq	.+62     	; 0x83c <__fixsfsi+0x8a>
     7fe:	23 c0       	rjmp	.+70     	; 0x846 <__fixsfsi+0x94>
     800:	8e e1       	ldi	r24, 0x1E	; 30
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	82 1b       	sub	r24, r18
     806:	93 0b       	sbc	r25, r19
     808:	29 85       	ldd	r18, Y+9	; 0x09
     80a:	3a 85       	ldd	r19, Y+10	; 0x0a
     80c:	4b 85       	ldd	r20, Y+11	; 0x0b
     80e:	5c 85       	ldd	r21, Y+12	; 0x0c
     810:	04 c0       	rjmp	.+8      	; 0x81a <__fixsfsi+0x68>
     812:	56 95       	lsr	r21
     814:	47 95       	ror	r20
     816:	37 95       	ror	r19
     818:	27 95       	ror	r18
     81a:	8a 95       	dec	r24
     81c:	d2 f7       	brpl	.-12     	; 0x812 <__fixsfsi+0x60>
     81e:	66 23       	and	r22, r22
     820:	b1 f0       	breq	.+44     	; 0x84e <__fixsfsi+0x9c>
     822:	50 95       	com	r21
     824:	40 95       	com	r20
     826:	30 95       	com	r19
     828:	21 95       	neg	r18
     82a:	3f 4f       	sbci	r19, 0xFF	; 255
     82c:	4f 4f       	sbci	r20, 0xFF	; 255
     82e:	5f 4f       	sbci	r21, 0xFF	; 255
     830:	0e c0       	rjmp	.+28     	; 0x84e <__fixsfsi+0x9c>
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	09 c0       	rjmp	.+18     	; 0x84e <__fixsfsi+0x9c>
     83c:	2f ef       	ldi	r18, 0xFF	; 255
     83e:	3f ef       	ldi	r19, 0xFF	; 255
     840:	4f ef       	ldi	r20, 0xFF	; 255
     842:	5f e7       	ldi	r21, 0x7F	; 127
     844:	04 c0       	rjmp	.+8      	; 0x84e <__fixsfsi+0x9c>
     846:	20 e0       	ldi	r18, 0x00	; 0
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	40 e0       	ldi	r20, 0x00	; 0
     84c:	50 e8       	ldi	r21, 0x80	; 128
     84e:	b9 01       	movw	r22, r18
     850:	ca 01       	movw	r24, r20
     852:	2c 96       	adiw	r28, 0x0c	; 12
     854:	e2 e0       	ldi	r30, 0x02	; 2
     856:	0c 94 1c 23 	jmp	0x4638	; 0x4638 <__epilogue_restores__+0x20>

0000085a <__floatunsisf>:
     85a:	a8 e0       	ldi	r26, 0x08	; 8
     85c:	b0 e0       	ldi	r27, 0x00	; 0
     85e:	e3 e3       	ldi	r30, 0x33	; 51
     860:	f4 e0       	ldi	r31, 0x04	; 4
     862:	0c 94 f8 22 	jmp	0x45f0	; 0x45f0 <__prologue_saves__+0x10>
     866:	7b 01       	movw	r14, r22
     868:	8c 01       	movw	r16, r24
     86a:	61 15       	cp	r22, r1
     86c:	71 05       	cpc	r23, r1
     86e:	81 05       	cpc	r24, r1
     870:	91 05       	cpc	r25, r1
     872:	19 f4       	brne	.+6      	; 0x87a <__stack+0x1b>
     874:	82 e0       	ldi	r24, 0x02	; 2
     876:	89 83       	std	Y+1, r24	; 0x01
     878:	60 c0       	rjmp	.+192    	; 0x93a <__stack+0xdb>
     87a:	83 e0       	ldi	r24, 0x03	; 3
     87c:	89 83       	std	Y+1, r24	; 0x01
     87e:	8e e1       	ldi	r24, 0x1E	; 30
     880:	c8 2e       	mov	r12, r24
     882:	d1 2c       	mov	r13, r1
     884:	dc 82       	std	Y+4, r13	; 0x04
     886:	cb 82       	std	Y+3, r12	; 0x03
     888:	ed 82       	std	Y+5, r14	; 0x05
     88a:	fe 82       	std	Y+6, r15	; 0x06
     88c:	0f 83       	std	Y+7, r16	; 0x07
     88e:	18 87       	std	Y+8, r17	; 0x08
     890:	c8 01       	movw	r24, r16
     892:	b7 01       	movw	r22, r14
     894:	0e 94 a6 04 	call	0x94c	; 0x94c <__clzsi2>
     898:	fc 01       	movw	r30, r24
     89a:	31 97       	sbiw	r30, 0x01	; 1
     89c:	f7 ff       	sbrs	r31, 7
     89e:	3b c0       	rjmp	.+118    	; 0x916 <__stack+0xb7>
     8a0:	22 27       	eor	r18, r18
     8a2:	33 27       	eor	r19, r19
     8a4:	2e 1b       	sub	r18, r30
     8a6:	3f 0b       	sbc	r19, r31
     8a8:	57 01       	movw	r10, r14
     8aa:	68 01       	movw	r12, r16
     8ac:	02 2e       	mov	r0, r18
     8ae:	04 c0       	rjmp	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	d6 94       	lsr	r13
     8b2:	c7 94       	ror	r12
     8b4:	b7 94       	ror	r11
     8b6:	a7 94       	ror	r10
     8b8:	0a 94       	dec	r0
     8ba:	d2 f7       	brpl	.-12     	; 0x8b0 <__stack+0x51>
     8bc:	40 e0       	ldi	r20, 0x00	; 0
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	a0 e0       	ldi	r26, 0x00	; 0
     8ca:	b0 e0       	ldi	r27, 0x00	; 0
     8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <__stack+0x77>
     8ce:	88 0f       	add	r24, r24
     8d0:	99 1f       	adc	r25, r25
     8d2:	aa 1f       	adc	r26, r26
     8d4:	bb 1f       	adc	r27, r27
     8d6:	2a 95       	dec	r18
     8d8:	d2 f7       	brpl	.-12     	; 0x8ce <__stack+0x6f>
     8da:	01 97       	sbiw	r24, 0x01	; 1
     8dc:	a1 09       	sbc	r26, r1
     8de:	b1 09       	sbc	r27, r1
     8e0:	8e 21       	and	r24, r14
     8e2:	9f 21       	and	r25, r15
     8e4:	a0 23       	and	r26, r16
     8e6:	b1 23       	and	r27, r17
     8e8:	00 97       	sbiw	r24, 0x00	; 0
     8ea:	a1 05       	cpc	r26, r1
     8ec:	b1 05       	cpc	r27, r1
     8ee:	21 f0       	breq	.+8      	; 0x8f8 <__stack+0x99>
     8f0:	41 e0       	ldi	r20, 0x01	; 1
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	4a 29       	or	r20, r10
     8fa:	5b 29       	or	r21, r11
     8fc:	6c 29       	or	r22, r12
     8fe:	7d 29       	or	r23, r13
     900:	4d 83       	std	Y+5, r20	; 0x05
     902:	5e 83       	std	Y+6, r21	; 0x06
     904:	6f 83       	std	Y+7, r22	; 0x07
     906:	78 87       	std	Y+8, r23	; 0x08
     908:	8e e1       	ldi	r24, 0x1E	; 30
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	8e 1b       	sub	r24, r30
     90e:	9f 0b       	sbc	r25, r31
     910:	9c 83       	std	Y+4, r25	; 0x04
     912:	8b 83       	std	Y+3, r24	; 0x03
     914:	12 c0       	rjmp	.+36     	; 0x93a <__stack+0xdb>
     916:	30 97       	sbiw	r30, 0x00	; 0
     918:	81 f0       	breq	.+32     	; 0x93a <__stack+0xdb>
     91a:	0e 2e       	mov	r0, r30
     91c:	04 c0       	rjmp	.+8      	; 0x926 <__stack+0xc7>
     91e:	ee 0c       	add	r14, r14
     920:	ff 1c       	adc	r15, r15
     922:	00 1f       	adc	r16, r16
     924:	11 1f       	adc	r17, r17
     926:	0a 94       	dec	r0
     928:	d2 f7       	brpl	.-12     	; 0x91e <__stack+0xbf>
     92a:	ed 82       	std	Y+5, r14	; 0x05
     92c:	fe 82       	std	Y+6, r15	; 0x06
     92e:	0f 83       	std	Y+7, r16	; 0x07
     930:	18 87       	std	Y+8, r17	; 0x08
     932:	ce 1a       	sub	r12, r30
     934:	df 0a       	sbc	r13, r31
     936:	dc 82       	std	Y+4, r13	; 0x04
     938:	cb 82       	std	Y+3, r12	; 0x03
     93a:	1a 82       	std	Y+2, r1	; 0x02
     93c:	ce 01       	movw	r24, r28
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     944:	28 96       	adiw	r28, 0x08	; 8
     946:	ea e0       	ldi	r30, 0x0A	; 10
     948:	0c 94 14 23 	jmp	0x4628	; 0x4628 <__epilogue_restores__+0x10>

0000094c <__clzsi2>:
     94c:	ef 92       	push	r14
     94e:	ff 92       	push	r15
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	7b 01       	movw	r14, r22
     956:	8c 01       	movw	r16, r24
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	e8 16       	cp	r14, r24
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	f8 06       	cpc	r15, r24
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	08 07       	cpc	r16, r24
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	18 07       	cpc	r17, r24
     968:	88 f4       	brcc	.+34     	; 0x98c <__clzsi2+0x40>
     96a:	8f ef       	ldi	r24, 0xFF	; 255
     96c:	e8 16       	cp	r14, r24
     96e:	f1 04       	cpc	r15, r1
     970:	01 05       	cpc	r16, r1
     972:	11 05       	cpc	r17, r1
     974:	31 f0       	breq	.+12     	; 0x982 <__clzsi2+0x36>
     976:	28 f0       	brcs	.+10     	; 0x982 <__clzsi2+0x36>
     978:	88 e0       	ldi	r24, 0x08	; 8
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	a0 e0       	ldi	r26, 0x00	; 0
     97e:	b0 e0       	ldi	r27, 0x00	; 0
     980:	17 c0       	rjmp	.+46     	; 0x9b0 <__clzsi2+0x64>
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	a0 e0       	ldi	r26, 0x00	; 0
     988:	b0 e0       	ldi	r27, 0x00	; 0
     98a:	12 c0       	rjmp	.+36     	; 0x9b0 <__clzsi2+0x64>
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	e8 16       	cp	r14, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	f8 06       	cpc	r15, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	08 07       	cpc	r16, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	18 07       	cpc	r17, r24
     99c:	28 f0       	brcs	.+10     	; 0x9a8 <__clzsi2+0x5c>
     99e:	88 e1       	ldi	r24, 0x18	; 24
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	a0 e0       	ldi	r26, 0x00	; 0
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__clzsi2+0x64>
     9a8:	80 e1       	ldi	r24, 0x10	; 16
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	a0 e0       	ldi	r26, 0x00	; 0
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	20 e2       	ldi	r18, 0x20	; 32
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	28 1b       	sub	r18, r24
     9ba:	39 0b       	sbc	r19, r25
     9bc:	4a 0b       	sbc	r20, r26
     9be:	5b 0b       	sbc	r21, r27
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__clzsi2+0x7e>
     9c2:	16 95       	lsr	r17
     9c4:	07 95       	ror	r16
     9c6:	f7 94       	ror	r15
     9c8:	e7 94       	ror	r14
     9ca:	8a 95       	dec	r24
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__clzsi2+0x76>
     9ce:	f7 01       	movw	r30, r14
     9d0:	ee 5e       	subi	r30, 0xEE	; 238
     9d2:	fe 4f       	sbci	r31, 0xFE	; 254
     9d4:	80 81       	ld	r24, Z
     9d6:	28 1b       	sub	r18, r24
     9d8:	31 09       	sbc	r19, r1
     9da:	41 09       	sbc	r20, r1
     9dc:	51 09       	sbc	r21, r1
     9de:	c9 01       	movw	r24, r18
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	08 95       	ret

000009ea <__pack_f>:
     9ea:	df 92       	push	r13
     9ec:	ef 92       	push	r14
     9ee:	ff 92       	push	r15
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
     9f4:	fc 01       	movw	r30, r24
     9f6:	e4 80       	ldd	r14, Z+4	; 0x04
     9f8:	f5 80       	ldd	r15, Z+5	; 0x05
     9fa:	06 81       	ldd	r16, Z+6	; 0x06
     9fc:	17 81       	ldd	r17, Z+7	; 0x07
     9fe:	d1 80       	ldd	r13, Z+1	; 0x01
     a00:	80 81       	ld	r24, Z
     a02:	82 30       	cpi	r24, 0x02	; 2
     a04:	48 f4       	brcc	.+18     	; 0xa18 <__pack_f+0x2e>
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	a0 e1       	ldi	r26, 0x10	; 16
     a0c:	b0 e0       	ldi	r27, 0x00	; 0
     a0e:	e8 2a       	or	r14, r24
     a10:	f9 2a       	or	r15, r25
     a12:	0a 2b       	or	r16, r26
     a14:	1b 2b       	or	r17, r27
     a16:	a5 c0       	rjmp	.+330    	; 0xb62 <__pack_f+0x178>
     a18:	84 30       	cpi	r24, 0x04	; 4
     a1a:	09 f4       	brne	.+2      	; 0xa1e <__pack_f+0x34>
     a1c:	9f c0       	rjmp	.+318    	; 0xb5c <__pack_f+0x172>
     a1e:	82 30       	cpi	r24, 0x02	; 2
     a20:	21 f4       	brne	.+8      	; 0xa2a <__pack_f+0x40>
     a22:	ee 24       	eor	r14, r14
     a24:	ff 24       	eor	r15, r15
     a26:	87 01       	movw	r16, r14
     a28:	05 c0       	rjmp	.+10     	; 0xa34 <__pack_f+0x4a>
     a2a:	e1 14       	cp	r14, r1
     a2c:	f1 04       	cpc	r15, r1
     a2e:	01 05       	cpc	r16, r1
     a30:	11 05       	cpc	r17, r1
     a32:	19 f4       	brne	.+6      	; 0xa3a <__pack_f+0x50>
     a34:	e0 e0       	ldi	r30, 0x00	; 0
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	96 c0       	rjmp	.+300    	; 0xb66 <__pack_f+0x17c>
     a3a:	62 81       	ldd	r22, Z+2	; 0x02
     a3c:	73 81       	ldd	r23, Z+3	; 0x03
     a3e:	9f ef       	ldi	r25, 0xFF	; 255
     a40:	62 38       	cpi	r22, 0x82	; 130
     a42:	79 07       	cpc	r23, r25
     a44:	0c f0       	brlt	.+2      	; 0xa48 <__pack_f+0x5e>
     a46:	5b c0       	rjmp	.+182    	; 0xafe <__pack_f+0x114>
     a48:	22 e8       	ldi	r18, 0x82	; 130
     a4a:	3f ef       	ldi	r19, 0xFF	; 255
     a4c:	26 1b       	sub	r18, r22
     a4e:	37 0b       	sbc	r19, r23
     a50:	2a 31       	cpi	r18, 0x1A	; 26
     a52:	31 05       	cpc	r19, r1
     a54:	2c f0       	brlt	.+10     	; 0xa60 <__pack_f+0x76>
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e0       	ldi	r20, 0x00	; 0
     a5c:	50 e0       	ldi	r21, 0x00	; 0
     a5e:	2a c0       	rjmp	.+84     	; 0xab4 <__pack_f+0xca>
     a60:	b8 01       	movw	r22, r16
     a62:	a7 01       	movw	r20, r14
     a64:	02 2e       	mov	r0, r18
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__pack_f+0x86>
     a68:	76 95       	lsr	r23
     a6a:	67 95       	ror	r22
     a6c:	57 95       	ror	r21
     a6e:	47 95       	ror	r20
     a70:	0a 94       	dec	r0
     a72:	d2 f7       	brpl	.-12     	; 0xa68 <__pack_f+0x7e>
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	a0 e0       	ldi	r26, 0x00	; 0
     a7a:	b0 e0       	ldi	r27, 0x00	; 0
     a7c:	04 c0       	rjmp	.+8      	; 0xa86 <__pack_f+0x9c>
     a7e:	88 0f       	add	r24, r24
     a80:	99 1f       	adc	r25, r25
     a82:	aa 1f       	adc	r26, r26
     a84:	bb 1f       	adc	r27, r27
     a86:	2a 95       	dec	r18
     a88:	d2 f7       	brpl	.-12     	; 0xa7e <__pack_f+0x94>
     a8a:	01 97       	sbiw	r24, 0x01	; 1
     a8c:	a1 09       	sbc	r26, r1
     a8e:	b1 09       	sbc	r27, r1
     a90:	8e 21       	and	r24, r14
     a92:	9f 21       	and	r25, r15
     a94:	a0 23       	and	r26, r16
     a96:	b1 23       	and	r27, r17
     a98:	00 97       	sbiw	r24, 0x00	; 0
     a9a:	a1 05       	cpc	r26, r1
     a9c:	b1 05       	cpc	r27, r1
     a9e:	21 f0       	breq	.+8      	; 0xaa8 <__pack_f+0xbe>
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	9a 01       	movw	r18, r20
     aaa:	ab 01       	movw	r20, r22
     aac:	28 2b       	or	r18, r24
     aae:	39 2b       	or	r19, r25
     ab0:	4a 2b       	or	r20, r26
     ab2:	5b 2b       	or	r21, r27
     ab4:	da 01       	movw	r26, r20
     ab6:	c9 01       	movw	r24, r18
     ab8:	8f 77       	andi	r24, 0x7F	; 127
     aba:	90 70       	andi	r25, 0x00	; 0
     abc:	a0 70       	andi	r26, 0x00	; 0
     abe:	b0 70       	andi	r27, 0x00	; 0
     ac0:	80 34       	cpi	r24, 0x40	; 64
     ac2:	91 05       	cpc	r25, r1
     ac4:	a1 05       	cpc	r26, r1
     ac6:	b1 05       	cpc	r27, r1
     ac8:	39 f4       	brne	.+14     	; 0xad8 <__pack_f+0xee>
     aca:	27 ff       	sbrs	r18, 7
     acc:	09 c0       	rjmp	.+18     	; 0xae0 <__pack_f+0xf6>
     ace:	20 5c       	subi	r18, 0xC0	; 192
     ad0:	3f 4f       	sbci	r19, 0xFF	; 255
     ad2:	4f 4f       	sbci	r20, 0xFF	; 255
     ad4:	5f 4f       	sbci	r21, 0xFF	; 255
     ad6:	04 c0       	rjmp	.+8      	; 0xae0 <__pack_f+0xf6>
     ad8:	21 5c       	subi	r18, 0xC1	; 193
     ada:	3f 4f       	sbci	r19, 0xFF	; 255
     adc:	4f 4f       	sbci	r20, 0xFF	; 255
     ade:	5f 4f       	sbci	r21, 0xFF	; 255
     ae0:	e0 e0       	ldi	r30, 0x00	; 0
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	20 30       	cpi	r18, 0x00	; 0
     ae6:	a0 e0       	ldi	r26, 0x00	; 0
     ae8:	3a 07       	cpc	r19, r26
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	4a 07       	cpc	r20, r26
     aee:	a0 e4       	ldi	r26, 0x40	; 64
     af0:	5a 07       	cpc	r21, r26
     af2:	10 f0       	brcs	.+4      	; 0xaf8 <__pack_f+0x10e>
     af4:	e1 e0       	ldi	r30, 0x01	; 1
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	79 01       	movw	r14, r18
     afa:	8a 01       	movw	r16, r20
     afc:	27 c0       	rjmp	.+78     	; 0xb4c <__pack_f+0x162>
     afe:	60 38       	cpi	r22, 0x80	; 128
     b00:	71 05       	cpc	r23, r1
     b02:	64 f5       	brge	.+88     	; 0xb5c <__pack_f+0x172>
     b04:	fb 01       	movw	r30, r22
     b06:	e1 58       	subi	r30, 0x81	; 129
     b08:	ff 4f       	sbci	r31, 0xFF	; 255
     b0a:	d8 01       	movw	r26, r16
     b0c:	c7 01       	movw	r24, r14
     b0e:	8f 77       	andi	r24, 0x7F	; 127
     b10:	90 70       	andi	r25, 0x00	; 0
     b12:	a0 70       	andi	r26, 0x00	; 0
     b14:	b0 70       	andi	r27, 0x00	; 0
     b16:	80 34       	cpi	r24, 0x40	; 64
     b18:	91 05       	cpc	r25, r1
     b1a:	a1 05       	cpc	r26, r1
     b1c:	b1 05       	cpc	r27, r1
     b1e:	39 f4       	brne	.+14     	; 0xb2e <__pack_f+0x144>
     b20:	e7 fe       	sbrs	r14, 7
     b22:	0d c0       	rjmp	.+26     	; 0xb3e <__pack_f+0x154>
     b24:	80 e4       	ldi	r24, 0x40	; 64
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	a0 e0       	ldi	r26, 0x00	; 0
     b2a:	b0 e0       	ldi	r27, 0x00	; 0
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <__pack_f+0x14c>
     b2e:	8f e3       	ldi	r24, 0x3F	; 63
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	a0 e0       	ldi	r26, 0x00	; 0
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	e8 0e       	add	r14, r24
     b38:	f9 1e       	adc	r15, r25
     b3a:	0a 1f       	adc	r16, r26
     b3c:	1b 1f       	adc	r17, r27
     b3e:	17 ff       	sbrs	r17, 7
     b40:	05 c0       	rjmp	.+10     	; 0xb4c <__pack_f+0x162>
     b42:	16 95       	lsr	r17
     b44:	07 95       	ror	r16
     b46:	f7 94       	ror	r15
     b48:	e7 94       	ror	r14
     b4a:	31 96       	adiw	r30, 0x01	; 1
     b4c:	87 e0       	ldi	r24, 0x07	; 7
     b4e:	16 95       	lsr	r17
     b50:	07 95       	ror	r16
     b52:	f7 94       	ror	r15
     b54:	e7 94       	ror	r14
     b56:	8a 95       	dec	r24
     b58:	d1 f7       	brne	.-12     	; 0xb4e <__pack_f+0x164>
     b5a:	05 c0       	rjmp	.+10     	; 0xb66 <__pack_f+0x17c>
     b5c:	ee 24       	eor	r14, r14
     b5e:	ff 24       	eor	r15, r15
     b60:	87 01       	movw	r16, r14
     b62:	ef ef       	ldi	r30, 0xFF	; 255
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	6e 2f       	mov	r22, r30
     b68:	67 95       	ror	r22
     b6a:	66 27       	eor	r22, r22
     b6c:	67 95       	ror	r22
     b6e:	90 2f       	mov	r25, r16
     b70:	9f 77       	andi	r25, 0x7F	; 127
     b72:	d7 94       	ror	r13
     b74:	dd 24       	eor	r13, r13
     b76:	d7 94       	ror	r13
     b78:	8e 2f       	mov	r24, r30
     b7a:	86 95       	lsr	r24
     b7c:	49 2f       	mov	r20, r25
     b7e:	46 2b       	or	r20, r22
     b80:	58 2f       	mov	r21, r24
     b82:	5d 29       	or	r21, r13
     b84:	b7 01       	movw	r22, r14
     b86:	ca 01       	movw	r24, r20
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	ff 90       	pop	r15
     b8e:	ef 90       	pop	r14
     b90:	df 90       	pop	r13
     b92:	08 95       	ret

00000b94 <__unpack_f>:
     b94:	fc 01       	movw	r30, r24
     b96:	db 01       	movw	r26, r22
     b98:	40 81       	ld	r20, Z
     b9a:	51 81       	ldd	r21, Z+1	; 0x01
     b9c:	22 81       	ldd	r18, Z+2	; 0x02
     b9e:	62 2f       	mov	r22, r18
     ba0:	6f 77       	andi	r22, 0x7F	; 127
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	22 1f       	adc	r18, r18
     ba6:	22 27       	eor	r18, r18
     ba8:	22 1f       	adc	r18, r18
     baa:	93 81       	ldd	r25, Z+3	; 0x03
     bac:	89 2f       	mov	r24, r25
     bae:	88 0f       	add	r24, r24
     bb0:	82 2b       	or	r24, r18
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	99 1f       	adc	r25, r25
     bb8:	99 27       	eor	r25, r25
     bba:	99 1f       	adc	r25, r25
     bbc:	11 96       	adiw	r26, 0x01	; 1
     bbe:	9c 93       	st	X, r25
     bc0:	11 97       	sbiw	r26, 0x01	; 1
     bc2:	21 15       	cp	r18, r1
     bc4:	31 05       	cpc	r19, r1
     bc6:	a9 f5       	brne	.+106    	; 0xc32 <__unpack_f+0x9e>
     bc8:	41 15       	cp	r20, r1
     bca:	51 05       	cpc	r21, r1
     bcc:	61 05       	cpc	r22, r1
     bce:	71 05       	cpc	r23, r1
     bd0:	11 f4       	brne	.+4      	; 0xbd6 <__unpack_f+0x42>
     bd2:	82 e0       	ldi	r24, 0x02	; 2
     bd4:	37 c0       	rjmp	.+110    	; 0xc44 <__unpack_f+0xb0>
     bd6:	82 e8       	ldi	r24, 0x82	; 130
     bd8:	9f ef       	ldi	r25, 0xFF	; 255
     bda:	13 96       	adiw	r26, 0x03	; 3
     bdc:	9c 93       	st	X, r25
     bde:	8e 93       	st	-X, r24
     be0:	12 97       	sbiw	r26, 0x02	; 2
     be2:	9a 01       	movw	r18, r20
     be4:	ab 01       	movw	r20, r22
     be6:	67 e0       	ldi	r22, 0x07	; 7
     be8:	22 0f       	add	r18, r18
     bea:	33 1f       	adc	r19, r19
     bec:	44 1f       	adc	r20, r20
     bee:	55 1f       	adc	r21, r21
     bf0:	6a 95       	dec	r22
     bf2:	d1 f7       	brne	.-12     	; 0xbe8 <__unpack_f+0x54>
     bf4:	83 e0       	ldi	r24, 0x03	; 3
     bf6:	8c 93       	st	X, r24
     bf8:	0d c0       	rjmp	.+26     	; 0xc14 <__unpack_f+0x80>
     bfa:	22 0f       	add	r18, r18
     bfc:	33 1f       	adc	r19, r19
     bfe:	44 1f       	adc	r20, r20
     c00:	55 1f       	adc	r21, r21
     c02:	12 96       	adiw	r26, 0x02	; 2
     c04:	8d 91       	ld	r24, X+
     c06:	9c 91       	ld	r25, X
     c08:	13 97       	sbiw	r26, 0x03	; 3
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	13 96       	adiw	r26, 0x03	; 3
     c0e:	9c 93       	st	X, r25
     c10:	8e 93       	st	-X, r24
     c12:	12 97       	sbiw	r26, 0x02	; 2
     c14:	20 30       	cpi	r18, 0x00	; 0
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	38 07       	cpc	r19, r24
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	48 07       	cpc	r20, r24
     c1e:	80 e4       	ldi	r24, 0x40	; 64
     c20:	58 07       	cpc	r21, r24
     c22:	58 f3       	brcs	.-42     	; 0xbfa <__unpack_f+0x66>
     c24:	14 96       	adiw	r26, 0x04	; 4
     c26:	2d 93       	st	X+, r18
     c28:	3d 93       	st	X+, r19
     c2a:	4d 93       	st	X+, r20
     c2c:	5c 93       	st	X, r21
     c2e:	17 97       	sbiw	r26, 0x07	; 7
     c30:	08 95       	ret
     c32:	2f 3f       	cpi	r18, 0xFF	; 255
     c34:	31 05       	cpc	r19, r1
     c36:	79 f4       	brne	.+30     	; 0xc56 <__unpack_f+0xc2>
     c38:	41 15       	cp	r20, r1
     c3a:	51 05       	cpc	r21, r1
     c3c:	61 05       	cpc	r22, r1
     c3e:	71 05       	cpc	r23, r1
     c40:	19 f4       	brne	.+6      	; 0xc48 <__unpack_f+0xb4>
     c42:	84 e0       	ldi	r24, 0x04	; 4
     c44:	8c 93       	st	X, r24
     c46:	08 95       	ret
     c48:	64 ff       	sbrs	r22, 4
     c4a:	03 c0       	rjmp	.+6      	; 0xc52 <__unpack_f+0xbe>
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	8c 93       	st	X, r24
     c50:	12 c0       	rjmp	.+36     	; 0xc76 <__unpack_f+0xe2>
     c52:	1c 92       	st	X, r1
     c54:	10 c0       	rjmp	.+32     	; 0xc76 <__unpack_f+0xe2>
     c56:	2f 57       	subi	r18, 0x7F	; 127
     c58:	30 40       	sbci	r19, 0x00	; 0
     c5a:	13 96       	adiw	r26, 0x03	; 3
     c5c:	3c 93       	st	X, r19
     c5e:	2e 93       	st	-X, r18
     c60:	12 97       	sbiw	r26, 0x02	; 2
     c62:	83 e0       	ldi	r24, 0x03	; 3
     c64:	8c 93       	st	X, r24
     c66:	87 e0       	ldi	r24, 0x07	; 7
     c68:	44 0f       	add	r20, r20
     c6a:	55 1f       	adc	r21, r21
     c6c:	66 1f       	adc	r22, r22
     c6e:	77 1f       	adc	r23, r23
     c70:	8a 95       	dec	r24
     c72:	d1 f7       	brne	.-12     	; 0xc68 <__unpack_f+0xd4>
     c74:	70 64       	ori	r23, 0x40	; 64
     c76:	14 96       	adiw	r26, 0x04	; 4
     c78:	4d 93       	st	X+, r20
     c7a:	5d 93       	st	X+, r21
     c7c:	6d 93       	st	X+, r22
     c7e:	7c 93       	st	X, r23
     c80:	17 97       	sbiw	r26, 0x07	; 7
     c82:	08 95       	ret

00000c84 <__fpcmp_parts_f>:
     c84:	1f 93       	push	r17
     c86:	dc 01       	movw	r26, r24
     c88:	fb 01       	movw	r30, r22
     c8a:	9c 91       	ld	r25, X
     c8c:	92 30       	cpi	r25, 0x02	; 2
     c8e:	08 f4       	brcc	.+2      	; 0xc92 <__fpcmp_parts_f+0xe>
     c90:	47 c0       	rjmp	.+142    	; 0xd20 <__fpcmp_parts_f+0x9c>
     c92:	80 81       	ld	r24, Z
     c94:	82 30       	cpi	r24, 0x02	; 2
     c96:	08 f4       	brcc	.+2      	; 0xc9a <__fpcmp_parts_f+0x16>
     c98:	43 c0       	rjmp	.+134    	; 0xd20 <__fpcmp_parts_f+0x9c>
     c9a:	94 30       	cpi	r25, 0x04	; 4
     c9c:	51 f4       	brne	.+20     	; 0xcb2 <__fpcmp_parts_f+0x2e>
     c9e:	11 96       	adiw	r26, 0x01	; 1
     ca0:	1c 91       	ld	r17, X
     ca2:	84 30       	cpi	r24, 0x04	; 4
     ca4:	99 f5       	brne	.+102    	; 0xd0c <__fpcmp_parts_f+0x88>
     ca6:	81 81       	ldd	r24, Z+1	; 0x01
     ca8:	68 2f       	mov	r22, r24
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	61 1b       	sub	r22, r17
     cae:	71 09       	sbc	r23, r1
     cb0:	3f c0       	rjmp	.+126    	; 0xd30 <__fpcmp_parts_f+0xac>
     cb2:	84 30       	cpi	r24, 0x04	; 4
     cb4:	21 f0       	breq	.+8      	; 0xcbe <__fpcmp_parts_f+0x3a>
     cb6:	92 30       	cpi	r25, 0x02	; 2
     cb8:	31 f4       	brne	.+12     	; 0xcc6 <__fpcmp_parts_f+0x42>
     cba:	82 30       	cpi	r24, 0x02	; 2
     cbc:	b9 f1       	breq	.+110    	; 0xd2c <__fpcmp_parts_f+0xa8>
     cbe:	81 81       	ldd	r24, Z+1	; 0x01
     cc0:	88 23       	and	r24, r24
     cc2:	89 f1       	breq	.+98     	; 0xd26 <__fpcmp_parts_f+0xa2>
     cc4:	2d c0       	rjmp	.+90     	; 0xd20 <__fpcmp_parts_f+0x9c>
     cc6:	11 96       	adiw	r26, 0x01	; 1
     cc8:	1c 91       	ld	r17, X
     cca:	11 97       	sbiw	r26, 0x01	; 1
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	f1 f0       	breq	.+60     	; 0xd0c <__fpcmp_parts_f+0x88>
     cd0:	81 81       	ldd	r24, Z+1	; 0x01
     cd2:	18 17       	cp	r17, r24
     cd4:	d9 f4       	brne	.+54     	; 0xd0c <__fpcmp_parts_f+0x88>
     cd6:	12 96       	adiw	r26, 0x02	; 2
     cd8:	2d 91       	ld	r18, X+
     cda:	3c 91       	ld	r19, X
     cdc:	13 97       	sbiw	r26, 0x03	; 3
     cde:	82 81       	ldd	r24, Z+2	; 0x02
     ce0:	93 81       	ldd	r25, Z+3	; 0x03
     ce2:	82 17       	cp	r24, r18
     ce4:	93 07       	cpc	r25, r19
     ce6:	94 f0       	brlt	.+36     	; 0xd0c <__fpcmp_parts_f+0x88>
     ce8:	28 17       	cp	r18, r24
     cea:	39 07       	cpc	r19, r25
     cec:	bc f0       	brlt	.+46     	; 0xd1c <__fpcmp_parts_f+0x98>
     cee:	14 96       	adiw	r26, 0x04	; 4
     cf0:	8d 91       	ld	r24, X+
     cf2:	9d 91       	ld	r25, X+
     cf4:	0d 90       	ld	r0, X+
     cf6:	bc 91       	ld	r27, X
     cf8:	a0 2d       	mov	r26, r0
     cfa:	24 81       	ldd	r18, Z+4	; 0x04
     cfc:	35 81       	ldd	r19, Z+5	; 0x05
     cfe:	46 81       	ldd	r20, Z+6	; 0x06
     d00:	57 81       	ldd	r21, Z+7	; 0x07
     d02:	28 17       	cp	r18, r24
     d04:	39 07       	cpc	r19, r25
     d06:	4a 07       	cpc	r20, r26
     d08:	5b 07       	cpc	r21, r27
     d0a:	18 f4       	brcc	.+6      	; 0xd12 <__fpcmp_parts_f+0x8e>
     d0c:	11 23       	and	r17, r17
     d0e:	41 f0       	breq	.+16     	; 0xd20 <__fpcmp_parts_f+0x9c>
     d10:	0a c0       	rjmp	.+20     	; 0xd26 <__fpcmp_parts_f+0xa2>
     d12:	82 17       	cp	r24, r18
     d14:	93 07       	cpc	r25, r19
     d16:	a4 07       	cpc	r26, r20
     d18:	b5 07       	cpc	r27, r21
     d1a:	40 f4       	brcc	.+16     	; 0xd2c <__fpcmp_parts_f+0xa8>
     d1c:	11 23       	and	r17, r17
     d1e:	19 f0       	breq	.+6      	; 0xd26 <__fpcmp_parts_f+0xa2>
     d20:	61 e0       	ldi	r22, 0x01	; 1
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	05 c0       	rjmp	.+10     	; 0xd30 <__fpcmp_parts_f+0xac>
     d26:	6f ef       	ldi	r22, 0xFF	; 255
     d28:	7f ef       	ldi	r23, 0xFF	; 255
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <__fpcmp_parts_f+0xac>
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	cb 01       	movw	r24, r22
     d32:	1f 91       	pop	r17
     d34:	08 95       	ret

00000d36 <SREG_vid_EnableBitI>:


#include "SREG_Private.h"

void SREG_vid_EnableBitI(void)
{
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
    SREG |= (1 << SREG_BIT_I);
     d3e:	af e5       	ldi	r26, 0x5F	; 95
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	ef e5       	ldi	r30, 0x5F	; 95
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	80 68       	ori	r24, 0x80	; 128
     d4a:	8c 93       	st	X, r24
}
     d4c:	cf 91       	pop	r28
     d4e:	df 91       	pop	r29
     d50:	08 95       	ret

00000d52 <SREG_vid_ClearBitI>:

void SREG_vid_ClearBitI(void)
{
     d52:	df 93       	push	r29
     d54:	cf 93       	push	r28
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
    
    SREG &= ~(1 << SREG_BIT_I);
     d5a:	af e5       	ldi	r26, 0x5F	; 95
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	ef e5       	ldi	r30, 0x5F	; 95
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	8f 77       	andi	r24, 0x7F	; 127
     d66:	8c 93       	st	X, r24

}
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	08 95       	ret

00000d6e <DIO_enu_Initialization>:
#include "DIO_Private.h"


//Functions' implementation
extern ErrorState_t DIO_enu_Initialization(void)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	0f 92       	push	r0
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	89 83       	std	Y+1, r24	; 0x01


    Local_u8_ErrorFlag = ES_OK;
     d7c:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d80:	0f 90       	pop	r0
     d82:	cf 91       	pop	r28
     d84:	df 91       	pop	r29
     d86:	08 95       	ret

00000d88 <DIO_enu_SetPinDiretion>:

extern ErrorState_t DIO_enu_SetPinDiretion(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinDirection)
{
     d88:	df 93       	push	r29
     d8a:	cf 93       	push	r28
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <DIO_enu_SetPinDiretion+0x6>
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <DIO_enu_SetPinDiretion+0x8>
     d90:	00 d0       	rcall	.+0      	; 0xd92 <DIO_enu_SetPinDiretion+0xa>
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	8a 83       	std	Y+2, r24	; 0x02
     d98:	6b 83       	std	Y+3, r22	; 0x03
     d9a:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinDirection <= DIO_PIN_WRITE) )
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	84 30       	cpi	r24, 0x04	; 4
     da4:	08 f0       	brcs	.+2      	; 0xda8 <DIO_enu_SetPinDiretion+0x20>
     da6:	d0 c0       	rjmp	.+416    	; 0xf48 <DIO_enu_SetPinDiretion+0x1c0>
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	88 30       	cpi	r24, 0x08	; 8
     dac:	08 f0       	brcs	.+2      	; 0xdb0 <DIO_enu_SetPinDiretion+0x28>
     dae:	cc c0       	rjmp	.+408    	; 0xf48 <DIO_enu_SetPinDiretion+0x1c0>
     db0:	8c 81       	ldd	r24, Y+4	; 0x04
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	08 f0       	brcs	.+2      	; 0xdb8 <DIO_enu_SetPinDiretion+0x30>
     db6:	c8 c0       	rjmp	.+400    	; 0xf48 <DIO_enu_SetPinDiretion+0x1c0>
    {
        switch (Copy_u8_PinGroup)
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	28 2f       	mov	r18, r24
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	3e 83       	std	Y+6, r19	; 0x06
     dc0:	2d 83       	std	Y+5, r18	; 0x05
     dc2:	6d 81       	ldd	r22, Y+5	; 0x05
     dc4:	7e 81       	ldd	r23, Y+6	; 0x06
     dc6:	61 30       	cpi	r22, 0x01	; 1
     dc8:	71 05       	cpc	r23, r1
     dca:	09 f4       	brne	.+2      	; 0xdce <DIO_enu_SetPinDiretion+0x46>
     dcc:	41 c0       	rjmp	.+130    	; 0xe50 <DIO_enu_SetPinDiretion+0xc8>
     dce:	8d 81       	ldd	r24, Y+5	; 0x05
     dd0:	9e 81       	ldd	r25, Y+6	; 0x06
     dd2:	82 30       	cpi	r24, 0x02	; 2
     dd4:	91 05       	cpc	r25, r1
     dd6:	34 f4       	brge	.+12     	; 0xde4 <DIO_enu_SetPinDiretion+0x5c>
     dd8:	2d 81       	ldd	r18, Y+5	; 0x05
     dda:	3e 81       	ldd	r19, Y+6	; 0x06
     ddc:	21 15       	cp	r18, r1
     dde:	31 05       	cpc	r19, r1
     de0:	71 f0       	breq	.+28     	; 0xdfe <DIO_enu_SetPinDiretion+0x76>
     de2:	b0 c0       	rjmp	.+352    	; 0xf44 <DIO_enu_SetPinDiretion+0x1bc>
     de4:	6d 81       	ldd	r22, Y+5	; 0x05
     de6:	7e 81       	ldd	r23, Y+6	; 0x06
     de8:	62 30       	cpi	r22, 0x02	; 2
     dea:	71 05       	cpc	r23, r1
     dec:	09 f4       	brne	.+2      	; 0xdf0 <DIO_enu_SetPinDiretion+0x68>
     dee:	59 c0       	rjmp	.+178    	; 0xea2 <DIO_enu_SetPinDiretion+0x11a>
     df0:	8d 81       	ldd	r24, Y+5	; 0x05
     df2:	9e 81       	ldd	r25, Y+6	; 0x06
     df4:	83 30       	cpi	r24, 0x03	; 3
     df6:	91 05       	cpc	r25, r1
     df8:	09 f4       	brne	.+2      	; 0xdfc <DIO_enu_SetPinDiretion+0x74>
     dfa:	7c c0       	rjmp	.+248    	; 0xef4 <DIO_enu_SetPinDiretion+0x16c>
     dfc:	a3 c0       	rjmp	.+326    	; 0xf44 <DIO_enu_SetPinDiretion+0x1bc>
        {
            case DIO_PIN_GROUP_A:

            //Masking the bit
            DIO_DDRA &= ~( 1 << Copy_u8_PinNumber );
     dfe:	aa e3       	ldi	r26, 0x3A	; 58
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	ea e3       	ldi	r30, 0x3A	; 58
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	48 2f       	mov	r20, r24
     e0a:	8b 81       	ldd	r24, Y+3	; 0x03
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <DIO_enu_SetPinDiretion+0x92>
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	2a 95       	dec	r18
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <DIO_enu_SetPinDiretion+0x8e>
     e1e:	80 95       	com	r24
     e20:	84 23       	and	r24, r20
     e22:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRA |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
     e24:	aa e3       	ldi	r26, 0x3A	; 58
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	ea e3       	ldi	r30, 0x3A	; 58
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	48 2f       	mov	r20, r24
     e30:	8c 81       	ldd	r24, Y+4	; 0x04
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	8b 81       	ldd	r24, Y+3	; 0x03
     e38:	88 2f       	mov	r24, r24
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	b9 01       	movw	r22, r18
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <DIO_enu_SetPinDiretion+0xbc>
     e40:	66 0f       	add	r22, r22
     e42:	77 1f       	adc	r23, r23
     e44:	8a 95       	dec	r24
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <DIO_enu_SetPinDiretion+0xb8>
     e48:	cb 01       	movw	r24, r22
     e4a:	84 2b       	or	r24, r20
     e4c:	8c 93       	st	X, r24
     e4e:	7a c0       	rjmp	.+244    	; 0xf44 <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_B:
            //Masking the bit
            DIO_DDRB &= ~( 1 << Copy_u8_PinNumber);
     e50:	a7 e3       	ldi	r26, 0x37	; 55
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e7 e3       	ldi	r30, 0x37	; 55
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	48 2f       	mov	r20, r24
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <DIO_enu_SetPinDiretion+0xe4>
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	2a 95       	dec	r18
     e6e:	e2 f7       	brpl	.-8      	; 0xe68 <DIO_enu_SetPinDiretion+0xe0>
     e70:	80 95       	com	r24
     e72:	84 23       	and	r24, r20
     e74:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRB |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
     e76:	a7 e3       	ldi	r26, 0x37	; 55
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e7 e3       	ldi	r30, 0x37	; 55
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	8c 81       	ldd	r24, Y+4	; 0x04
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	88 2f       	mov	r24, r24
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	b9 01       	movw	r22, r18
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <DIO_enu_SetPinDiretion+0x10e>
     e92:	66 0f       	add	r22, r22
     e94:	77 1f       	adc	r23, r23
     e96:	8a 95       	dec	r24
     e98:	e2 f7       	brpl	.-8      	; 0xe92 <DIO_enu_SetPinDiretion+0x10a>
     e9a:	cb 01       	movw	r24, r22
     e9c:	84 2b       	or	r24, r20
     e9e:	8c 93       	st	X, r24
     ea0:	51 c0       	rjmp	.+162    	; 0xf44 <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_C:
            //Masking the bit
            DIO_DDRC &= ~( 1 << Copy_u8_PinNumber);
     ea2:	a4 e3       	ldi	r26, 0x34	; 52
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e4 e3       	ldi	r30, 0x34	; 52
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	48 2f       	mov	r20, r24
     eae:	8b 81       	ldd	r24, Y+3	; 0x03
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <DIO_enu_SetPinDiretion+0x136>
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	2a 95       	dec	r18
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <DIO_enu_SetPinDiretion+0x132>
     ec2:	80 95       	com	r24
     ec4:	84 23       	and	r24, r20
     ec6:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRC |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
     ec8:	a4 e3       	ldi	r26, 0x34	; 52
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e4 e3       	ldi	r30, 0x34	; 52
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	48 2f       	mov	r20, r24
     ed4:	8c 81       	ldd	r24, Y+4	; 0x04
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	8b 81       	ldd	r24, Y+3	; 0x03
     edc:	88 2f       	mov	r24, r24
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	b9 01       	movw	r22, r18
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <DIO_enu_SetPinDiretion+0x160>
     ee4:	66 0f       	add	r22, r22
     ee6:	77 1f       	adc	r23, r23
     ee8:	8a 95       	dec	r24
     eea:	e2 f7       	brpl	.-8      	; 0xee4 <DIO_enu_SetPinDiretion+0x15c>
     eec:	cb 01       	movw	r24, r22
     eee:	84 2b       	or	r24, r20
     ef0:	8c 93       	st	X, r24
     ef2:	28 c0       	rjmp	.+80     	; 0xf44 <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_D:
            //Masking the bit
            DIO_DDRD &= ~( 1 << Copy_u8_PinNumber);
     ef4:	a1 e3       	ldi	r26, 0x31	; 49
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e1 e3       	ldi	r30, 0x31	; 49
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	48 2f       	mov	r20, r24
     f00:	8b 81       	ldd	r24, Y+3	; 0x03
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <DIO_enu_SetPinDiretion+0x188>
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	2a 95       	dec	r18
     f12:	e2 f7       	brpl	.-8      	; 0xf0c <DIO_enu_SetPinDiretion+0x184>
     f14:	80 95       	com	r24
     f16:	84 23       	and	r24, r20
     f18:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRD |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
     f1a:	a1 e3       	ldi	r26, 0x31	; 49
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e1 e3       	ldi	r30, 0x31	; 49
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	48 2f       	mov	r20, r24
     f26:	8c 81       	ldd	r24, Y+4	; 0x04
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	8b 81       	ldd	r24, Y+3	; 0x03
     f2e:	88 2f       	mov	r24, r24
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	b9 01       	movw	r22, r18
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <DIO_enu_SetPinDiretion+0x1b2>
     f36:	66 0f       	add	r22, r22
     f38:	77 1f       	adc	r23, r23
     f3a:	8a 95       	dec	r24
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <DIO_enu_SetPinDiretion+0x1ae>
     f3e:	cb 01       	movw	r24, r22
     f40:	84 2b       	or	r24, r20
     f42:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     f44:	19 82       	std	Y+1, r1	; 0x01
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <DIO_enu_SetPinDiretion+0x1c4>

    }
    else
    {
        Local_u8_ErrorFlag =ES_OUT_OF_RANGE;
     f48:	82 e0       	ldi	r24, 0x02	; 2
     f4a:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f4e:	26 96       	adiw	r28, 0x06	; 6
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <DIO_enu_SetPinState>:

extern ErrorState_t DIO_enu_SetPinState(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinState)
{
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	00 d0       	rcall	.+0      	; 0xf66 <DIO_enu_SetPinState+0x6>
     f66:	00 d0       	rcall	.+0      	; 0xf68 <DIO_enu_SetPinState+0x8>
     f68:	00 d0       	rcall	.+0      	; 0xf6a <DIO_enu_SetPinState+0xa>
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     f6e:	8a 83       	std	Y+2, r24	; 0x02
     f70:	6b 83       	std	Y+3, r22	; 0x03
     f72:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinState <= DIO_PULL_UP))
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	84 30       	cpi	r24, 0x04	; 4
     f7c:	08 f0       	brcs	.+2      	; 0xf80 <DIO_enu_SetPinState+0x20>
     f7e:	d0 c0       	rjmp	.+416    	; 0x1120 <DIO_enu_SetPinState+0x1c0>
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	88 30       	cpi	r24, 0x08	; 8
     f84:	08 f0       	brcs	.+2      	; 0xf88 <DIO_enu_SetPinState+0x28>
     f86:	cc c0       	rjmp	.+408    	; 0x1120 <DIO_enu_SetPinState+0x1c0>
     f88:	8c 81       	ldd	r24, Y+4	; 0x04
     f8a:	82 30       	cpi	r24, 0x02	; 2
     f8c:	08 f0       	brcs	.+2      	; 0xf90 <DIO_enu_SetPinState+0x30>
     f8e:	c8 c0       	rjmp	.+400    	; 0x1120 <DIO_enu_SetPinState+0x1c0>
    {
        switch (Copy_u8_PinGroup)
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	3e 83       	std	Y+6, r19	; 0x06
     f98:	2d 83       	std	Y+5, r18	; 0x05
     f9a:	6d 81       	ldd	r22, Y+5	; 0x05
     f9c:	7e 81       	ldd	r23, Y+6	; 0x06
     f9e:	61 30       	cpi	r22, 0x01	; 1
     fa0:	71 05       	cpc	r23, r1
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <DIO_enu_SetPinState+0x46>
     fa4:	41 c0       	rjmp	.+130    	; 0x1028 <DIO_enu_SetPinState+0xc8>
     fa6:	8d 81       	ldd	r24, Y+5	; 0x05
     fa8:	9e 81       	ldd	r25, Y+6	; 0x06
     faa:	82 30       	cpi	r24, 0x02	; 2
     fac:	91 05       	cpc	r25, r1
     fae:	34 f4       	brge	.+12     	; 0xfbc <DIO_enu_SetPinState+0x5c>
     fb0:	2d 81       	ldd	r18, Y+5	; 0x05
     fb2:	3e 81       	ldd	r19, Y+6	; 0x06
     fb4:	21 15       	cp	r18, r1
     fb6:	31 05       	cpc	r19, r1
     fb8:	71 f0       	breq	.+28     	; 0xfd6 <DIO_enu_SetPinState+0x76>
     fba:	b0 c0       	rjmp	.+352    	; 0x111c <DIO_enu_SetPinState+0x1bc>
     fbc:	6d 81       	ldd	r22, Y+5	; 0x05
     fbe:	7e 81       	ldd	r23, Y+6	; 0x06
     fc0:	62 30       	cpi	r22, 0x02	; 2
     fc2:	71 05       	cpc	r23, r1
     fc4:	09 f4       	brne	.+2      	; 0xfc8 <DIO_enu_SetPinState+0x68>
     fc6:	59 c0       	rjmp	.+178    	; 0x107a <DIO_enu_SetPinState+0x11a>
     fc8:	8d 81       	ldd	r24, Y+5	; 0x05
     fca:	9e 81       	ldd	r25, Y+6	; 0x06
     fcc:	83 30       	cpi	r24, 0x03	; 3
     fce:	91 05       	cpc	r25, r1
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <DIO_enu_SetPinState+0x74>
     fd2:	7c c0       	rjmp	.+248    	; 0x10cc <DIO_enu_SetPinState+0x16c>
     fd4:	a3 c0       	rjmp	.+326    	; 0x111c <DIO_enu_SetPinState+0x1bc>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA &= ~( 1 << Copy_u8_PinNumber);
     fd6:	ab e3       	ldi	r26, 0x3B	; 59
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	eb e3       	ldi	r30, 0x3B	; 59
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	48 2f       	mov	r20, r24
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <DIO_enu_SetPinState+0x92>
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	2a 95       	dec	r18
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <DIO_enu_SetPinState+0x8e>
     ff6:	80 95       	com	r24
     ff8:	84 23       	and	r24, r20
     ffa:	8c 93       	st	X, r24
            DIO_PORTA |= ( Copy_u8_PinState << Copy_u8_PinNumber);
     ffc:	ab e3       	ldi	r26, 0x3B	; 59
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	eb e3       	ldi	r30, 0x3B	; 59
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	48 2f       	mov	r20, r24
    1008:	8c 81       	ldd	r24, Y+4	; 0x04
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	8b 81       	ldd	r24, Y+3	; 0x03
    1010:	88 2f       	mov	r24, r24
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	b9 01       	movw	r22, r18
    1016:	02 c0       	rjmp	.+4      	; 0x101c <DIO_enu_SetPinState+0xbc>
    1018:	66 0f       	add	r22, r22
    101a:	77 1f       	adc	r23, r23
    101c:	8a 95       	dec	r24
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <DIO_enu_SetPinState+0xb8>
    1020:	cb 01       	movw	r24, r22
    1022:	84 2b       	or	r24, r20
    1024:	8c 93       	st	X, r24
    1026:	7a c0       	rjmp	.+244    	; 0x111c <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB &= ~( 1 << Copy_u8_PinNumber);
    1028:	a8 e3       	ldi	r26, 0x38	; 56
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e8 e3       	ldi	r30, 0x38	; 56
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	48 2f       	mov	r20, r24
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <DIO_enu_SetPinState+0xe4>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	2a 95       	dec	r18
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <DIO_enu_SetPinState+0xe0>
    1048:	80 95       	com	r24
    104a:	84 23       	and	r24, r20
    104c:	8c 93       	st	X, r24
            DIO_PORTB |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    104e:	a8 e3       	ldi	r26, 0x38	; 56
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e8 e3       	ldi	r30, 0x38	; 56
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8c 81       	ldd	r24, Y+4	; 0x04
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	88 2f       	mov	r24, r24
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	b9 01       	movw	r22, r18
    1068:	02 c0       	rjmp	.+4      	; 0x106e <DIO_enu_SetPinState+0x10e>
    106a:	66 0f       	add	r22, r22
    106c:	77 1f       	adc	r23, r23
    106e:	8a 95       	dec	r24
    1070:	e2 f7       	brpl	.-8      	; 0x106a <DIO_enu_SetPinState+0x10a>
    1072:	cb 01       	movw	r24, r22
    1074:	84 2b       	or	r24, r20
    1076:	8c 93       	st	X, r24
    1078:	51 c0       	rjmp	.+162    	; 0x111c <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC &= ~( 1 << Copy_u8_PinNumber);
    107a:	a5 e3       	ldi	r26, 0x35	; 53
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e5 e3       	ldi	r30, 0x35	; 53
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	48 2f       	mov	r20, r24
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <DIO_enu_SetPinState+0x136>
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	2a 95       	dec	r18
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <DIO_enu_SetPinState+0x132>
    109a:	80 95       	com	r24
    109c:	84 23       	and	r24, r20
    109e:	8c 93       	st	X, r24
            DIO_PORTC |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    10a0:	a5 e3       	ldi	r26, 0x35	; 53
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e5 e3       	ldi	r30, 0x35	; 53
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	48 2f       	mov	r20, r24
    10ac:	8c 81       	ldd	r24, Y+4	; 0x04
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	88 2f       	mov	r24, r24
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	b9 01       	movw	r22, r18
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <DIO_enu_SetPinState+0x160>
    10bc:	66 0f       	add	r22, r22
    10be:	77 1f       	adc	r23, r23
    10c0:	8a 95       	dec	r24
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <DIO_enu_SetPinState+0x15c>
    10c4:	cb 01       	movw	r24, r22
    10c6:	84 2b       	or	r24, r20
    10c8:	8c 93       	st	X, r24
    10ca:	28 c0       	rjmp	.+80     	; 0x111c <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD &= ~( 1 << Copy_u8_PinNumber);
    10cc:	a2 e3       	ldi	r26, 0x32	; 50
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e2 e3       	ldi	r30, 0x32	; 50
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	48 2f       	mov	r20, r24
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <DIO_enu_SetPinState+0x188>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	2a 95       	dec	r18
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <DIO_enu_SetPinState+0x184>
    10ec:	80 95       	com	r24
    10ee:	84 23       	and	r24, r20
    10f0:	8c 93       	st	X, r24
            DIO_PORTD |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    10f2:	a2 e3       	ldi	r26, 0x32	; 50
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e2 e3       	ldi	r30, 0x32	; 50
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	48 2f       	mov	r20, r24
    10fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	88 2f       	mov	r24, r24
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	b9 01       	movw	r22, r18
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <DIO_enu_SetPinState+0x1b2>
    110e:	66 0f       	add	r22, r22
    1110:	77 1f       	adc	r23, r23
    1112:	8a 95       	dec	r24
    1114:	e2 f7       	brpl	.-8      	; 0x110e <DIO_enu_SetPinState+0x1ae>
    1116:	cb 01       	movw	r24, r22
    1118:	84 2b       	or	r24, r20
    111a:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    111c:	19 82       	std	Y+1, r1	; 0x01
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <DIO_enu_SetPinState+0x1c4>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1120:	82 e0       	ldi	r24, 0x02	; 2
    1122:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    1124:	89 81       	ldd	r24, Y+1	; 0x01
}
    1126:	26 96       	adiw	r28, 0x06	; 6
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	cd bf       	out	0x3d, r28	; 61
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <DIO_enu_SetPinValue>:

extern ErrorState_t DIO_enu_SetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinValue)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <DIO_enu_SetPinValue+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <DIO_enu_SetPinValue+0x8>
    1140:	00 d0       	rcall	.+0      	; 0x1142 <DIO_enu_SetPinValue+0xa>
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	8a 83       	std	Y+2, r24	; 0x02
    1148:	6b 83       	std	Y+3, r22	; 0x03
    114a:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) && (Copy_u8_PinValue <= DIO_HIGH))
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	84 30       	cpi	r24, 0x04	; 4
    1154:	08 f0       	brcs	.+2      	; 0x1158 <DIO_enu_SetPinValue+0x20>
    1156:	db c0       	rjmp	.+438    	; 0x130e <DIO_enu_SetPinValue+0x1d6>
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	88 30       	cpi	r24, 0x08	; 8
    115c:	08 f0       	brcs	.+2      	; 0x1160 <DIO_enu_SetPinValue+0x28>
    115e:	d7 c0       	rjmp	.+430    	; 0x130e <DIO_enu_SetPinValue+0x1d6>
    1160:	8c 81       	ldd	r24, Y+4	; 0x04
    1162:	82 30       	cpi	r24, 0x02	; 2
    1164:	08 f0       	brcs	.+2      	; 0x1168 <DIO_enu_SetPinValue+0x30>
    1166:	d3 c0       	rjmp	.+422    	; 0x130e <DIO_enu_SetPinValue+0x1d6>
    {
        switch (Copy_u8_PinGroup)
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	3e 83       	std	Y+6, r19	; 0x06
    1170:	2d 83       	std	Y+5, r18	; 0x05
    1172:	8d 81       	ldd	r24, Y+5	; 0x05
    1174:	9e 81       	ldd	r25, Y+6	; 0x06
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	91 05       	cpc	r25, r1
    117a:	09 f4       	brne	.+2      	; 0x117e <DIO_enu_SetPinValue+0x46>
    117c:	43 c0       	rjmp	.+134    	; 0x1204 <DIO_enu_SetPinValue+0xcc>
    117e:	2d 81       	ldd	r18, Y+5	; 0x05
    1180:	3e 81       	ldd	r19, Y+6	; 0x06
    1182:	22 30       	cpi	r18, 0x02	; 2
    1184:	31 05       	cpc	r19, r1
    1186:	2c f4       	brge	.+10     	; 0x1192 <DIO_enu_SetPinValue+0x5a>
    1188:	8d 81       	ldd	r24, Y+5	; 0x05
    118a:	9e 81       	ldd	r25, Y+6	; 0x06
    118c:	00 97       	sbiw	r24, 0x00	; 0
    118e:	71 f0       	breq	.+28     	; 0x11ac <DIO_enu_SetPinValue+0x74>
    1190:	bc c0       	rjmp	.+376    	; 0x130a <DIO_enu_SetPinValue+0x1d2>
    1192:	2d 81       	ldd	r18, Y+5	; 0x05
    1194:	3e 81       	ldd	r19, Y+6	; 0x06
    1196:	22 30       	cpi	r18, 0x02	; 2
    1198:	31 05       	cpc	r19, r1
    119a:	09 f4       	brne	.+2      	; 0x119e <DIO_enu_SetPinValue+0x66>
    119c:	5f c0       	rjmp	.+190    	; 0x125c <DIO_enu_SetPinValue+0x124>
    119e:	8d 81       	ldd	r24, Y+5	; 0x05
    11a0:	9e 81       	ldd	r25, Y+6	; 0x06
    11a2:	83 30       	cpi	r24, 0x03	; 3
    11a4:	91 05       	cpc	r25, r1
    11a6:	09 f4       	brne	.+2      	; 0x11aa <DIO_enu_SetPinValue+0x72>
    11a8:	85 c0       	rjmp	.+266    	; 0x12b4 <DIO_enu_SetPinValue+0x17c>
    11aa:	af c0       	rjmp	.+350    	; 0x130a <DIO_enu_SetPinValue+0x1d2>
        {
            case DIO_PIN_GROUP_A:
            if(Copy_u8_PinValue == DIO_HIGH)
    11ac:	8c 81       	ldd	r24, Y+4	; 0x04
    11ae:	81 30       	cpi	r24, 0x01	; 1
    11b0:	a1 f4       	brne	.+40     	; 0x11da <DIO_enu_SetPinValue+0xa2>
            {
                DIO_PORTA |= ( 1 << Copy_u8_PinNumber );
    11b2:	ab e3       	ldi	r26, 0x3B	; 59
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	eb e3       	ldi	r30, 0x3B	; 59
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	48 2f       	mov	r20, r24
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	02 2e       	mov	r0, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <DIO_enu_SetPinValue+0x98>
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	0a 94       	dec	r0
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <DIO_enu_SetPinValue+0x94>
    11d4:	84 2b       	or	r24, r20
    11d6:	8c 93       	st	X, r24
    11d8:	98 c0       	rjmp	.+304    	; 0x130a <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTA &= ~ (1 << Copy_u8_PinNumber);
    11da:	ab e3       	ldi	r26, 0x3B	; 59
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	eb e3       	ldi	r30, 0x3B	; 59
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 2e       	mov	r0, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <DIO_enu_SetPinValue+0xc0>
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	0a 94       	dec	r0
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <DIO_enu_SetPinValue+0xbc>
    11fc:	80 95       	com	r24
    11fe:	84 23       	and	r24, r20
    1200:	8c 93       	st	X, r24
    1202:	83 c0       	rjmp	.+262    	; 0x130a <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_B:
            if(Copy_u8_PinValue == DIO_HIGH)
    1204:	8c 81       	ldd	r24, Y+4	; 0x04
    1206:	81 30       	cpi	r24, 0x01	; 1
    1208:	a1 f4       	brne	.+40     	; 0x1232 <DIO_enu_SetPinValue+0xfa>
            {
                DIO_PORTB |= ( 1 << Copy_u8_PinNumber );
    120a:	a8 e3       	ldi	r26, 0x38	; 56
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e8 e3       	ldi	r30, 0x38	; 56
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <DIO_enu_SetPinValue+0xf0>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <DIO_enu_SetPinValue+0xec>
    122c:	84 2b       	or	r24, r20
    122e:	8c 93       	st	X, r24
    1230:	6c c0       	rjmp	.+216    	; 0x130a <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTB &= ~ (1 << Copy_u8_PinNumber);
    1232:	a8 e3       	ldi	r26, 0x38	; 56
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e8 e3       	ldi	r30, 0x38	; 56
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	48 2f       	mov	r20, r24
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	02 2e       	mov	r0, r18
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <DIO_enu_SetPinValue+0x118>
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	0a 94       	dec	r0
    1252:	e2 f7       	brpl	.-8      	; 0x124c <DIO_enu_SetPinValue+0x114>
    1254:	80 95       	com	r24
    1256:	84 23       	and	r24, r20
    1258:	8c 93       	st	X, r24
    125a:	57 c0       	rjmp	.+174    	; 0x130a <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_C:
            if(Copy_u8_PinValue == DIO_HIGH)
    125c:	8c 81       	ldd	r24, Y+4	; 0x04
    125e:	81 30       	cpi	r24, 0x01	; 1
    1260:	a1 f4       	brne	.+40     	; 0x128a <DIO_enu_SetPinValue+0x152>
            {
                DIO_PORTC |= ( 1 << Copy_u8_PinNumber );
    1262:	a5 e3       	ldi	r26, 0x35	; 53
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	e5 e3       	ldi	r30, 0x35	; 53
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	48 2f       	mov	r20, r24
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	02 2e       	mov	r0, r18
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <DIO_enu_SetPinValue+0x148>
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	0a 94       	dec	r0
    1282:	e2 f7       	brpl	.-8      	; 0x127c <DIO_enu_SetPinValue+0x144>
    1284:	84 2b       	or	r24, r20
    1286:	8c 93       	st	X, r24
    1288:	40 c0       	rjmp	.+128    	; 0x130a <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTC &= ~ (1 << Copy_u8_PinNumber);
    128a:	a5 e3       	ldi	r26, 0x35	; 53
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e5 e3       	ldi	r30, 0x35	; 53
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	48 2f       	mov	r20, r24
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	02 2e       	mov	r0, r18
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <DIO_enu_SetPinValue+0x170>
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	0a 94       	dec	r0
    12aa:	e2 f7       	brpl	.-8      	; 0x12a4 <DIO_enu_SetPinValue+0x16c>
    12ac:	80 95       	com	r24
    12ae:	84 23       	and	r24, r20
    12b0:	8c 93       	st	X, r24
    12b2:	2b c0       	rjmp	.+86     	; 0x130a <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_D:
            if(Copy_u8_PinValue == DIO_HIGH)
    12b4:	8c 81       	ldd	r24, Y+4	; 0x04
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	a1 f4       	brne	.+40     	; 0x12e2 <DIO_enu_SetPinValue+0x1aa>
            {
                DIO_PORTD |= ( 1 << Copy_u8_PinNumber );
    12ba:	a2 e3       	ldi	r26, 0x32	; 50
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e2 e3       	ldi	r30, 0x32	; 50
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	48 2f       	mov	r20, r24
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	02 2e       	mov	r0, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <DIO_enu_SetPinValue+0x1a0>
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	0a 94       	dec	r0
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <DIO_enu_SetPinValue+0x19c>
    12dc:	84 2b       	or	r24, r20
    12de:	8c 93       	st	X, r24
    12e0:	14 c0       	rjmp	.+40     	; 0x130a <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
    12e2:	a2 e3       	ldi	r26, 0x32	; 50
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e2 e3       	ldi	r30, 0x32	; 50
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	48 2f       	mov	r20, r24
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	02 2e       	mov	r0, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <DIO_enu_SetPinValue+0x1c8>
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	0a 94       	dec	r0
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <DIO_enu_SetPinValue+0x1c4>
    1304:	80 95       	com	r24
    1306:	84 23       	and	r24, r20
    1308:	8c 93       	st	X, r24
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    130a:	19 82       	std	Y+1, r1	; 0x01
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <DIO_enu_SetPinValue+0x1da>


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    130e:	82 e0       	ldi	r24, 0x02	; 2
    1310:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    1312:	89 81       	ldd	r24, Y+1	; 0x01
}
    1314:	26 96       	adiw	r28, 0x06	; 6
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	de bf       	out	0x3e, r29	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	cd bf       	out	0x3d, r28	; 61
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <DIO_enu_TogglePinValue>:

extern ErrorState_t DIO_enu_TogglePinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber)
{
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	00 d0       	rcall	.+0      	; 0x132c <DIO_enu_TogglePinValue+0x6>
    132c:	00 d0       	rcall	.+0      	; 0x132e <DIO_enu_TogglePinValue+0x8>
    132e:	0f 92       	push	r0
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	8a 83       	std	Y+2, r24	; 0x02
    1336:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	89 83       	std	Y+1, r24	; 0x01

    if ( (Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7))
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	84 30       	cpi	r24, 0x04	; 4
    1340:	08 f0       	brcs	.+2      	; 0x1344 <DIO_enu_TogglePinValue+0x1e>
    1342:	73 c0       	rjmp	.+230    	; 0x142a <DIO_enu_TogglePinValue+0x104>
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	88 30       	cpi	r24, 0x08	; 8
    1348:	08 f0       	brcs	.+2      	; 0x134c <DIO_enu_TogglePinValue+0x26>
    134a:	6f c0       	rjmp	.+222    	; 0x142a <DIO_enu_TogglePinValue+0x104>
    {
        switch (Copy_u8_PinGroup)
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	3d 83       	std	Y+5, r19	; 0x05
    1354:	2c 83       	std	Y+4, r18	; 0x04
    1356:	8c 81       	ldd	r24, Y+4	; 0x04
    1358:	9d 81       	ldd	r25, Y+5	; 0x05
    135a:	81 30       	cpi	r24, 0x01	; 1
    135c:	91 05       	cpc	r25, r1
    135e:	49 f1       	breq	.+82     	; 0x13b2 <DIO_enu_TogglePinValue+0x8c>
    1360:	2c 81       	ldd	r18, Y+4	; 0x04
    1362:	3d 81       	ldd	r19, Y+5	; 0x05
    1364:	22 30       	cpi	r18, 0x02	; 2
    1366:	31 05       	cpc	r19, r1
    1368:	2c f4       	brge	.+10     	; 0x1374 <DIO_enu_TogglePinValue+0x4e>
    136a:	8c 81       	ldd	r24, Y+4	; 0x04
    136c:	9d 81       	ldd	r25, Y+5	; 0x05
    136e:	00 97       	sbiw	r24, 0x00	; 0
    1370:	61 f0       	breq	.+24     	; 0x138a <DIO_enu_TogglePinValue+0x64>
    1372:	5a c0       	rjmp	.+180    	; 0x1428 <DIO_enu_TogglePinValue+0x102>
    1374:	2c 81       	ldd	r18, Y+4	; 0x04
    1376:	3d 81       	ldd	r19, Y+5	; 0x05
    1378:	22 30       	cpi	r18, 0x02	; 2
    137a:	31 05       	cpc	r19, r1
    137c:	71 f1       	breq	.+92     	; 0x13da <DIO_enu_TogglePinValue+0xb4>
    137e:	8c 81       	ldd	r24, Y+4	; 0x04
    1380:	9d 81       	ldd	r25, Y+5	; 0x05
    1382:	83 30       	cpi	r24, 0x03	; 3
    1384:	91 05       	cpc	r25, r1
    1386:	e9 f1       	breq	.+122    	; 0x1402 <DIO_enu_TogglePinValue+0xdc>
    1388:	4f c0       	rjmp	.+158    	; 0x1428 <DIO_enu_TogglePinValue+0x102>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA ^= ( 1 << Copy_u8_PinNumber);
    138a:	ab e3       	ldi	r26, 0x3B	; 59
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	eb e3       	ldi	r30, 0x3B	; 59
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	48 2f       	mov	r20, r24
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	02 2e       	mov	r0, r18
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <DIO_enu_TogglePinValue+0x82>
    13a4:	88 0f       	add	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	0a 94       	dec	r0
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <DIO_enu_TogglePinValue+0x7e>
    13ac:	84 27       	eor	r24, r20
    13ae:	8c 93       	st	X, r24
    13b0:	3b c0       	rjmp	.+118    	; 0x1428 <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB ^= ( 1 << Copy_u8_PinNumber);
    13b2:	a8 e3       	ldi	r26, 0x38	; 56
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e8 e3       	ldi	r30, 0x38	; 56
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	48 2f       	mov	r20, r24
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	02 2e       	mov	r0, r18
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <DIO_enu_TogglePinValue+0xaa>
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	0a 94       	dec	r0
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <DIO_enu_TogglePinValue+0xa6>
    13d4:	84 27       	eor	r24, r20
    13d6:	8c 93       	st	X, r24
    13d8:	27 c0       	rjmp	.+78     	; 0x1428 <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC ^= ( 1 << Copy_u8_PinNumber);
    13da:	a5 e3       	ldi	r26, 0x35	; 53
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e5 e3       	ldi	r30, 0x35	; 53
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	48 2f       	mov	r20, r24
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	02 2e       	mov	r0, r18
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <DIO_enu_TogglePinValue+0xd2>
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	0a 94       	dec	r0
    13fa:	e2 f7       	brpl	.-8      	; 0x13f4 <DIO_enu_TogglePinValue+0xce>
    13fc:	84 27       	eor	r24, r20
    13fe:	8c 93       	st	X, r24
    1400:	13 c0       	rjmp	.+38     	; 0x1428 <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD ^= ( 1 << Copy_u8_PinNumber);
    1402:	a2 e3       	ldi	r26, 0x32	; 50
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e2 e3       	ldi	r30, 0x32	; 50
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	48 2f       	mov	r20, r24
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	02 2e       	mov	r0, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <DIO_enu_TogglePinValue+0xfa>
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	0a 94       	dec	r0
    1422:	e2 f7       	brpl	.-8      	; 0x141c <DIO_enu_TogglePinValue+0xf6>
    1424:	84 27       	eor	r24, r20
    1426:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    1428:	19 82       	std	Y+1, r1	; 0x01

    }

    return Local_u8_ErrorFlag;
    142a:	89 81       	ldd	r24, Y+1	; 0x01
}
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <DIO_enu_GetPinValue>:

extern ErrorState_t DIO_enu_GetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8* Copy_pu8_PinValue)
{
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	27 97       	sbiw	r28, 0x07	; 7
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	f8 94       	cli
    144a:	de bf       	out	0x3e, r29	; 62
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	cd bf       	out	0x3d, r28	; 61
    1450:	8a 83       	std	Y+2, r24	; 0x02
    1452:	6b 83       	std	Y+3, r22	; 0x03
    1454:	5d 83       	std	Y+5, r21	; 0x05
    1456:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_PinValue)
    145c:	8c 81       	ldd	r24, Y+4	; 0x04
    145e:	9d 81       	ldd	r25, Y+5	; 0x05
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	09 f4       	brne	.+2      	; 0x1466 <DIO_enu_GetPinValue+0x2a>
    1464:	7d c0       	rjmp	.+250    	; 0x1560 <DIO_enu_GetPinValue+0x124>
    {

        if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) )
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	84 30       	cpi	r24, 0x04	; 4
    146a:	08 f0       	brcs	.+2      	; 0x146e <DIO_enu_GetPinValue+0x32>
    146c:	76 c0       	rjmp	.+236    	; 0x155a <DIO_enu_GetPinValue+0x11e>
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	88 30       	cpi	r24, 0x08	; 8
    1472:	08 f0       	brcs	.+2      	; 0x1476 <DIO_enu_GetPinValue+0x3a>
    1474:	72 c0       	rjmp	.+228    	; 0x155a <DIO_enu_GetPinValue+0x11e>
        {
            switch (Copy_u8_PinGroup)
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	3f 83       	std	Y+7, r19	; 0x07
    147e:	2e 83       	std	Y+6, r18	; 0x06
    1480:	4e 81       	ldd	r20, Y+6	; 0x06
    1482:	5f 81       	ldd	r21, Y+7	; 0x07
    1484:	41 30       	cpi	r20, 0x01	; 1
    1486:	51 05       	cpc	r21, r1
    1488:	59 f1       	breq	.+86     	; 0x14e0 <DIO_enu_GetPinValue+0xa4>
    148a:	8e 81       	ldd	r24, Y+6	; 0x06
    148c:	9f 81       	ldd	r25, Y+7	; 0x07
    148e:	82 30       	cpi	r24, 0x02	; 2
    1490:	91 05       	cpc	r25, r1
    1492:	34 f4       	brge	.+12     	; 0x14a0 <DIO_enu_GetPinValue+0x64>
    1494:	2e 81       	ldd	r18, Y+6	; 0x06
    1496:	3f 81       	ldd	r19, Y+7	; 0x07
    1498:	21 15       	cp	r18, r1
    149a:	31 05       	cpc	r19, r1
    149c:	69 f0       	breq	.+26     	; 0x14b8 <DIO_enu_GetPinValue+0x7c>
    149e:	5b c0       	rjmp	.+182    	; 0x1556 <DIO_enu_GetPinValue+0x11a>
    14a0:	4e 81       	ldd	r20, Y+6	; 0x06
    14a2:	5f 81       	ldd	r21, Y+7	; 0x07
    14a4:	42 30       	cpi	r20, 0x02	; 2
    14a6:	51 05       	cpc	r21, r1
    14a8:	79 f1       	breq	.+94     	; 0x1508 <DIO_enu_GetPinValue+0xcc>
    14aa:	8e 81       	ldd	r24, Y+6	; 0x06
    14ac:	9f 81       	ldd	r25, Y+7	; 0x07
    14ae:	83 30       	cpi	r24, 0x03	; 3
    14b0:	91 05       	cpc	r25, r1
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <DIO_enu_GetPinValue+0x7a>
    14b4:	3d c0       	rjmp	.+122    	; 0x1530 <DIO_enu_GetPinValue+0xf4>
    14b6:	4f c0       	rjmp	.+158    	; 0x1556 <DIO_enu_GetPinValue+0x11a>
            {
                case DIO_PIN_GROUP_A:
                (*Copy_pu8_PinValue) = (DIO_PINA >> Copy_u8_PinNumber) & 1;
    14b8:	e9 e3       	ldi	r30, 0x39	; 57
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	88 2f       	mov	r24, r24
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	a9 01       	movw	r20, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <DIO_enu_GetPinValue+0x94>
    14cc:	55 95       	asr	r21
    14ce:	47 95       	ror	r20
    14d0:	8a 95       	dec	r24
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <DIO_enu_GetPinValue+0x90>
    14d4:	ca 01       	movw	r24, r20
    14d6:	81 70       	andi	r24, 0x01	; 1
    14d8:	ec 81       	ldd	r30, Y+4	; 0x04
    14da:	fd 81       	ldd	r31, Y+5	; 0x05
    14dc:	80 83       	st	Z, r24
    14de:	3b c0       	rjmp	.+118    	; 0x1556 <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_B:
                (*Copy_pu8_PinValue) = (DIO_PINB >> Copy_u8_PinNumber) & 1;
    14e0:	e6 e3       	ldi	r30, 0x36	; 54
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	88 2f       	mov	r24, r24
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	a9 01       	movw	r20, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <DIO_enu_GetPinValue+0xbc>
    14f4:	55 95       	asr	r21
    14f6:	47 95       	ror	r20
    14f8:	8a 95       	dec	r24
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <DIO_enu_GetPinValue+0xb8>
    14fc:	ca 01       	movw	r24, r20
    14fe:	81 70       	andi	r24, 0x01	; 1
    1500:	ec 81       	ldd	r30, Y+4	; 0x04
    1502:	fd 81       	ldd	r31, Y+5	; 0x05
    1504:	80 83       	st	Z, r24
    1506:	27 c0       	rjmp	.+78     	; 0x1556 <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_C:
                (*Copy_pu8_PinValue) = (DIO_PINC >> Copy_u8_PinNumber) & 1;
    1508:	e3 e3       	ldi	r30, 0x33	; 51
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	88 2f       	mov	r24, r24
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	a9 01       	movw	r20, r18
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <DIO_enu_GetPinValue+0xe4>
    151c:	55 95       	asr	r21
    151e:	47 95       	ror	r20
    1520:	8a 95       	dec	r24
    1522:	e2 f7       	brpl	.-8      	; 0x151c <DIO_enu_GetPinValue+0xe0>
    1524:	ca 01       	movw	r24, r20
    1526:	81 70       	andi	r24, 0x01	; 1
    1528:	ec 81       	ldd	r30, Y+4	; 0x04
    152a:	fd 81       	ldd	r31, Y+5	; 0x05
    152c:	80 83       	st	Z, r24
    152e:	13 c0       	rjmp	.+38     	; 0x1556 <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_D:
                (*Copy_pu8_PinValue) = (DIO_PIND >> Copy_u8_PinNumber) & 1;
    1530:	e0 e3       	ldi	r30, 0x30	; 48
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	88 2f       	mov	r24, r24
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	a9 01       	movw	r20, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <DIO_enu_GetPinValue+0x10c>
    1544:	55 95       	asr	r21
    1546:	47 95       	ror	r20
    1548:	8a 95       	dec	r24
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <DIO_enu_GetPinValue+0x108>
    154c:	ca 01       	movw	r24, r20
    154e:	81 70       	andi	r24, 0x01	; 1
    1550:	ec 81       	ldd	r30, Y+4	; 0x04
    1552:	fd 81       	ldd	r31, Y+5	; 0x05
    1554:	80 83       	st	Z, r24

                default:
                break;
            }

            Local_u8_ErrorFlag =ES_OK;
    1556:	19 82       	std	Y+1, r1	; 0x01
    1558:	05 c0       	rjmp	.+10     	; 0x1564 <DIO_enu_GetPinValue+0x128>


        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    155a:	82 e0       	ldi	r24, 0x02	; 2
    155c:	89 83       	std	Y+1, r24	; 0x01
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <DIO_enu_GetPinValue+0x128>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    1560:	83 e0       	ldi	r24, 0x03	; 3
    1562:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    1564:	89 81       	ldd	r24, Y+1	; 0x01
}
    1566:	27 96       	adiw	r28, 0x07	; 7
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	de bf       	out	0x3e, r29	; 62
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	cd bf       	out	0x3d, r28	; 61
    1572:	cf 91       	pop	r28
    1574:	df 91       	pop	r29
    1576:	08 95       	ret

00001578 <ADC_enu_Initialization>:


//APIs implementation

extern ErrorState_t ADC_enu_Initialization(void)
{
    1578:	df 93       	push	r29
    157a:	cf 93       	push	r28
    157c:	0f 92       	push	r0
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	89 83       	std	Y+1, r24	; 0x01

    //Handling voltage reference source:
    #if ADC_V_REFERENCE_SOURCE ==  ADC_AREF
        //Bits contain 00
        ADMUX &= ~(3 << ADMUX_REFS0 );
    1586:	a7 e2       	ldi	r26, 0x27	; 39
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e7 e2       	ldi	r30, 0x27	; 39
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	8f 73       	andi	r24, 0x3F	; 63
    1592:	8c 93       	st	X, r24


    //Handling Data adjustment direction
    #if  ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED
        //Setting ADLAR bit
        ADMUX |= ( 1 << ADMUX_ADLAR);
    1594:	a7 e2       	ldi	r26, 0x27	; 39
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e7 e2       	ldi	r30, 0x27	; 39
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	80 62       	ori	r24, 0x20	; 32
    15a0:	8c 93       	st	X, r24
    #endif

    //Handling Trigger Mode 
    #if ADC_TRIGGER_SOURCE == ADC_SINGLE_CONVERSION
        //Clearing ADATE bit
        ADCSRA &= ~( 1 << ADCSRA_ADATE);
    15a2:	a6 e2       	ldi	r26, 0x26	; 38
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e6 e2       	ldi	r30, 0x26	; 38
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	8f 7d       	andi	r24, 0xDF	; 223
    15ae:	8c 93       	st	X, r24

        
        SFIOR &= ~(7 >> SFIOR_ADTS0); //BITS CONTAIN 000
    15b0:	a0 e5       	ldi	r26, 0x50	; 80
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e0 e5       	ldi	r30, 0x50	; 80
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	8c 93       	st	X, r24
    #endif


    //Handling Interrupt Event Status (PIE)
    #if ADC_INT_EVENT_STATUS == ADC_INT_ENABLE
        ADCSRA |= ( 1 << ADCSRA_ADIE); //Bit contains 1 
    15bc:	a6 e2       	ldi	r26, 0x26	; 38
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e6 e2       	ldi	r30, 0x26	; 38
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	88 60       	ori	r24, 0x08	; 8
    15c8:	8c 93       	st	X, r24
        #error "ADC_INT_EVENT_STATUS is invalid "
    
    #endif

    //Handling ADC clock speed
    ADCSRA &= ~ (7 << ADCSRA_ADPS0);
    15ca:	a6 e2       	ldi	r26, 0x26	; 38
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e6 e2       	ldi	r30, 0x26	; 38
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	88 7f       	andi	r24, 0xF8	; 248
    15d6:	8c 93       	st	X, r24

    #elif ADC_PS_FACTOR == ADC_PS_32
        ADCSRA |= (ADC_PS_32 << ADCSRA_ADPS0); //Bits contain 101

    #elif ADC_PS_FACTOR == ADC_PS_64
        ADCSRA |= (ADC_PS_64 << ADCSRA_ADPS0); //Bits contain 011
    15d8:	a6 e2       	ldi	r26, 0x26	; 38
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e6 e2       	ldi	r30, 0x26	; 38
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	86 60       	ori	r24, 0x06	; 6
    15e4:	8c 93       	st	X, r24
        //Code



    // /Powering ADC
    ADCSRA |= (1 << ADCSRA_ADEN );
    15e6:	a6 e2       	ldi	r26, 0x26	; 38
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e6 e2       	ldi	r30, 0x26	; 38
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	80 68       	ori	r24, 0x80	; 128
    15f2:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    15f4:	19 82       	std	Y+1, r1	; 0x01
    return Local_u8_ErrorFlag; 
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    15f8:	0f 90       	pop	r0
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <ADC_enu_SetDataDirection>:

extern ErrorState_t ADC_enu_SetDataDirection(u8 Copy_u8_DataDirection)
{
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	00 d0       	rcall	.+0      	; 0x1606 <ADC_enu_SetDataDirection+0x6>
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_u8_DataDirection == ADC_LEFT_ADJUSTED)
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	81 30       	cpi	r24, 0x01	; 1
    1614:	41 f4       	brne	.+16     	; 0x1626 <ADC_enu_SetDataDirection+0x26>
    {
        //Setting ADLAR bit
        ADMUX |= ( 1 << ADMUX_ADLAR);
    1616:	a7 e2       	ldi	r26, 0x27	; 39
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e7 e2       	ldi	r30, 0x27	; 39
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	80 62       	ori	r24, 0x20	; 32
    1622:	8c 93       	st	X, r24
    1624:	0d c0       	rjmp	.+26     	; 0x1640 <ADC_enu_SetDataDirection+0x40>

    }
    else if (Copy_u8_DataDirection == ADC_RIGHT_ADJUSTED)
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	88 23       	and	r24, r24
    162a:	41 f4       	brne	.+16     	; 0x163c <ADC_enu_SetDataDirection+0x3c>
    {
        //Clearing ADLAR bit
        ADMUX &= ~( 1 << ADMUX_ADLAR);
    162c:	a7 e2       	ldi	r26, 0x27	; 39
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	e7 e2       	ldi	r30, 0x27	; 39
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	8f 7d       	andi	r24, 0xDF	; 223
    1638:	8c 93       	st	X, r24
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <ADC_enu_SetDataDirection+0x40>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    163c:	82 e0       	ldi	r24, 0x02	; 2
    163e:	89 83       	std	Y+1, r24	; 0x01
    }
    

    return Local_u8_ErrorFlag;
    1640:	89 81       	ldd	r24, Y+1	; 0x01
}
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	cf 91       	pop	r28
    1648:	df 91       	pop	r29
    164a:	08 95       	ret

0000164c <ADC_enu_SetTriggerringSource>:

extern ErrorState_t ADC_enu_SetTriggerringSource(u8 Copy_u8_TriggeringSource)
{
    164c:	df 93       	push	r29
    164e:	cf 93       	push	r28
    1650:	00 d0       	rcall	.+0      	; 0x1652 <ADC_enu_SetTriggerringSource+0x6>
    1652:	00 d0       	rcall	.+0      	; 0x1654 <ADC_enu_SetTriggerringSource+0x8>
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
    1658:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	89 83       	std	Y+1, r24	; 0x01
    


    switch (Copy_u8_TriggeringSource)
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	3c 83       	std	Y+4, r19	; 0x04
    1666:	2b 83       	std	Y+3, r18	; 0x03
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	9c 81       	ldd	r25, Y+4	; 0x04
    166c:	84 30       	cpi	r24, 0x04	; 4
    166e:	91 05       	cpc	r25, r1
    1670:	09 f4       	brne	.+2      	; 0x1674 <ADC_enu_SetTriggerringSource+0x28>
    1672:	81 c0       	rjmp	.+258    	; 0x1776 <ADC_enu_SetTriggerringSource+0x12a>
    1674:	2b 81       	ldd	r18, Y+3	; 0x03
    1676:	3c 81       	ldd	r19, Y+4	; 0x04
    1678:	25 30       	cpi	r18, 0x05	; 5
    167a:	31 05       	cpc	r19, r1
    167c:	ec f4       	brge	.+58     	; 0x16b8 <ADC_enu_SetTriggerringSource+0x6c>
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	9c 81       	ldd	r25, Y+4	; 0x04
    1682:	81 30       	cpi	r24, 0x01	; 1
    1684:	91 05       	cpc	r25, r1
    1686:	09 f4       	brne	.+2      	; 0x168a <ADC_enu_SetTriggerringSource+0x3e>
    1688:	47 c0       	rjmp	.+142    	; 0x1718 <ADC_enu_SetTriggerringSource+0xcc>
    168a:	2b 81       	ldd	r18, Y+3	; 0x03
    168c:	3c 81       	ldd	r19, Y+4	; 0x04
    168e:	22 30       	cpi	r18, 0x02	; 2
    1690:	31 05       	cpc	r19, r1
    1692:	2c f4       	brge	.+10     	; 0x169e <ADC_enu_SetTriggerringSource+0x52>
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	9c 81       	ldd	r25, Y+4	; 0x04
    1698:	00 97       	sbiw	r24, 0x00	; 0
    169a:	79 f1       	breq	.+94     	; 0x16fa <ADC_enu_SetTriggerringSource+0xae>
    169c:	aa c0       	rjmp	.+340    	; 0x17f2 <ADC_enu_SetTriggerringSource+0x1a6>
    169e:	2b 81       	ldd	r18, Y+3	; 0x03
    16a0:	3c 81       	ldd	r19, Y+4	; 0x04
    16a2:	22 30       	cpi	r18, 0x02	; 2
    16a4:	31 05       	cpc	r19, r1
    16a6:	09 f4       	brne	.+2      	; 0x16aa <ADC_enu_SetTriggerringSource+0x5e>
    16a8:	47 c0       	rjmp	.+142    	; 0x1738 <ADC_enu_SetTriggerringSource+0xec>
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	9c 81       	ldd	r25, Y+4	; 0x04
    16ae:	83 30       	cpi	r24, 0x03	; 3
    16b0:	91 05       	cpc	r25, r1
    16b2:	09 f4       	brne	.+2      	; 0x16b6 <ADC_enu_SetTriggerringSource+0x6a>
    16b4:	50 c0       	rjmp	.+160    	; 0x1756 <ADC_enu_SetTriggerringSource+0x10a>
    16b6:	9d c0       	rjmp	.+314    	; 0x17f2 <ADC_enu_SetTriggerringSource+0x1a6>
    16b8:	2b 81       	ldd	r18, Y+3	; 0x03
    16ba:	3c 81       	ldd	r19, Y+4	; 0x04
    16bc:	26 30       	cpi	r18, 0x06	; 6
    16be:	31 05       	cpc	r19, r1
    16c0:	09 f4       	brne	.+2      	; 0x16c4 <ADC_enu_SetTriggerringSource+0x78>
    16c2:	78 c0       	rjmp	.+240    	; 0x17b4 <ADC_enu_SetTriggerringSource+0x168>
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	9c 81       	ldd	r25, Y+4	; 0x04
    16c8:	86 30       	cpi	r24, 0x06	; 6
    16ca:	91 05       	cpc	r25, r1
    16cc:	0c f4       	brge	.+2      	; 0x16d0 <ADC_enu_SetTriggerringSource+0x84>
    16ce:	62 c0       	rjmp	.+196    	; 0x1794 <ADC_enu_SetTriggerringSource+0x148>
    16d0:	2b 81       	ldd	r18, Y+3	; 0x03
    16d2:	3c 81       	ldd	r19, Y+4	; 0x04
    16d4:	27 30       	cpi	r18, 0x07	; 7
    16d6:	31 05       	cpc	r19, r1
    16d8:	09 f4       	brne	.+2      	; 0x16dc <ADC_enu_SetTriggerringSource+0x90>
    16da:	7b c0       	rjmp	.+246    	; 0x17d2 <ADC_enu_SetTriggerringSource+0x186>
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	9c 81       	ldd	r25, Y+4	; 0x04
    16e0:	88 30       	cpi	r24, 0x08	; 8
    16e2:	91 05       	cpc	r25, r1
    16e4:	09 f0       	breq	.+2      	; 0x16e8 <ADC_enu_SetTriggerringSource+0x9c>
    16e6:	85 c0       	rjmp	.+266    	; 0x17f2 <ADC_enu_SetTriggerringSource+0x1a6>
    {
        case ADC_SINGLE_CONVERSION:
        //Clearing ADATE bit
        ADCSRA &= ~( 1 << ADCSRA_ADATE);
    16e8:	a6 e2       	ldi	r26, 0x26	; 38
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	e6 e2       	ldi	r30, 0x26	; 38
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	8f 7d       	andi	r24, 0xDF	; 223
    16f4:	8c 93       	st	X, r24
        Local_u8_ErrorFlag = ES_OK;
    16f6:	19 82       	std	Y+1, r1	; 0x01
    16f8:	7e c0       	rjmp	.+252    	; 0x17f6 <ADC_enu_SetTriggerringSource+0x1aa>
        break;

        case ADC_FREE_RUNNING : 
        //Setting ADATE bit
        ADCSRA |=  ( 1 << ADCSRA_ADATE);
    16fa:	a6 e2       	ldi	r26, 0x26	; 38
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e6 e2       	ldi	r30, 0x26	; 38
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	80 62       	ori	r24, 0x20	; 32
    1706:	8c 93       	st	X, r24

        SFIOR |= (ADC_FREE_RUNNING << SFIOR_ADTS0); //Bits contain 000
    1708:	a0 e5       	ldi	r26, 0x50	; 80
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	e0 e5       	ldi	r30, 0x50	; 80
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	8c 93       	st	X, r24
        Local_u8_ErrorFlag = ES_OK;
    1714:	19 82       	std	Y+1, r1	; 0x01
    1716:	6f c0       	rjmp	.+222    	; 0x17f6 <ADC_enu_SetTriggerringSource+0x1aa>
        break;
        
        case ADC_ANALOG_COMPARATOR:
        //Setting ADATE bit
        ADCSRA |=  ( 1 << ADCSRA_ADATE);
    1718:	a6 e2       	ldi	r26, 0x26	; 38
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e6 e2       	ldi	r30, 0x26	; 38
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	80 62       	ori	r24, 0x20	; 32
    1724:	8c 93       	st	X, r24

        SFIOR |= (ADC_ANALOG_COMPARATOR << SFIOR_ADTS0); //Bits contain 001
    1726:	a0 e5       	ldi	r26, 0x50	; 80
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e0 e5       	ldi	r30, 0x50	; 80
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	80 68       	ori	r24, 0x80	; 128
    1732:	8c 93       	st	X, r24
        Local_u8_ErrorFlag = ES_OK;
    1734:	19 82       	std	Y+1, r1	; 0x01
    1736:	5f c0       	rjmp	.+190    	; 0x17f6 <ADC_enu_SetTriggerringSource+0x1aa>
        break;
        case ADC_EXTERNL_INT0: 
        //Setting ADATE bit
        ADCSRA |=  ( 1 << ADCSRA_ADATE);
    1738:	a6 e2       	ldi	r26, 0x26	; 38
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e6 e2       	ldi	r30, 0x26	; 38
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	80 62       	ori	r24, 0x20	; 32
    1744:	8c 93       	st	X, r24

        SFIOR |= (ADC_EXTERNL_INT0 << SFIOR_ADTS0); //Bits contain 010
    1746:	a0 e5       	ldi	r26, 0x50	; 80
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	e0 e5       	ldi	r30, 0x50	; 80
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	8c 93       	st	X, r24
        Local_u8_ErrorFlag = ES_OK;
    1752:	19 82       	std	Y+1, r1	; 0x01
    1754:	50 c0       	rjmp	.+160    	; 0x17f6 <ADC_enu_SetTriggerringSource+0x1aa>
        break;

        case ADC_TIMER0_COMPARE_MATCH: 
        //Setting ADATE bit
        ADCSRA |=  ( 1 << ADCSRA_ADATE);
    1756:	a6 e2       	ldi	r26, 0x26	; 38
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e6 e2       	ldi	r30, 0x26	; 38
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	80 62       	ori	r24, 0x20	; 32
    1762:	8c 93       	st	X, r24

        SFIOR |= (ADC_TIMER0_COMPARE_MATCH << SFIOR_ADTS0); //Bits contain 011
    1764:	a0 e5       	ldi	r26, 0x50	; 80
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	e0 e5       	ldi	r30, 0x50	; 80
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	80 68       	ori	r24, 0x80	; 128
    1770:	8c 93       	st	X, r24
        Local_u8_ErrorFlag = ES_OK;
    1772:	19 82       	std	Y+1, r1	; 0x01
    1774:	40 c0       	rjmp	.+128    	; 0x17f6 <ADC_enu_SetTriggerringSource+0x1aa>
        break;

        case ADC_TIMER0_OVERFLOW: 
        //Setting ADATE bit
        ADCSRA |=  ( 1 << ADCSRA_ADATE);
    1776:	a6 e2       	ldi	r26, 0x26	; 38
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e6 e2       	ldi	r30, 0x26	; 38
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	80 62       	ori	r24, 0x20	; 32
    1782:	8c 93       	st	X, r24

        SFIOR |= (ADC_TIMER0_OVERFLOW << SFIOR_ADTS0); //Bits contain 100
    1784:	a0 e5       	ldi	r26, 0x50	; 80
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e0 e5       	ldi	r30, 0x50	; 80
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	8c 93       	st	X, r24
        Local_u8_ErrorFlag = ES_OK;
    1790:	19 82       	std	Y+1, r1	; 0x01
    1792:	31 c0       	rjmp	.+98     	; 0x17f6 <ADC_enu_SetTriggerringSource+0x1aa>
        break;

        case ADC_TIMER_COMPARE_MATCH_B: 
        //Setting ADATE bit
        ADCSRA |=  ( 1 << ADCSRA_ADATE);
    1794:	a6 e2       	ldi	r26, 0x26	; 38
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e6 e2       	ldi	r30, 0x26	; 38
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	80 62       	ori	r24, 0x20	; 32
    17a0:	8c 93       	st	X, r24

        SFIOR |= (ADC_TIMER_COMPARE_MATCH_B << SFIOR_ADTS0); //Bits contain 101
    17a2:	a0 e5       	ldi	r26, 0x50	; 80
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e0 e5       	ldi	r30, 0x50	; 80
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	80 68       	ori	r24, 0x80	; 128
    17ae:	8c 93       	st	X, r24
        Local_u8_ErrorFlag = ES_OK;
    17b0:	19 82       	std	Y+1, r1	; 0x01
    17b2:	21 c0       	rjmp	.+66     	; 0x17f6 <ADC_enu_SetTriggerringSource+0x1aa>
        break;

        case ADC_TIMER1_OVERFLOW: 
        //Setting ADATE bit
        ADCSRA |=  ( 1 << ADCSRA_ADATE);
    17b4:	a6 e2       	ldi	r26, 0x26	; 38
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e6 e2       	ldi	r30, 0x26	; 38
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	80 62       	ori	r24, 0x20	; 32
    17c0:	8c 93       	st	X, r24

        SFIOR |= (ADC_TIMER1_OVERFLOW << SFIOR_ADTS0); //Bits contain 110
    17c2:	a0 e5       	ldi	r26, 0x50	; 80
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	e0 e5       	ldi	r30, 0x50	; 80
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	8c 93       	st	X, r24
        Local_u8_ErrorFlag = ES_OK;
    17ce:	19 82       	std	Y+1, r1	; 0x01
    17d0:	12 c0       	rjmp	.+36     	; 0x17f6 <ADC_enu_SetTriggerringSource+0x1aa>
        break;

        case ADC_TIMER1_CAPTURE_EVENT: 
        //Setting ADATE bit
        ADCSRA |=  ( 1 << ADCSRA_ADATE);
    17d2:	a6 e2       	ldi	r26, 0x26	; 38
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e6 e2       	ldi	r30, 0x26	; 38
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	80 62       	ori	r24, 0x20	; 32
    17de:	8c 93       	st	X, r24

        SFIOR |= (ADC_TIMER1_CAPTURE_EVENT << SFIOR_ADTS0); //Bits contain 111
    17e0:	a0 e5       	ldi	r26, 0x50	; 80
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	e0 e5       	ldi	r30, 0x50	; 80
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	80 68       	ori	r24, 0x80	; 128
    17ec:	8c 93       	st	X, r24
        Local_u8_ErrorFlag = ES_OK;
    17ee:	19 82       	std	Y+1, r1	; 0x01
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <ADC_enu_SetTriggerringSource+0x1aa>
        break;



        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    17f2:	82 e0       	ldi	r24, 0x02	; 2
    17f4:	89 83       	std	Y+1, r24	; 0x01
    }

        
        

    return Local_u8_ErrorFlag;
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	08 95       	ret

00001806 <ADC_enu_SetADIF>:

extern ErrorState_t ADC_enu_SetADIF(void)
{
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	0f 92       	push	r0
    180c:	cd b7       	in	r28, 0x3d	; 61
    180e:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA |= ( 1 << ADCSRA_ADIF); //Bit contains 1 
    1814:	a6 e2       	ldi	r26, 0x26	; 38
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	e6 e2       	ldi	r30, 0x26	; 38
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	80 61       	ori	r24, 0x10	; 16
    1820:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    1822:	19 82       	std	Y+1, r1	; 0x01
    
    return Local_u8_ErrorFlag;
    1824:	89 81       	ldd	r24, Y+1	; 0x01
}
    1826:	0f 90       	pop	r0
    1828:	cf 91       	pop	r28
    182a:	df 91       	pop	r29
    182c:	08 95       	ret

0000182e <ADC_enu_ClearADIF>:

extern ErrorState_t ADC_enu_ClearADIF(void)
{
    182e:	df 93       	push	r29
    1830:	cf 93       	push	r28
    1832:	0f 92       	push	r0
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA &= ~( 1 << ADCSRA_ADIF); //Bit contains 0 
    183c:	a6 e2       	ldi	r26, 0x26	; 38
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	e6 e2       	ldi	r30, 0x26	; 38
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	8f 7e       	andi	r24, 0xEF	; 239
    1848:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    184a:	19 82       	std	Y+1, r1	; 0x01
    

    return Local_u8_ErrorFlag;
    184c:	89 81       	ldd	r24, Y+1	; 0x01
}
    184e:	0f 90       	pop	r0
    1850:	cf 91       	pop	r28
    1852:	df 91       	pop	r29
    1854:	08 95       	ret

00001856 <ADC_enu_SetADIE>:

extern ErrorState_t ADC_enu_SetADIE(void)
{
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	0f 92       	push	r0
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA |= ( 1 << ADCSRA_ADIE); //Bit contains 1 
    1864:	a6 e2       	ldi	r26, 0x26	; 38
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	e6 e2       	ldi	r30, 0x26	; 38
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	88 60       	ori	r24, 0x08	; 8
    1870:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    1872:	19 82       	std	Y+1, r1	; 0x01
    
    return Local_u8_ErrorFlag;
    1874:	89 81       	ldd	r24, Y+1	; 0x01
}
    1876:	0f 90       	pop	r0
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <ADC_enu_ClearADIE>:

extern ErrorState_t ADC_enu_ClearADIE(void)
{
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	0f 92       	push	r0
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA &= ~( 1 << ADCSRA_ADIE); //Bit contains 0 
    188c:	a6 e2       	ldi	r26, 0x26	; 38
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	e6 e2       	ldi	r30, 0x26	; 38
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	87 7f       	andi	r24, 0xF7	; 247
    1898:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    189a:	19 82       	std	Y+1, r1	; 0x01
    

    return Local_u8_ErrorFlag;
    189c:	89 81       	ldd	r24, Y+1	; 0x01
}
    189e:	0f 90       	pop	r0
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

000018a6 <ADC_enu_ReadADIF>:

extern ErrorState_t ADC_enu_ReadADIF(u8* Copy_pu8_Result)
{
    18a6:	df 93       	push	r29
    18a8:	cf 93       	push	r28
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <ADC_enu_ReadADIF+0x6>
    18ac:	0f 92       	push	r0
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	9b 83       	std	Y+3, r25	; 0x03
    18b4:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_pu8_Result)
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	9b 81       	ldd	r25, Y+3	; 0x03
    18be:	00 97       	sbiw	r24, 0x00	; 0
    18c0:	59 f0       	breq	.+22     	; 0x18d8 <ADC_enu_ReadADIF+0x32>
    {
        
        *Copy_pu8_Result = 1 & (ADCSRA >> ADCSRA_ADIF);
    18c2:	e6 e2       	ldi	r30, 0x26	; 38
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	82 95       	swap	r24
    18ca:	8f 70       	andi	r24, 0x0F	; 15
    18cc:	81 70       	andi	r24, 0x01	; 1
    18ce:	ea 81       	ldd	r30, Y+2	; 0x02
    18d0:	fb 81       	ldd	r31, Y+3	; 0x03
    18d2:	80 83       	st	Z, r24

        Local_u8_ErrorFlag = ES_OK;
    18d4:	19 82       	std	Y+1, r1	; 0x01
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <ADC_enu_ReadADIF+0x36>
    }   
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    18d8:	83 e0       	ldi	r24, 0x03	; 3
    18da:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	08 95       	ret

000018ea <ADC_enu_ReadADSC>:

extern  ErrorState_t ADC_enu_ReadADSC(u8* Copy_pu8_Result)
{
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <ADC_enu_ReadADSC+0x6>
    18f0:	0f 92       	push	r0
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
    18f6:	9b 83       	std	Y+3, r25	; 0x03
    18f8:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_Result)
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	9b 81       	ldd	r25, Y+3	; 0x03
    1902:	00 97       	sbiw	r24, 0x00	; 0
    1904:	69 f0       	breq	.+26     	; 0x1920 <ADC_enu_ReadADSC+0x36>
    {
        
        *Copy_pu8_Result = 1 & (ADCSRA >> ADCSRA_ADSC);
    1906:	e6 e2       	ldi	r30, 0x26	; 38
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	82 95       	swap	r24
    190e:	86 95       	lsr	r24
    1910:	86 95       	lsr	r24
    1912:	83 70       	andi	r24, 0x03	; 3
    1914:	81 70       	andi	r24, 0x01	; 1
    1916:	ea 81       	ldd	r30, Y+2	; 0x02
    1918:	fb 81       	ldd	r31, Y+3	; 0x03
    191a:	80 83       	st	Z, r24

        Local_u8_ErrorFlag = ES_OK;
    191c:	19 82       	std	Y+1, r1	; 0x01
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <ADC_enu_ReadADSC+0x3a>
    }   
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    1920:	83 e0       	ldi	r24, 0x03	; 3
    1922:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag; 
    1924:	89 81       	ldd	r24, Y+1	; 0x01
}
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	08 95       	ret

00001932 <ADC_enu_ChangePrescalerFactor>:

extern ErrorState_t ADC_enu_ChangePrescalerFactor(u8 Copy_u8_DivisonFactor)
{
    1932:	df 93       	push	r29
    1934:	cf 93       	push	r28
    1936:	00 d0       	rcall	.+0      	; 0x1938 <ADC_enu_ChangePrescalerFactor+0x6>
    1938:	00 d0       	rcall	.+0      	; 0x193a <ADC_enu_ChangePrescalerFactor+0x8>
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
    193e:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_DivisonFactor)
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	3c 83       	std	Y+4, r19	; 0x04
    194c:	2b 83       	std	Y+3, r18	; 0x03
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	9c 81       	ldd	r25, Y+4	; 0x04
    1952:	84 30       	cpi	r24, 0x04	; 4
    1954:	91 05       	cpc	r25, r1
    1956:	e9 f1       	breq	.+122    	; 0x19d2 <ADC_enu_ChangePrescalerFactor+0xa0>
    1958:	2b 81       	ldd	r18, Y+3	; 0x03
    195a:	3c 81       	ldd	r19, Y+4	; 0x04
    195c:	25 30       	cpi	r18, 0x05	; 5
    195e:	31 05       	cpc	r19, r1
    1960:	84 f4       	brge	.+32     	; 0x1982 <ADC_enu_ChangePrescalerFactor+0x50>
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	9c 81       	ldd	r25, Y+4	; 0x04
    1966:	82 30       	cpi	r24, 0x02	; 2
    1968:	91 05       	cpc	r25, r1
    196a:	19 f1       	breq	.+70     	; 0x19b2 <ADC_enu_ChangePrescalerFactor+0x80>
    196c:	2b 81       	ldd	r18, Y+3	; 0x03
    196e:	3c 81       	ldd	r19, Y+4	; 0x04
    1970:	23 30       	cpi	r18, 0x03	; 3
    1972:	31 05       	cpc	r19, r1
    1974:	34 f5       	brge	.+76     	; 0x19c2 <ADC_enu_ChangePrescalerFactor+0x90>
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	9c 81       	ldd	r25, Y+4	; 0x04
    197a:	81 30       	cpi	r24, 0x01	; 1
    197c:	91 05       	cpc	r25, r1
    197e:	89 f0       	breq	.+34     	; 0x19a2 <ADC_enu_ChangePrescalerFactor+0x70>
    1980:	48 c0       	rjmp	.+144    	; 0x1a12 <ADC_enu_ChangePrescalerFactor+0xe0>
    1982:	2b 81       	ldd	r18, Y+3	; 0x03
    1984:	3c 81       	ldd	r19, Y+4	; 0x04
    1986:	26 30       	cpi	r18, 0x06	; 6
    1988:	31 05       	cpc	r19, r1
    198a:	99 f1       	breq	.+102    	; 0x19f2 <ADC_enu_ChangePrescalerFactor+0xc0>
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	9c 81       	ldd	r25, Y+4	; 0x04
    1990:	86 30       	cpi	r24, 0x06	; 6
    1992:	91 05       	cpc	r25, r1
    1994:	34 f1       	brlt	.+76     	; 0x19e2 <ADC_enu_ChangePrescalerFactor+0xb0>
    1996:	2b 81       	ldd	r18, Y+3	; 0x03
    1998:	3c 81       	ldd	r19, Y+4	; 0x04
    199a:	27 30       	cpi	r18, 0x07	; 7
    199c:	31 05       	cpc	r19, r1
    199e:	89 f1       	breq	.+98     	; 0x1a02 <ADC_enu_ChangePrescalerFactor+0xd0>
    19a0:	38 c0       	rjmp	.+112    	; 0x1a12 <ADC_enu_ChangePrescalerFactor+0xe0>
    {
        case ADC_PS_2:
        ADCSRA |= (ADC_PS_2 << ADCSRA_ADPS0); //Bits contain 001
    19a2:	a6 e2       	ldi	r26, 0x26	; 38
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e6 e2       	ldi	r30, 0x26	; 38
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	81 60       	ori	r24, 0x01	; 1
    19ae:	8c 93       	st	X, r24
    19b0:	32 c0       	rjmp	.+100    	; 0x1a16 <ADC_enu_ChangePrescalerFactor+0xe4>
        break;
        
        case ADC_PS_4:
        ADCSRA |= (ADC_PS_4 << ADCSRA_ADPS0); //Bits contain 010
    19b2:	a6 e2       	ldi	r26, 0x26	; 38
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e6 e2       	ldi	r30, 0x26	; 38
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	82 60       	ori	r24, 0x02	; 2
    19be:	8c 93       	st	X, r24
    19c0:	2a c0       	rjmp	.+84     	; 0x1a16 <ADC_enu_ChangePrescalerFactor+0xe4>
        break;
        
        case ADC_PS_8:
        ADCSRA |= (ADC_PS_8 << ADCSRA_ADPS0); //Bits contain 011
    19c2:	a6 e2       	ldi	r26, 0x26	; 38
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	e6 e2       	ldi	r30, 0x26	; 38
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	83 60       	ori	r24, 0x03	; 3
    19ce:	8c 93       	st	X, r24
    19d0:	22 c0       	rjmp	.+68     	; 0x1a16 <ADC_enu_ChangePrescalerFactor+0xe4>
        break;
        
        case ADC_PS_16:
        ADCSRA |= (ADC_PS_16 << ADCSRA_ADPS0); //Bits contain 100
    19d2:	a6 e2       	ldi	r26, 0x26	; 38
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e6 e2       	ldi	r30, 0x26	; 38
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	84 60       	ori	r24, 0x04	; 4
    19de:	8c 93       	st	X, r24
    19e0:	1a c0       	rjmp	.+52     	; 0x1a16 <ADC_enu_ChangePrescalerFactor+0xe4>
        break;
        
        case ADC_PS_32:
        ADCSRA |= (ADC_PS_32 << ADCSRA_ADPS0); //Bits contain 101
    19e2:	a6 e2       	ldi	r26, 0x26	; 38
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	e6 e2       	ldi	r30, 0x26	; 38
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	85 60       	ori	r24, 0x05	; 5
    19ee:	8c 93       	st	X, r24
    19f0:	12 c0       	rjmp	.+36     	; 0x1a16 <ADC_enu_ChangePrescalerFactor+0xe4>
        break;
        
        case ADC_PS_64:
        ADCSRA |= (ADC_PS_64 << ADCSRA_ADPS0); //Bits contain 110
    19f2:	a6 e2       	ldi	r26, 0x26	; 38
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e6 e2       	ldi	r30, 0x26	; 38
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	86 60       	ori	r24, 0x06	; 6
    19fe:	8c 93       	st	X, r24
    1a00:	0a c0       	rjmp	.+20     	; 0x1a16 <ADC_enu_ChangePrescalerFactor+0xe4>
        break;

        case ADC_PS_128:
        ADCSRA |= (ADC_PS_128 << ADCSRA_ADPS0); //Bits contain 111
    1a02:	a6 e2       	ldi	r26, 0x26	; 38
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	e6 e2       	ldi	r30, 0x26	; 38
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	87 60       	ori	r24, 0x07	; 7
    1a0e:	8c 93       	st	X, r24
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <ADC_enu_ChangePrescalerFactor+0xe4>
        break;

        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1a12:	82 e0       	ldi	r24, 0x02	; 2
    1a14:	89 83       	std	Y+1, r24	; 0x01
        break;
    };
    return Local_u8_ErrorFlag;
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	cf 91       	pop	r28
    1a22:	df 91       	pop	r29
    1a24:	08 95       	ret

00001a26 <ADC_enu_StartConversion>:

extern ErrorState_t ADC_enu_StartConversion(u8 Copy_u8_Channel, u16* Copy_pu16_Result)
{
    1a26:	df 93       	push	r29
    1a28:	cf 93       	push	r28
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
    1a2e:	27 97       	sbiw	r28, 0x07	; 7
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	f8 94       	cli
    1a34:	de bf       	out	0x3e, r29	; 62
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	cd bf       	out	0x3d, r28	; 61
    1a3a:	8a 83       	std	Y+2, r24	; 0x02
    1a3c:	7c 83       	std	Y+4, r23	; 0x04
    1a3e:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_Error = ES_NOK;
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu16_Result)
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	9c 81       	ldd	r25, Y+4	; 0x04
    1a48:	00 97       	sbiw	r24, 0x00	; 0
    1a4a:	e9 f1       	breq	.+122    	; 0x1ac6 <ADC_enu_StartConversion+0xa0>
    {
        //Selecting input Channel
        switch (Copy_u8_Channel)
    1a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4e:	28 2f       	mov	r18, r24
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	3e 83       	std	Y+6, r19	; 0x06
    1a54:	2d 83       	std	Y+5, r18	; 0x05
    1a56:	8d 81       	ldd	r24, Y+5	; 0x05
    1a58:	9e 81       	ldd	r25, Y+6	; 0x06
    1a5a:	83 30       	cpi	r24, 0x03	; 3
    1a5c:	91 05       	cpc	r25, r1
    1a5e:	51 f1       	breq	.+84     	; 0x1ab4 <ADC_enu_StartConversion+0x8e>
    1a60:	2d 81       	ldd	r18, Y+5	; 0x05
    1a62:	3e 81       	ldd	r19, Y+6	; 0x06
    1a64:	24 30       	cpi	r18, 0x04	; 4
    1a66:	31 05       	cpc	r19, r1
    1a68:	7c f4       	brge	.+30     	; 0x1a88 <ADC_enu_StartConversion+0x62>
    1a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6e:	81 30       	cpi	r24, 0x01	; 1
    1a70:	91 05       	cpc	r25, r1
    1a72:	01 f1       	breq	.+64     	; 0x1ab4 <ADC_enu_StartConversion+0x8e>
    1a74:	2d 81       	ldd	r18, Y+5	; 0x05
    1a76:	3e 81       	ldd	r19, Y+6	; 0x06
    1a78:	22 30       	cpi	r18, 0x02	; 2
    1a7a:	31 05       	cpc	r19, r1
    1a7c:	dc f4       	brge	.+54     	; 0x1ab4 <ADC_enu_StartConversion+0x8e>
    1a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a80:	9e 81       	ldd	r25, Y+6	; 0x06
    1a82:	00 97       	sbiw	r24, 0x00	; 0
    1a84:	b9 f0       	breq	.+46     	; 0x1ab4 <ADC_enu_StartConversion+0x8e>
    1a86:	14 c0       	rjmp	.+40     	; 0x1ab0 <ADC_enu_StartConversion+0x8a>
    1a88:	2d 81       	ldd	r18, Y+5	; 0x05
    1a8a:	3e 81       	ldd	r19, Y+6	; 0x06
    1a8c:	25 30       	cpi	r18, 0x05	; 5
    1a8e:	31 05       	cpc	r19, r1
    1a90:	89 f0       	breq	.+34     	; 0x1ab4 <ADC_enu_StartConversion+0x8e>
    1a92:	8d 81       	ldd	r24, Y+5	; 0x05
    1a94:	9e 81       	ldd	r25, Y+6	; 0x06
    1a96:	85 30       	cpi	r24, 0x05	; 5
    1a98:	91 05       	cpc	r25, r1
    1a9a:	64 f0       	brlt	.+24     	; 0x1ab4 <ADC_enu_StartConversion+0x8e>
    1a9c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a9e:	3e 81       	ldd	r19, Y+6	; 0x06
    1aa0:	26 30       	cpi	r18, 0x06	; 6
    1aa2:	31 05       	cpc	r19, r1
    1aa4:	39 f0       	breq	.+14     	; 0x1ab4 <ADC_enu_StartConversion+0x8e>
    1aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aaa:	87 30       	cpi	r24, 0x07	; 7
    1aac:	91 05       	cpc	r25, r1
    1aae:	11 f0       	breq	.+4      	; 0x1ab4 <ADC_enu_StartConversion+0x8e>
            case ADC_ADC6:
            break;
            case ADC_ADC7:
            break;
            default:
            Local_u8_Error = ES_OUT_OF_RANGE;
    1ab0:	82 e0       	ldi	r24, 0x02	; 2
    1ab2:	89 83       	std	Y+1, r24	; 0x01
            break;
        }

        //Starts a conversion
        ADCSRA |= ( 1 << ADCSRA_ADSC);
    1ab4:	a6 e2       	ldi	r26, 0x26	; 38
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e6 e2       	ldi	r30, 0x26	; 38
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	80 64       	ori	r24, 0x40	; 64
    1ac0:	8c 93       	st	X, r24
        
        Local_u8_Error = ES_OK;
    1ac2:	19 82       	std	Y+1, r1	; 0x01
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <ADC_enu_StartConversion+0xa4>
    }
    else
    {
        Local_u8_Error = ES_NULL_POINTER;
    1ac6:	83 e0       	ldi	r24, 0x03	; 3
    1ac8:	89 83       	std	Y+1, r24	; 0x01
    }
    return;
}
    1aca:	27 96       	adiw	r28, 0x07	; 7
    1acc:	0f b6       	in	r0, 0x3f	; 63
    1ace:	f8 94       	cli
    1ad0:	de bf       	out	0x3e, r29	; 62
    1ad2:	0f be       	out	0x3f, r0	; 63
    1ad4:	cd bf       	out	0x3d, r28	; 61
    1ad6:	cf 91       	pop	r28
    1ad8:	df 91       	pop	r29
    1ada:	08 95       	ret

00001adc <ADC_enu_ReadADCH>:

extern ErrorState_t ADC_enu_ReadADCH(u8* Copy_pu8_Result)
{
    1adc:	df 93       	push	r29
    1ade:	cf 93       	push	r28
    1ae0:	00 d0       	rcall	.+0      	; 0x1ae2 <ADC_enu_ReadADCH+0x6>
    1ae2:	0f 92       	push	r0
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
    1ae8:	9b 83       	std	Y+3, r25	; 0x03
    1aea:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	89 83       	std	Y+1, r24	; 0x01
    
     #warning "This function returns a huge error due to ADC_DATA_ADJUSTMENT current configuration"
    
    #endif

    if(Copy_pu8_Result)
    1af0:	8a 81       	ldd	r24, Y+2	; 0x02
    1af2:	9b 81       	ldd	r25, Y+3	; 0x03
    1af4:	00 97       	sbiw	r24, 0x00	; 0
    1af6:	41 f0       	breq	.+16     	; 0x1b08 <ADC_enu_ReadADCH+0x2c>
    {
        *Copy_pu8_Result = ADCH;
    1af8:	e5 e2       	ldi	r30, 0x25	; 37
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	ea 81       	ldd	r30, Y+2	; 0x02
    1b00:	fb 81       	ldd	r31, Y+3	; 0x03
    1b02:	80 83       	st	Z, r24

        Local_u8_ErrorFlag = ES_OK;
    1b04:	19 82       	std	Y+1, r1	; 0x01
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <ADC_enu_ReadADCH+0x30>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    1b08:	83 e0       	ldi	r24, 0x03	; 3
    1b0a:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag; 
    1b0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	cf 91       	pop	r28
    1b16:	df 91       	pop	r29
    1b18:	08 95       	ret

00001b1a <ADC_enu_ReadADCL>:

extern ErrorState_t ADC_enu_ReadADCL(u8* Copy_pu8_Result)
{
    1b1a:	df 93       	push	r29
    1b1c:	cf 93       	push	r28
    1b1e:	00 d0       	rcall	.+0      	; 0x1b20 <ADC_enu_ReadADCL+0x6>
    1b20:	0f 92       	push	r0
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	9b 83       	std	Y+3, r25	; 0x03
    1b28:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	89 83       	std	Y+1, r24	; 0x01
    
     #warning "This function returns a huge error due to ADC_DATA_ADJUSTMENT current configuration"
    
    #endif

    if(Copy_pu8_Result)
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	9b 81       	ldd	r25, Y+3	; 0x03
    1b32:	00 97       	sbiw	r24, 0x00	; 0
    1b34:	41 f0       	breq	.+16     	; 0x1b46 <ADC_enu_ReadADCL+0x2c>
    {
        *Copy_pu8_Result = ADCL;
    1b36:	e4 e2       	ldi	r30, 0x24	; 36
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	ea 81       	ldd	r30, Y+2	; 0x02
    1b3e:	fb 81       	ldd	r31, Y+3	; 0x03
    1b40:	80 83       	st	Z, r24

        Local_u8_ErrorFlag = ES_OK;
    1b42:	19 82       	std	Y+1, r1	; 0x01
    1b44:	02 c0       	rjmp	.+4      	; 0x1b4a <ADC_enu_ReadADCL+0x30>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    1b46:	83 e0       	ldi	r24, 0x03	; 3
    1b48:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag; 
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	08 95       	ret

00001b58 <Relay_enu_Initialization>:
extern Relay_t Relay_astr_RelayList[];

//APIs implementation

extern ErrorState_t Relay_enu_Initialization(void)
{
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	00 d0       	rcall	.+0      	; 0x1b5e <Relay_enu_Initialization+0x6>
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    1b66:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    1b68:	19 82       	std	Y+1, r1	; 0x01
    1b6a:	31 c0       	rjmp	.+98     	; 0x1bce <Relay_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_PIN_WRITE);
    1b6c:	89 81       	ldd	r24, Y+1	; 0x01
    1b6e:	88 2f       	mov	r24, r24
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	88 0f       	add	r24, r24
    1b74:	99 1f       	adc	r25, r25
    1b76:	fc 01       	movw	r30, r24
    1b78:	ed 5e       	subi	r30, 0xED	; 237
    1b7a:	fd 4f       	sbci	r31, 0xFD	; 253
    1b7c:	20 81       	ld	r18, Z
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
    1b80:	88 2f       	mov	r24, r24
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	88 0f       	add	r24, r24
    1b86:	99 1f       	adc	r25, r25
    1b88:	fc 01       	movw	r30, r24
    1b8a:	ec 5e       	subi	r30, 0xEC	; 236
    1b8c:	fd 4f       	sbci	r31, 0xFD	; 253
    1b8e:	90 81       	ld	r25, Z
    1b90:	82 2f       	mov	r24, r18
    1b92:	69 2f       	mov	r22, r25
    1b94:	41 e0       	ldi	r20, 0x01	; 1
    1b96:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    1b9a:	89 81       	ldd	r24, Y+1	; 0x01
    1b9c:	88 2f       	mov	r24, r24
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	88 0f       	add	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	ed 5e       	subi	r30, 0xED	; 237
    1ba8:	fd 4f       	sbci	r31, 0xFD	; 253
    1baa:	20 81       	ld	r18, Z
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
    1bae:	88 2f       	mov	r24, r24
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	88 0f       	add	r24, r24
    1bb4:	99 1f       	adc	r25, r25
    1bb6:	fc 01       	movw	r30, r24
    1bb8:	ec 5e       	subi	r30, 0xEC	; 236
    1bba:	fd 4f       	sbci	r31, 0xFD	; 253
    1bbc:	90 81       	ld	r25, Z
    1bbe:	82 2f       	mov	r24, r18
    1bc0:	69 2f       	mov	r22, r25
    1bc2:	40 e0       	ldi	r20, 0x00	; 0
    1bc4:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    1bc8:	89 81       	ldd	r24, Y+1	; 0x01
    1bca:	8f 5f       	subi	r24, 0xFF	; 255
    1bcc:	89 83       	std	Y+1, r24	; 0x01
    1bce:	90 91 12 02 	lds	r25, 0x0212
    1bd2:	89 81       	ldd	r24, Y+1	; 0x01
    1bd4:	89 17       	cp	r24, r25
    1bd6:	50 f2       	brcs	.-108    	; 0x1b6c <Relay_enu_Initialization+0x14>
        DIO_enu_SetPinDiretion(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_PIN_WRITE);
        DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    }

    //TO be handled later
    Local_u8_ErrorFlag = ES_OK;
    1bd8:	1a 82       	std	Y+2, r1	; 0x02




    return Local_u8_ErrorFlag; 
    1bda:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	cf 91       	pop	r28
    1be2:	df 91       	pop	r29
    1be4:	08 95       	ret

00001be6 <Relay_enu_TuronOnRelay>:

extern ErrorState_t Relay_enu_TuronOnRelay(u8 Copy_u8_RelayNumber)
{
    1be6:	df 93       	push	r29
    1be8:	cf 93       	push	r28
    1bea:	00 d0       	rcall	.+0      	; 0x1bec <Relay_enu_TuronOnRelay+0x6>
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_RelayNumber < Relay_u8_RelayCount)
    1bf6:	90 91 12 02 	lds	r25, 0x0212
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	89 17       	cp	r24, r25
    1bfe:	c8 f4       	brcc	.+50     	; 0x1c32 <Relay_enu_TuronOnRelay+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Group,Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Pin,DIO_HIGH);
    1c00:	8a 81       	ldd	r24, Y+2	; 0x02
    1c02:	88 2f       	mov	r24, r24
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	88 0f       	add	r24, r24
    1c08:	99 1f       	adc	r25, r25
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	ed 5e       	subi	r30, 0xED	; 237
    1c0e:	fd 4f       	sbci	r31, 0xFD	; 253
    1c10:	20 81       	ld	r18, Z
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	88 2f       	mov	r24, r24
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	88 0f       	add	r24, r24
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	ec 5e       	subi	r30, 0xEC	; 236
    1c20:	fd 4f       	sbci	r31, 0xFD	; 253
    1c22:	90 81       	ld	r25, Z
    1c24:	82 2f       	mov	r24, r18
    1c26:	69 2f       	mov	r22, r25
    1c28:	41 e0       	ldi	r20, 0x01	; 1
    1c2a:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
    1c2e:	89 83       	std	Y+1, r24	; 0x01
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <Relay_enu_TuronOnRelay+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1c32:	82 e0       	ldi	r24, 0x02	; 2
    1c34:	89 83       	std	Y+1, r24	; 0x01





    return Local_u8_ErrorFlag; 
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	cf 91       	pop	r28
    1c3e:	df 91       	pop	r29
    1c40:	08 95       	ret

00001c42 <Relay_enu_TuronOffRelay>:

extern ErrorState_t Relay_enu_TuronOffRelay(u8 Copy_u8_RelayNumber)
{
    1c42:	df 93       	push	r29
    1c44:	cf 93       	push	r28
    1c46:	00 d0       	rcall	.+0      	; 0x1c48 <Relay_enu_TuronOffRelay+0x6>
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
    1c4c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_RelayNumber < Relay_u8_RelayCount)
    1c52:	90 91 12 02 	lds	r25, 0x0212
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	89 17       	cp	r24, r25
    1c5a:	c8 f4       	brcc	.+50     	; 0x1c8e <Relay_enu_TuronOffRelay+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Group,Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Pin,DIO_LOW);
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	88 2f       	mov	r24, r24
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	88 0f       	add	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	fc 01       	movw	r30, r24
    1c68:	ed 5e       	subi	r30, 0xED	; 237
    1c6a:	fd 4f       	sbci	r31, 0xFD	; 253
    1c6c:	20 81       	ld	r18, Z
    1c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c70:	88 2f       	mov	r24, r24
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	88 0f       	add	r24, r24
    1c76:	99 1f       	adc	r25, r25
    1c78:	fc 01       	movw	r30, r24
    1c7a:	ec 5e       	subi	r30, 0xEC	; 236
    1c7c:	fd 4f       	sbci	r31, 0xFD	; 253
    1c7e:	90 81       	ld	r25, Z
    1c80:	82 2f       	mov	r24, r18
    1c82:	69 2f       	mov	r22, r25
    1c84:	40 e0       	ldi	r20, 0x00	; 0
    1c86:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
    1c8a:	89 83       	std	Y+1, r24	; 0x01
    1c8c:	02 c0       	rjmp	.+4      	; 0x1c92 <Relay_enu_TuronOffRelay+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1c8e:	82 e0       	ldi	r24, 0x02	; 2
    1c90:	89 83       	std	Y+1, r24	; 0x01
    }



    return Local_u8_ErrorFlag; 
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	08 95       	ret

00001c9e <Relay_enu_TurnOnAllRelays>:

extern ErrorState_t Relay_enu_TurnOnAllRelays(void)
{
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	00 d0       	rcall	.+0      	; 0x1ca4 <Relay_enu_TurnOnAllRelays+0x6>
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    1cac:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    1cae:	19 82       	std	Y+1, r1	; 0x01
    1cb0:	1a c0       	rjmp	.+52     	; 0x1ce6 <Relay_enu_TurnOnAllRelays+0x48>
    {

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_HIGH);
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	88 2f       	mov	r24, r24
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	ed 5e       	subi	r30, 0xED	; 237
    1cc0:	fd 4f       	sbci	r31, 0xFD	; 253
    1cc2:	20 81       	ld	r18, Z
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	88 2f       	mov	r24, r24
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	88 0f       	add	r24, r24
    1ccc:	99 1f       	adc	r25, r25
    1cce:	fc 01       	movw	r30, r24
    1cd0:	ec 5e       	subi	r30, 0xEC	; 236
    1cd2:	fd 4f       	sbci	r31, 0xFD	; 253
    1cd4:	90 81       	ld	r25, Z
    1cd6:	82 2f       	mov	r24, r18
    1cd8:	69 2f       	mov	r22, r25
    1cda:	41 e0       	ldi	r20, 0x01	; 1
    1cdc:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_TurnOnAllRelays(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	8f 5f       	subi	r24, 0xFF	; 255
    1ce4:	89 83       	std	Y+1, r24	; 0x01
    1ce6:	90 91 12 02 	lds	r25, 0x0212
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	89 17       	cp	r24, r25
    1cee:	08 f3       	brcs	.-62     	; 0x1cb2 <Relay_enu_TurnOnAllRelays+0x14>

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_HIGH);
        
    }

    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1cf0:	82 e0       	ldi	r24, 0x02	; 2
    1cf2:	8a 83       	std	Y+2, r24	; 0x02



    return Local_u8_ErrorFlag; 
    1cf4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	cf 91       	pop	r28
    1cfc:	df 91       	pop	r29
    1cfe:	08 95       	ret

00001d00 <Relay_enu_TurnOffAllRelays>:

extern ErrorState_t Relay_enu_TurnOffAllRelays(void)
{
    1d00:	df 93       	push	r29
    1d02:	cf 93       	push	r28
    1d04:	00 d0       	rcall	.+0      	; 0x1d06 <Relay_enu_TurnOffAllRelays+0x6>
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    1d0e:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    1d10:	19 82       	std	Y+1, r1	; 0x01
    1d12:	1a c0       	rjmp	.+52     	; 0x1d48 <Relay_enu_TurnOffAllRelays+0x48>
    {

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	88 2f       	mov	r24, r24
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	88 0f       	add	r24, r24
    1d1c:	99 1f       	adc	r25, r25
    1d1e:	fc 01       	movw	r30, r24
    1d20:	ed 5e       	subi	r30, 0xED	; 237
    1d22:	fd 4f       	sbci	r31, 0xFD	; 253
    1d24:	20 81       	ld	r18, Z
    1d26:	89 81       	ldd	r24, Y+1	; 0x01
    1d28:	88 2f       	mov	r24, r24
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	88 0f       	add	r24, r24
    1d2e:	99 1f       	adc	r25, r25
    1d30:	fc 01       	movw	r30, r24
    1d32:	ec 5e       	subi	r30, 0xEC	; 236
    1d34:	fd 4f       	sbci	r31, 0xFD	; 253
    1d36:	90 81       	ld	r25, Z
    1d38:	82 2f       	mov	r24, r18
    1d3a:	69 2f       	mov	r22, r25
    1d3c:	40 e0       	ldi	r20, 0x00	; 0
    1d3e:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_TurnOffAllRelays(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	8f 5f       	subi	r24, 0xFF	; 255
    1d46:	89 83       	std	Y+1, r24	; 0x01
    1d48:	90 91 12 02 	lds	r25, 0x0212
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	89 17       	cp	r24, r25
    1d50:	08 f3       	brcs	.-62     	; 0x1d14 <Relay_enu_TurnOffAllRelays+0x14>
     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
        
    }


    return Local_u8_ErrorFlag; 
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	08 95       	ret

00001d5e <LED_enu_Initialization>:

extern LED_t LED_astr_LEDsList [];

//APIs' implementations
extern ErrorState_t LED_enu_Initialization(void)
{
    1d5e:	df 93       	push	r29
    1d60:	cf 93       	push	r28
    1d62:	00 d0       	rcall	.+0      	; 0x1d64 <LED_enu_Initialization+0x6>
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	8a 83       	std	Y+2, r24	; 0x02
    
    u8 Local_u8_Counter = 0;
    1d6c:	19 82       	std	Y+1, r1	; 0x01
    
    for (Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++ )
    1d6e:	19 82       	std	Y+1, r1	; 0x01
    1d70:	31 c0       	rjmp	.+98     	; 0x1dd4 <LED_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_PIN_WRITE);
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	88 2f       	mov	r24, r24
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	88 0f       	add	r24, r24
    1d7a:	99 1f       	adc	r25, r25
    1d7c:	fc 01       	movw	r30, r24
    1d7e:	ea 5e       	subi	r30, 0xEA	; 234
    1d80:	fd 4f       	sbci	r31, 0xFD	; 253
    1d82:	20 81       	ld	r18, Z
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	88 2f       	mov	r24, r24
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	88 0f       	add	r24, r24
    1d8c:	99 1f       	adc	r25, r25
    1d8e:	fc 01       	movw	r30, r24
    1d90:	e9 5e       	subi	r30, 0xE9	; 233
    1d92:	fd 4f       	sbci	r31, 0xFD	; 253
    1d94:	90 81       	ld	r25, Z
    1d96:	82 2f       	mov	r24, r18
    1d98:	69 2f       	mov	r22, r25
    1d9a:	41 e0       	ldi	r20, 0x01	; 1
    1d9c:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    1da0:	89 81       	ldd	r24, Y+1	; 0x01
    1da2:	88 2f       	mov	r24, r24
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	88 0f       	add	r24, r24
    1da8:	99 1f       	adc	r25, r25
    1daa:	fc 01       	movw	r30, r24
    1dac:	ea 5e       	subi	r30, 0xEA	; 234
    1dae:	fd 4f       	sbci	r31, 0xFD	; 253
    1db0:	20 81       	ld	r18, Z
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	88 2f       	mov	r24, r24
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	88 0f       	add	r24, r24
    1dba:	99 1f       	adc	r25, r25
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	e9 5e       	subi	r30, 0xE9	; 233
    1dc0:	fd 4f       	sbci	r31, 0xFD	; 253
    1dc2:	90 81       	ld	r25, Z
    1dc4:	82 2f       	mov	r24, r18
    1dc6:	69 2f       	mov	r22, r25
    1dc8:	40 e0       	ldi	r20, 0x00	; 0
    1dca:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    u8 Local_u8_Counter = 0;
    
    for (Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++ )
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	8f 5f       	subi	r24, 0xFF	; 255
    1dd2:	89 83       	std	Y+1, r24	; 0x01
    1dd4:	90 91 15 02 	lds	r25, 0x0215
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	89 17       	cp	r24, r25
    1ddc:	50 f2       	brcs	.-108    	; 0x1d72 <LED_enu_Initialization+0x14>
    {
        DIO_enu_SetPinDiretion(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_PIN_WRITE);
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    }

    Local_u8_ErrorFlag = ES_OK;
    1dde:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	cf 91       	pop	r28
    1de8:	df 91       	pop	r29
    1dea:	08 95       	ret

00001dec <LED_enu_TurnOnLED>:

extern ErrorState_t LED_enu_TurnOnLED(u8 Copy_u8_LEDNumber)
{
    1dec:	df 93       	push	r29
    1dee:	cf 93       	push	r28
    1df0:	00 d0       	rcall	.+0      	; 0x1df2 <LED_enu_TurnOnLED+0x6>
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
    1df6:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_LEDNumber < LED_u8_LEDsCount)
    1dfc:	90 91 15 02 	lds	r25, 0x0215
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	89 17       	cp	r24, r25
    1e04:	c8 f4       	brcc	.+50     	; 0x1e38 <LED_enu_TurnOnLED+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Group,LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Pin,DIO_HIGH);
    1e06:	8a 81       	ldd	r24, Y+2	; 0x02
    1e08:	88 2f       	mov	r24, r24
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	88 0f       	add	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	fc 01       	movw	r30, r24
    1e12:	ea 5e       	subi	r30, 0xEA	; 234
    1e14:	fd 4f       	sbci	r31, 0xFD	; 253
    1e16:	20 81       	ld	r18, Z
    1e18:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1a:	88 2f       	mov	r24, r24
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	88 0f       	add	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	fc 01       	movw	r30, r24
    1e24:	e9 5e       	subi	r30, 0xE9	; 233
    1e26:	fd 4f       	sbci	r31, 0xFD	; 253
    1e28:	90 81       	ld	r25, Z
    1e2a:	82 2f       	mov	r24, r18
    1e2c:	69 2f       	mov	r22, r25
    1e2e:	41 e0       	ldi	r20, 0x01	; 1
    1e30:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
    1e34:	89 83       	std	Y+1, r24	; 0x01
    1e36:	02 c0       	rjmp	.+4      	; 0x1e3c <LED_enu_TurnOnLED+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1e38:	82 e0       	ldi	r24, 0x02	; 2
    1e3a:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	08 95       	ret

00001e48 <LED_enu_TurnOffLED>:

extern ErrorState_t LED_enu_TurnOffLED(u8 Copy_u8_LEDNumber)
{
    1e48:	df 93       	push	r29
    1e4a:	cf 93       	push	r28
    1e4c:	00 d0       	rcall	.+0      	; 0x1e4e <LED_enu_TurnOffLED+0x6>
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    1e52:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_LEDNumber <= LED_u8_LEDsCount)
    1e58:	90 91 15 02 	lds	r25, 0x0215
    1e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5e:	98 17       	cp	r25, r24
    1e60:	c8 f0       	brcs	.+50     	; 0x1e94 <LED_enu_TurnOffLED+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Group,LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Pin,DIO_LOW);
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	88 2f       	mov	r24, r24
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	88 0f       	add	r24, r24
    1e6a:	99 1f       	adc	r25, r25
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	ea 5e       	subi	r30, 0xEA	; 234
    1e70:	fd 4f       	sbci	r31, 0xFD	; 253
    1e72:	20 81       	ld	r18, Z
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	88 2f       	mov	r24, r24
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	88 0f       	add	r24, r24
    1e7c:	99 1f       	adc	r25, r25
    1e7e:	fc 01       	movw	r30, r24
    1e80:	e9 5e       	subi	r30, 0xE9	; 233
    1e82:	fd 4f       	sbci	r31, 0xFD	; 253
    1e84:	90 81       	ld	r25, Z
    1e86:	82 2f       	mov	r24, r18
    1e88:	69 2f       	mov	r22, r25
    1e8a:	40 e0       	ldi	r20, 0x00	; 0
    1e8c:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
    1e90:	89 83       	std	Y+1, r24	; 0x01
    1e92:	02 c0       	rjmp	.+4      	; 0x1e98 <LED_enu_TurnOffLED+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1e94:	82 e0       	ldi	r24, 0x02	; 2
    1e96:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e9a:	0f 90       	pop	r0
    1e9c:	0f 90       	pop	r0
    1e9e:	cf 91       	pop	r28
    1ea0:	df 91       	pop	r29
    1ea2:	08 95       	ret

00001ea4 <LED_enu_TurnOnAllLEDs>:

extern ErrorState_t LED_enu_TurnOnAllLEDs (void)
{
    1ea4:	df 93       	push	r29
    1ea6:	cf 93       	push	r28
    1ea8:	00 d0       	rcall	.+0      	; 0x1eaa <LED_enu_TurnOnAllLEDs+0x6>
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    1eb2:	19 82       	std	Y+1, r1	; 0x01

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    1eb4:	19 82       	std	Y+1, r1	; 0x01
    1eb6:	1a c0       	rjmp	.+52     	; 0x1eec <LED_enu_TurnOnAllLEDs+0x48>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_HIGH);
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	88 2f       	mov	r24, r24
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	88 0f       	add	r24, r24
    1ec0:	99 1f       	adc	r25, r25
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	ea 5e       	subi	r30, 0xEA	; 234
    1ec6:	fd 4f       	sbci	r31, 0xFD	; 253
    1ec8:	20 81       	ld	r18, Z
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	88 2f       	mov	r24, r24
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	88 0f       	add	r24, r24
    1ed2:	99 1f       	adc	r25, r25
    1ed4:	fc 01       	movw	r30, r24
    1ed6:	e9 5e       	subi	r30, 0xE9	; 233
    1ed8:	fd 4f       	sbci	r31, 0xFD	; 253
    1eda:	90 81       	ld	r25, Z
    1edc:	82 2f       	mov	r24, r18
    1ede:	69 2f       	mov	r22, r25
    1ee0:	41 e0       	ldi	r20, 0x01	; 1
    1ee2:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	8f 5f       	subi	r24, 0xFF	; 255
    1eea:	89 83       	std	Y+1, r24	; 0x01
    1eec:	90 91 15 02 	lds	r25, 0x0215
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	89 17       	cp	r24, r25
    1ef4:	08 f3       	brcs	.-62     	; 0x1eb8 <LED_enu_TurnOnAllLEDs+0x14>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_HIGH);
    }
    //Error Flags handling to be done later
    Local_u8_ErrorFlag = ES_OK;
    1ef6:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    1ef8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	cf 91       	pop	r28
    1f00:	df 91       	pop	r29
    1f02:	08 95       	ret

00001f04 <LED_enu_TurnOffAllLEDs>:

extern ErrorState_t LED_enu_TurnOffAllLEDs (void)
{
    1f04:	df 93       	push	r29
    1f06:	cf 93       	push	r28
    1f08:	00 d0       	rcall	.+0      	; 0x1f0a <LED_enu_TurnOffAllLEDs+0x6>
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    1f12:	19 82       	std	Y+1, r1	; 0x01

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    1f14:	19 82       	std	Y+1, r1	; 0x01
    1f16:	1a c0       	rjmp	.+52     	; 0x1f4c <LED_enu_TurnOffAllLEDs+0x48>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    1f18:	89 81       	ldd	r24, Y+1	; 0x01
    1f1a:	88 2f       	mov	r24, r24
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	88 0f       	add	r24, r24
    1f20:	99 1f       	adc	r25, r25
    1f22:	fc 01       	movw	r30, r24
    1f24:	ea 5e       	subi	r30, 0xEA	; 234
    1f26:	fd 4f       	sbci	r31, 0xFD	; 253
    1f28:	20 81       	ld	r18, Z
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	88 2f       	mov	r24, r24
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	88 0f       	add	r24, r24
    1f32:	99 1f       	adc	r25, r25
    1f34:	fc 01       	movw	r30, r24
    1f36:	e9 5e       	subi	r30, 0xE9	; 233
    1f38:	fd 4f       	sbci	r31, 0xFD	; 253
    1f3a:	90 81       	ld	r25, Z
    1f3c:	82 2f       	mov	r24, r18
    1f3e:	69 2f       	mov	r22, r25
    1f40:	40 e0       	ldi	r20, 0x00	; 0
    1f42:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	8f 5f       	subi	r24, 0xFF	; 255
    1f4a:	89 83       	std	Y+1, r24	; 0x01
    1f4c:	90 91 15 02 	lds	r25, 0x0215
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
    1f52:	89 17       	cp	r24, r25
    1f54:	08 f3       	brcs	.-62     	; 0x1f18 <LED_enu_TurnOffAllLEDs+0x14>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    }
    
    //Error Flags handling to be done later
    Local_u8_ErrorFlag = ES_OK;
    1f56:	1a 82       	std	Y+2, r1	; 0x02
    
    return Local_u8_ErrorFlag;
    1f58:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5a:	0f 90       	pop	r0
    1f5c:	0f 90       	pop	r0
    1f5e:	cf 91       	pop	r28
    1f60:	df 91       	pop	r29
    1f62:	08 95       	ret

00001f64 <LCD_enu_Initialization>:
#include "LCD_Private.h"


//Functions' implementations'
extern ErrorState_t LCD_enu_Initialization(void)
{
    1f64:	df 93       	push	r29
    1f66:	cf 93       	push	r28
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
    1f6c:	6d 97       	sbiw	r28, 0x1d	; 29
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	f8 94       	cli
    1f72:	de bf       	out	0x3e, r29	; 62
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	cd bf       	out	0x3d, r28	; 61
    u8 Local_u8_ErrorFlag = ES_NOK;
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	8d 8f       	std	Y+29, r24	; 0x1d
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	ac e0       	ldi	r26, 0x0C	; 12
    1f82:	b2 e4       	ldi	r27, 0x42	; 66
    1f84:	89 8f       	std	Y+25, r24	; 0x19
    1f86:	9a 8f       	std	Y+26, r25	; 0x1a
    1f88:	ab 8f       	std	Y+27, r26	; 0x1b
    1f8a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f8c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	4a e7       	ldi	r20, 0x7A	; 122
    1f9a:	55 e4       	ldi	r21, 0x45	; 69
    1f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	8d 8b       	std	Y+21, r24	; 0x15
    1fa6:	9e 8b       	std	Y+22, r25	; 0x16
    1fa8:	af 8b       	std	Y+23, r26	; 0x17
    1faa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fac:	6d 89       	ldd	r22, Y+21	; 0x15
    1fae:	7e 89       	ldd	r23, Y+22	; 0x16
    1fb0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fb2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	40 e8       	ldi	r20, 0x80	; 128
    1fba:	5f e3       	ldi	r21, 0x3F	; 63
    1fbc:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    1fc0:	88 23       	and	r24, r24
    1fc2:	2c f4       	brge	.+10     	; 0x1fce <LCD_enu_Initialization+0x6a>
		__ticks = 1;
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	9c 8b       	std	Y+20, r25	; 0x14
    1fca:	8b 8b       	std	Y+19, r24	; 0x13
    1fcc:	3f c0       	rjmp	.+126    	; 0x204c <LCD_enu_Initialization+0xe8>
	else if (__tmp > 65535)
    1fce:	6d 89       	ldd	r22, Y+21	; 0x15
    1fd0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	3f ef       	ldi	r19, 0xFF	; 255
    1fda:	4f e7       	ldi	r20, 0x7F	; 127
    1fdc:	57 e4       	ldi	r21, 0x47	; 71
    1fde:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1fe2:	18 16       	cp	r1, r24
    1fe4:	4c f5       	brge	.+82     	; 0x2038 <LCD_enu_Initialization+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe6:	69 8d       	ldd	r22, Y+25	; 0x19
    1fe8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	40 e2       	ldi	r20, 0x20	; 32
    1ff4:	51 e4       	ldi	r21, 0x41	; 65
    1ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	bc 01       	movw	r22, r24
    2000:	cd 01       	movw	r24, r26
    2002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	9c 8b       	std	Y+20, r25	; 0x14
    200c:	8b 8b       	std	Y+19, r24	; 0x13
    200e:	0f c0       	rjmp	.+30     	; 0x202e <LCD_enu_Initialization+0xca>
    2010:	80 e9       	ldi	r24, 0x90	; 144
    2012:	91 e0       	ldi	r25, 0x01	; 1
    2014:	9a 8b       	std	Y+18, r25	; 0x12
    2016:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2018:	89 89       	ldd	r24, Y+17	; 0x11
    201a:	9a 89       	ldd	r25, Y+18	; 0x12
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	f1 f7       	brne	.-4      	; 0x201c <LCD_enu_Initialization+0xb8>
    2020:	9a 8b       	std	Y+18, r25	; 0x12
    2022:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2024:	8b 89       	ldd	r24, Y+19	; 0x13
    2026:	9c 89       	ldd	r25, Y+20	; 0x14
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	9c 8b       	std	Y+20, r25	; 0x14
    202c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    202e:	8b 89       	ldd	r24, Y+19	; 0x13
    2030:	9c 89       	ldd	r25, Y+20	; 0x14
    2032:	00 97       	sbiw	r24, 0x00	; 0
    2034:	69 f7       	brne	.-38     	; 0x2010 <LCD_enu_Initialization+0xac>
    2036:	14 c0       	rjmp	.+40     	; 0x2060 <LCD_enu_Initialization+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2038:	6d 89       	ldd	r22, Y+21	; 0x15
    203a:	7e 89       	ldd	r23, Y+22	; 0x16
    203c:	8f 89       	ldd	r24, Y+23	; 0x17
    203e:	98 8d       	ldd	r25, Y+24	; 0x18
    2040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	9c 8b       	std	Y+20, r25	; 0x14
    204a:	8b 8b       	std	Y+19, r24	; 0x13
    204c:	8b 89       	ldd	r24, Y+19	; 0x13
    204e:	9c 89       	ldd	r25, Y+20	; 0x14
    2050:	98 8b       	std	Y+16, r25	; 0x10
    2052:	8f 87       	std	Y+15, r24	; 0x0f
    2054:	8f 85       	ldd	r24, Y+15	; 0x0f
    2056:	98 89       	ldd	r25, Y+16	; 0x10
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	f1 f7       	brne	.-4      	; 0x2058 <LCD_enu_Initialization+0xf4>
    205c:	98 8b       	std	Y+16, r25	; 0x10
    205e:	8f 87       	std	Y+15, r24	; 0x0f

    //Intitial delay
     _delay_ms(35);
   
    DIO_enu_SetPinDiretion(LCD_RS_GROUP,LCD_RS_PIN,DIO_PIN_WRITE);
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	61 e0       	ldi	r22, 0x01	; 1
    2064:	41 e0       	ldi	r20, 0x01	; 1
    2066:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_RW_GROUP,LCD_RW_PIN,DIO_PIN_WRITE);
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	62 e0       	ldi	r22, 0x02	; 2
    206e:	41 e0       	ldi	r20, 0x01	; 1
    2070:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_EN_GROUP,LCD_EN_PIN,DIO_PIN_WRITE);
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	63 e0       	ldi	r22, 0x03	; 3
    2078:	41 e0       	ldi	r20, 0x01	; 1
    207a:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_enu_SetPinDiretion>

    DIO_enu_SetPinDiretion(LCD_D7_GROUP,LCD_D7_PIN,DIO_PIN_WRITE);
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	67 e0       	ldi	r22, 0x07	; 7
    2082:	41 e0       	ldi	r20, 0x01	; 1
    2084:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D6_GROUP,LCD_D6_PIN,DIO_PIN_WRITE);
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	66 e0       	ldi	r22, 0x06	; 6
    208c:	41 e0       	ldi	r20, 0x01	; 1
    208e:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D5_GROUP,LCD_D5_PIN,DIO_PIN_WRITE);
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	65 e0       	ldi	r22, 0x05	; 5
    2096:	41 e0       	ldi	r20, 0x01	; 1
    2098:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D4_GROUP,LCD_D4_PIN,DIO_PIN_WRITE);
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	64 e0       	ldi	r22, 0x04	; 4
    20a0:	41 e0       	ldi	r20, 0x01	; 1
    20a2:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_enu_SetPinDiretion>
        enu_PassByteAndLatch(0x38);

    #elif LCD_MODE == LCD_4_BIT_MODE

        //Function Set
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	61 e0       	ldi	r22, 0x01	; 1
    20aa:	40 e0       	ldi	r20, 0x00	; 0
    20ac:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
                
        DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,DIO_LOW);
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	67 e0       	ldi	r22, 0x07	; 7
    20b4:	40 e0       	ldi	r20, 0x00	; 0
    20b6:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,DIO_LOW);
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	66 e0       	ldi	r22, 0x06	; 6
    20be:	40 e0       	ldi	r20, 0x00	; 0
    20c0:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,DIO_HIGH);
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	65 e0       	ldi	r22, 0x05	; 5
    20c8:	41 e0       	ldi	r20, 0x01	; 1
    20ca:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,DIO_LOW);
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	64 e0       	ldi	r22, 0x04	; 4
    20d2:	40 e0       	ldi	r20, 0x00	; 0
    20d4:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	63 e0       	ldi	r22, 0x03	; 3
    20dc:	41 e0       	ldi	r20, 0x01	; 1
    20de:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	a0 e8       	ldi	r26, 0x80	; 128
    20e8:	bf e3       	ldi	r27, 0x3F	; 63
    20ea:	8b 87       	std	Y+11, r24	; 0x0b
    20ec:	9c 87       	std	Y+12, r25	; 0x0c
    20ee:	ad 87       	std	Y+13, r26	; 0x0d
    20f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	4a e7       	ldi	r20, 0x7A	; 122
    2100:	55 e4       	ldi	r21, 0x45	; 69
    2102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	8f 83       	std	Y+7, r24	; 0x07
    210c:	98 87       	std	Y+8, r25	; 0x08
    210e:	a9 87       	std	Y+9, r26	; 0x09
    2110:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2112:	6f 81       	ldd	r22, Y+7	; 0x07
    2114:	78 85       	ldd	r23, Y+8	; 0x08
    2116:	89 85       	ldd	r24, Y+9	; 0x09
    2118:	9a 85       	ldd	r25, Y+10	; 0x0a
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	40 e8       	ldi	r20, 0x80	; 128
    2120:	5f e3       	ldi	r21, 0x3F	; 63
    2122:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2126:	88 23       	and	r24, r24
    2128:	2c f4       	brge	.+10     	; 0x2134 <LCD_enu_Initialization+0x1d0>
		__ticks = 1;
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	9e 83       	std	Y+6, r25	; 0x06
    2130:	8d 83       	std	Y+5, r24	; 0x05
    2132:	3f c0       	rjmp	.+126    	; 0x21b2 <LCD_enu_Initialization+0x24e>
	else if (__tmp > 65535)
    2134:	6f 81       	ldd	r22, Y+7	; 0x07
    2136:	78 85       	ldd	r23, Y+8	; 0x08
    2138:	89 85       	ldd	r24, Y+9	; 0x09
    213a:	9a 85       	ldd	r25, Y+10	; 0x0a
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	3f ef       	ldi	r19, 0xFF	; 255
    2140:	4f e7       	ldi	r20, 0x7F	; 127
    2142:	57 e4       	ldi	r21, 0x47	; 71
    2144:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2148:	18 16       	cp	r1, r24
    214a:	4c f5       	brge	.+82     	; 0x219e <LCD_enu_Initialization+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    214c:	6b 85       	ldd	r22, Y+11	; 0x0b
    214e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2150:	8d 85       	ldd	r24, Y+13	; 0x0d
    2152:	9e 85       	ldd	r25, Y+14	; 0x0e
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e2       	ldi	r20, 0x20	; 32
    215a:	51 e4       	ldi	r21, 0x41	; 65
    215c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	bc 01       	movw	r22, r24
    2166:	cd 01       	movw	r24, r26
    2168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	9e 83       	std	Y+6, r25	; 0x06
    2172:	8d 83       	std	Y+5, r24	; 0x05
    2174:	0f c0       	rjmp	.+30     	; 0x2194 <LCD_enu_Initialization+0x230>
    2176:	80 e9       	ldi	r24, 0x90	; 144
    2178:	91 e0       	ldi	r25, 0x01	; 1
    217a:	9c 83       	std	Y+4, r25	; 0x04
    217c:	8b 83       	std	Y+3, r24	; 0x03
    217e:	8b 81       	ldd	r24, Y+3	; 0x03
    2180:	9c 81       	ldd	r25, Y+4	; 0x04
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	f1 f7       	brne	.-4      	; 0x2182 <LCD_enu_Initialization+0x21e>
    2186:	9c 83       	std	Y+4, r25	; 0x04
    2188:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    218a:	8d 81       	ldd	r24, Y+5	; 0x05
    218c:	9e 81       	ldd	r25, Y+6	; 0x06
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	9e 83       	std	Y+6, r25	; 0x06
    2192:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2194:	8d 81       	ldd	r24, Y+5	; 0x05
    2196:	9e 81       	ldd	r25, Y+6	; 0x06
    2198:	00 97       	sbiw	r24, 0x00	; 0
    219a:	69 f7       	brne	.-38     	; 0x2176 <LCD_enu_Initialization+0x212>
    219c:	14 c0       	rjmp	.+40     	; 0x21c6 <LCD_enu_Initialization+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    219e:	6f 81       	ldd	r22, Y+7	; 0x07
    21a0:	78 85       	ldd	r23, Y+8	; 0x08
    21a2:	89 85       	ldd	r24, Y+9	; 0x09
    21a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	9e 83       	std	Y+6, r25	; 0x06
    21b0:	8d 83       	std	Y+5, r24	; 0x05
    21b2:	8d 81       	ldd	r24, Y+5	; 0x05
    21b4:	9e 81       	ldd	r25, Y+6	; 0x06
    21b6:	9a 83       	std	Y+2, r25	; 0x02
    21b8:	89 83       	std	Y+1, r24	; 0x01
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	9a 81       	ldd	r25, Y+2	; 0x02
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	f1 f7       	brne	.-4      	; 0x21be <LCD_enu_Initialization+0x25a>
    21c2:	9a 83       	std	Y+2, r25	; 0x02
    21c4:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	63 e0       	ldi	r22, 0x03	; 3
    21ca:	40 e0       	ldi	r20, 0x00	; 0
    21cc:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
       
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	61 e0       	ldi	r22, 0x01	; 1
    21d4:	40 e0       	ldi	r20, 0x00	; 0
    21d6:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(0x28);
    21da:	88 e2       	ldi	r24, 0x28	; 40
    21dc:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>

    #endif


    //Display ON/OFF control
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	61 e0       	ldi	r22, 0x01	; 1
    21e4:	40 e0       	ldi	r20, 0x00	; 0
    21e6:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x0C);
    21ea:	8c e0       	ldi	r24, 0x0C	; 12
    21ec:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>

    //Display clear
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	61 e0       	ldi	r22, 0x01	; 1
    21f4:	40 e0       	ldi	r20, 0x00	; 0
    21f6:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x01);
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>

    //Entry Mode Set
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	61 e0       	ldi	r22, 0x01	; 1
    2204:	40 e0       	ldi	r20, 0x00	; 0
    2206:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x06);
    220a:	86 e0       	ldi	r24, 0x06	; 6
    220c:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>
    

    Local_u8_ErrorFlag = ES_OK; //should be checked on with a for loop
    2210:	1d 8e       	std	Y+29, r1	; 0x1d
    return Local_u8_ErrorFlag;
    2212:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    2214:	6d 96       	adiw	r28, 0x1d	; 29
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	f8 94       	cli
    221a:	de bf       	out	0x3e, r29	; 62
    221c:	0f be       	out	0x3f, r0	; 63
    221e:	cd bf       	out	0x3d, r28	; 61
    2220:	cf 91       	pop	r28
    2222:	df 91       	pop	r29
    2224:	08 95       	ret

00002226 <LCD_enu_SendCommand>:

extern ErrorState_t LCD_enu_SendCommand (u8 Copy_u8_Command)
{
    2226:	df 93       	push	r29
    2228:	cf 93       	push	r28
    222a:	00 d0       	rcall	.+0      	; 0x222c <LCD_enu_SendCommand+0x6>
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
    2230:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	61 e0       	ldi	r22, 0x01	; 1
    223a:	40 e0       	ldi	r20, 0x00	; 0
    223c:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
    
    enu_PassByteAndLatch(Copy_u8_Command);
    2240:	8a 81       	ldd	r24, Y+2	; 0x02
    2242:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>

    Local_u8_ErrorFlag = ES_OK; //Should be checked by a for loop
    2246:	19 82       	std	Y+1, r1	; 0x01
    return Local_u8_ErrorFlag;
    2248:	89 81       	ldd	r24, Y+1	; 0x01

}
    224a:	0f 90       	pop	r0
    224c:	0f 90       	pop	r0
    224e:	cf 91       	pop	r28
    2250:	df 91       	pop	r29
    2252:	08 95       	ret

00002254 <LCD_enu_SendData>:

extern ErrorState_t LCD_enu_SendData (u8 Copy_u8_Data)
{
    2254:	df 93       	push	r29
    2256:	cf 93       	push	r28
    2258:	00 d0       	rcall	.+0      	; 0x225a <LCD_enu_SendData+0x6>
    225a:	cd b7       	in	r28, 0x3d	; 61
    225c:	de b7       	in	r29, 0x3e	; 62
    225e:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	61 e0       	ldi	r22, 0x01	; 1
    2268:	41 e0       	ldi	r20, 0x01	; 1
    226a:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
    
    enu_PassByteAndLatch(Copy_u8_Data);
    226e:	8a 81       	ldd	r24, Y+2	; 0x02
    2270:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>

    Local_u8_ErrorFlag = ES_OK; //Should be checked by a for loop
    2274:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    2276:	89 81       	ldd	r24, Y+1	; 0x01

}
    2278:	0f 90       	pop	r0
    227a:	0f 90       	pop	r0
    227c:	cf 91       	pop	r28
    227e:	df 91       	pop	r29
    2280:	08 95       	ret

00002282 <LCD_enu_GoToPosition>:

extern ErrorState_t LCD_enu_GoToPosition(u8 Copy_u8_Row, u8 Copy_u8_Column, u8 Copy_PageNumber)
{
    2282:	df 93       	push	r29
    2284:	cf 93       	push	r28
    2286:	00 d0       	rcall	.+0      	; 0x2288 <LCD_enu_GoToPosition+0x6>
    2288:	00 d0       	rcall	.+0      	; 0x228a <LCD_enu_GoToPosition+0x8>
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
    228e:	8a 83       	std	Y+2, r24	; 0x02
    2290:	6b 83       	std	Y+3, r22	; 0x03
    2292:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	89 83       	std	Y+1, r24	; 0x01
    
    if((Copy_u8_Column <= 16 && Copy_u8_Column >= 1) && (Copy_u8_Row <= 2 && Copy_u8_Row >= 1) && (Copy_PageNumber <= LCD_NUMBER_OF_PAGES && Copy_PageNumber >= 1))
    2298:	8b 81       	ldd	r24, Y+3	; 0x03
    229a:	81 31       	cpi	r24, 0x11	; 17
    229c:	88 f5       	brcc	.+98     	; 0x2300 <LCD_enu_GoToPosition+0x7e>
    229e:	8b 81       	ldd	r24, Y+3	; 0x03
    22a0:	88 23       	and	r24, r24
    22a2:	71 f1       	breq	.+92     	; 0x2300 <LCD_enu_GoToPosition+0x7e>
    22a4:	8a 81       	ldd	r24, Y+2	; 0x02
    22a6:	83 30       	cpi	r24, 0x03	; 3
    22a8:	58 f5       	brcc	.+86     	; 0x2300 <LCD_enu_GoToPosition+0x7e>
    22aa:	8a 81       	ldd	r24, Y+2	; 0x02
    22ac:	88 23       	and	r24, r24
    22ae:	41 f1       	breq	.+80     	; 0x2300 <LCD_enu_GoToPosition+0x7e>
    22b0:	8c 81       	ldd	r24, Y+4	; 0x04
    22b2:	85 30       	cpi	r24, 0x05	; 5
    22b4:	28 f5       	brcc	.+74     	; 0x2300 <LCD_enu_GoToPosition+0x7e>
    22b6:	8c 81       	ldd	r24, Y+4	; 0x04
    22b8:	88 23       	and	r24, r24
    22ba:	11 f1       	breq	.+68     	; 0x2300 <LCD_enu_GoToPosition+0x7e>
    {
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	61 e0       	ldi	r22, 0x01	; 1
    22c0:	40 e0       	ldi	r20, 0x00	; 0
    22c2:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1)  + 16*(Copy_PageNumber -1));
    22c6:	8c 81       	ldd	r24, Y+4	; 0x04
    22c8:	88 2f       	mov	r24, r24
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	9c 01       	movw	r18, r24
    22ce:	21 50       	subi	r18, 0x01	; 1
    22d0:	30 40       	sbci	r19, 0x00	; 0
    22d2:	8a 81       	ldd	r24, Y+2	; 0x02
    22d4:	88 2f       	mov	r24, r24
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	01 97       	sbiw	r24, 0x01	; 1
    22da:	88 0f       	add	r24, r24
    22dc:	99 1f       	adc	r25, r25
    22de:	88 0f       	add	r24, r24
    22e0:	99 1f       	adc	r25, r25
    22e2:	82 0f       	add	r24, r18
    22e4:	93 1f       	adc	r25, r19
    22e6:	82 95       	swap	r24
    22e8:	92 95       	swap	r25
    22ea:	90 7f       	andi	r25, 0xF0	; 240
    22ec:	98 27       	eor	r25, r24
    22ee:	80 7f       	andi	r24, 0xF0	; 240
    22f0:	98 27       	eor	r25, r24
    22f2:	98 2f       	mov	r25, r24
    22f4:	8b 81       	ldd	r24, Y+3	; 0x03
    22f6:	89 0f       	add	r24, r25
    22f8:	81 58       	subi	r24, 0x81	; 129
    22fa:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>
    22fe:	02 c0       	rjmp	.+4      	; 0x2304 <LCD_enu_GoToPosition+0x82>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2300:	82 e0       	ldi	r24, 0x02	; 2
    2302:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    2304:	89 81       	ldd	r24, Y+1	; 0x01
}
    2306:	0f 90       	pop	r0
    2308:	0f 90       	pop	r0
    230a:	0f 90       	pop	r0
    230c:	0f 90       	pop	r0
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	08 95       	ret

00002314 <LCD_enu_SendString>:

extern ErrorState_t LCD_enu_SendString(const char* Copy_pc_StringPointer)
{
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	00 d0       	rcall	.+0      	; 0x231a <LCD_enu_SendString+0x6>
    231a:	0f 92       	push	r0
    231c:	cd b7       	in	r28, 0x3d	; 61
    231e:	de b7       	in	r29, 0x3e	; 62
    2320:	9b 83       	std	Y+3, r25	; 0x03
    2322:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_pc_StringPointer)
    2328:	8a 81       	ldd	r24, Y+2	; 0x02
    232a:	9b 81       	ldd	r25, Y+3	; 0x03
    232c:	00 97       	sbiw	r24, 0x00	; 0
    232e:	c1 f0       	breq	.+48     	; 0x2360 <LCD_enu_SendString+0x4c>
    2330:	10 c0       	rjmp	.+32     	; 0x2352 <LCD_enu_SendString+0x3e>
    {
        while (*Copy_pc_StringPointer)
        {
            DIO_enu_SetPinValue(LCD_RS_GROUP , LCD_RS_PIN , DIO_HIGH);
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	61 e0       	ldi	r22, 0x01	; 1
    2336:	41 e0       	ldi	r20, 0x01	; 1
    2338:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
            enu_PassByteAndLatch(*Copy_pc_StringPointer++);
    233c:	ea 81       	ldd	r30, Y+2	; 0x02
    233e:	fb 81       	ldd	r31, Y+3	; 0x03
    2340:	20 81       	ld	r18, Z
    2342:	8a 81       	ldd	r24, Y+2	; 0x02
    2344:	9b 81       	ldd	r25, Y+3	; 0x03
    2346:	01 96       	adiw	r24, 0x01	; 1
    2348:	9b 83       	std	Y+3, r25	; 0x03
    234a:	8a 83       	std	Y+2, r24	; 0x02
    234c:	82 2f       	mov	r24, r18
    234e:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    if(Copy_pc_StringPointer)
    {
        while (*Copy_pc_StringPointer)
    2352:	ea 81       	ldd	r30, Y+2	; 0x02
    2354:	fb 81       	ldd	r31, Y+3	; 0x03
    2356:	80 81       	ld	r24, Z
    2358:	88 23       	and	r24, r24
    235a:	59 f7       	brne	.-42     	; 0x2332 <LCD_enu_SendString+0x1e>
            enu_PassByteAndLatch(*Copy_pc_StringPointer++);


        }
        
        Local_u8_ErrorFlag = ES_OK;
    235c:	19 82       	std	Y+1, r1	; 0x01
    235e:	02 c0       	rjmp	.+4      	; 0x2364 <LCD_enu_SendString+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    2360:	83 e0       	ldi	r24, 0x03	; 3
    2362:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    2364:	89 81       	ldd	r24, Y+1	; 0x01
}
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	cf 91       	pop	r28
    236e:	df 91       	pop	r29
    2370:	08 95       	ret

00002372 <LCD_enu_ClearPage>:

extern ErrorState_t LCD_enu_ClearPage(u8 Copy_u8_PageNumber)
{
    2372:	df 93       	push	r29
    2374:	cf 93       	push	r28
    2376:	00 d0       	rcall	.+0      	; 0x2378 <LCD_enu_ClearPage+0x6>
    2378:	0f 92       	push	r0
    237a:	cd b7       	in	r28, 0x3d	; 61
    237c:	de b7       	in	r29, 0x3e	; 62
    237e:	8b 83       	std	Y+3, r24	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	8a 83       	std	Y+2, r24	; 0x02
    
    if(Copy_u8_PageNumber >= 1 && Copy_u8_PageNumber <= LCD_NUMBER_OF_PAGES)
    2384:	8b 81       	ldd	r24, Y+3	; 0x03
    2386:	88 23       	and	r24, r24
    2388:	09 f4       	brne	.+2      	; 0x238c <LCD_enu_ClearPage+0x1a>
    238a:	49 c0       	rjmp	.+146    	; 0x241e <LCD_enu_ClearPage+0xac>
    238c:	8b 81       	ldd	r24, Y+3	; 0x03
    238e:	85 30       	cpi	r24, 0x05	; 5
    2390:	08 f0       	brcs	.+2      	; 0x2394 <LCD_enu_ClearPage+0x22>
    2392:	45 c0       	rjmp	.+138    	; 0x241e <LCD_enu_ClearPage+0xac>
    {
        u8 Local_u8_Counter = 0;
    2394:	19 82       	std	Y+1, r1	; 0x01

        //Clearing first line:

        //Placing cursor at the beginning of the line
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	61 e0       	ldi	r22, 0x01	; 1
    239a:	40 e0       	ldi	r20, 0x00	; 0
    239c:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_FIRST_LINE_BASE_ADDRESS);
    23a0:	8b 81       	ldd	r24, Y+3	; 0x03
    23a2:	88 2f       	mov	r24, r24
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	07 96       	adiw	r24, 0x07	; 7
    23a8:	82 95       	swap	r24
    23aa:	92 95       	swap	r25
    23ac:	90 7f       	andi	r25, 0xF0	; 240
    23ae:	98 27       	eor	r25, r24
    23b0:	80 7f       	andi	r24, 0xF0	; 240
    23b2:	98 27       	eor	r25, r24
    23b4:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	61 e0       	ldi	r22, 0x01	; 1
    23bc:	41 e0       	ldi	r20, 0x01	; 1
    23be:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    23c2:	19 82       	std	Y+1, r1	; 0x01
    23c4:	06 c0       	rjmp	.+12     	; 0x23d2 <LCD_enu_ClearPage+0x60>
        {
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
    23c6:	80 e2       	ldi	r24, 0x20	; 32
    23c8:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_FIRST_LINE_BASE_ADDRESS);
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    23cc:	89 81       	ldd	r24, Y+1	; 0x01
    23ce:	8f 5f       	subi	r24, 0xFF	; 255
    23d0:	89 83       	std	Y+1, r24	; 0x01
    23d2:	89 81       	ldd	r24, Y+1	; 0x01
    23d4:	80 31       	cpi	r24, 0x10	; 16
    23d6:	b8 f3       	brcs	.-18     	; 0x23c6 <LCD_enu_ClearPage+0x54>


        //Clearing second line
        
        //Placing cursor at the beginning of the line
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	61 e0       	ldi	r22, 0x01	; 1
    23dc:	40 e0       	ldi	r20, 0x00	; 0
    23de:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_SECOND_LINE_BASE_ADDRESS);
    23e2:	8b 81       	ldd	r24, Y+3	; 0x03
    23e4:	88 2f       	mov	r24, r24
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	0b 96       	adiw	r24, 0x0b	; 11
    23ea:	82 95       	swap	r24
    23ec:	92 95       	swap	r25
    23ee:	90 7f       	andi	r25, 0xF0	; 240
    23f0:	98 27       	eor	r25, r24
    23f2:	80 7f       	andi	r24, 0xF0	; 240
    23f4:	98 27       	eor	r25, r24
    23f6:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	61 e0       	ldi	r22, 0x01	; 1
    23fe:	41 e0       	ldi	r20, 0x01	; 1
    2400:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    2404:	19 82       	std	Y+1, r1	; 0x01
    2406:	06 c0       	rjmp	.+12     	; 0x2414 <LCD_enu_ClearPage+0xa2>
        {
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
    2408:	80 e2       	ldi	r24, 0x20	; 32
    240a:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_SECOND_LINE_BASE_ADDRESS);
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	8f 5f       	subi	r24, 0xFF	; 255
    2412:	89 83       	std	Y+1, r24	; 0x01
    2414:	89 81       	ldd	r24, Y+1	; 0x01
    2416:	80 31       	cpi	r24, 0x10	; 16
    2418:	b8 f3       	brcs	.-18     	; 0x2408 <LCD_enu_ClearPage+0x96>
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
        }
        

        Local_u8_ErrorFlag = ES_OK;
    241a:	1a 82       	std	Y+2, r1	; 0x02
    241c:	02 c0       	rjmp	.+4      	; 0x2422 <LCD_enu_ClearPage+0xb0>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    241e:	82 e0       	ldi	r24, 0x02	; 2
    2420:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_u8_ErrorFlag;
    2422:	8a 81       	ldd	r24, Y+2	; 0x02

}
    2424:	0f 90       	pop	r0
    2426:	0f 90       	pop	r0
    2428:	0f 90       	pop	r0
    242a:	cf 91       	pop	r28
    242c:	df 91       	pop	r29
    242e:	08 95       	ret

00002430 <LCD_enu_ClearRow>:

extern ErrorState_t LCD_enu_ClearRow(u8 Copy_u8_Row, u8 Copy_u8_PageNumber)
{
    2430:	df 93       	push	r29
    2432:	cf 93       	push	r28
    2434:	00 d0       	rcall	.+0      	; 0x2436 <LCD_enu_ClearRow+0x6>
    2436:	00 d0       	rcall	.+0      	; 0x2438 <LCD_enu_ClearRow+0x8>
    2438:	cd b7       	in	r28, 0x3d	; 61
    243a:	de b7       	in	r29, 0x3e	; 62
    243c:	8b 83       	std	Y+3, r24	; 0x03
    243e:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	8a 83       	std	Y+2, r24	; 0x02

    if((Copy_u8_Row >=  LCD_ROW_1) && (Copy_u8_Row <= LCD_ROW_2))
    2444:	8b 81       	ldd	r24, Y+3	; 0x03
    2446:	88 23       	and	r24, r24
    2448:	09 f4       	brne	.+2      	; 0x244c <LCD_enu_ClearRow+0x1c>
    244a:	5f c0       	rjmp	.+190    	; 0x250a <LCD_enu_ClearRow+0xda>
    244c:	8b 81       	ldd	r24, Y+3	; 0x03
    244e:	83 30       	cpi	r24, 0x03	; 3
    2450:	08 f0       	brcs	.+2      	; 0x2454 <LCD_enu_ClearRow+0x24>
    2452:	5b c0       	rjmp	.+182    	; 0x250a <LCD_enu_ClearRow+0xda>
    {
        u8 Local_u8_Counter = 0;
    2454:	19 82       	std	Y+1, r1	; 0x01


        //Placing cursor at the beginning of the row
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	61 e0       	ldi	r22, 0x01	; 1
    245a:	40 e0       	ldi	r20, 0x00	; 0
    245c:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
        if(Copy_u8_Row == 1)
    2460:	8b 81       	ldd	r24, Y+3	; 0x03
    2462:	81 30       	cpi	r24, 0x01	; 1
    2464:	69 f4       	brne	.+26     	; 0x2480 <LCD_enu_ClearRow+0x50>
        {
            enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_FIRST_LINE_BASE_ADDRESS);
    2466:	8c 81       	ldd	r24, Y+4	; 0x04
    2468:	88 2f       	mov	r24, r24
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	07 96       	adiw	r24, 0x07	; 7
    246e:	82 95       	swap	r24
    2470:	92 95       	swap	r25
    2472:	90 7f       	andi	r25, 0xF0	; 240
    2474:	98 27       	eor	r25, r24
    2476:	80 7f       	andi	r24, 0xF0	; 240
    2478:	98 27       	eor	r25, r24
    247a:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>
    247e:	0f c0       	rjmp	.+30     	; 0x249e <LCD_enu_ClearRow+0x6e>
        }
        else if(Copy_u8_Row == 2)
    2480:	8b 81       	ldd	r24, Y+3	; 0x03
    2482:	82 30       	cpi	r24, 0x02	; 2
    2484:	61 f4       	brne	.+24     	; 0x249e <LCD_enu_ClearRow+0x6e>
        {
            enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_SECOND_LINE_BASE_ADDRESS);
    2486:	8c 81       	ldd	r24, Y+4	; 0x04
    2488:	88 2f       	mov	r24, r24
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	0b 96       	adiw	r24, 0x0b	; 11
    248e:	82 95       	swap	r24
    2490:	92 95       	swap	r25
    2492:	90 7f       	andi	r25, 0xF0	; 240
    2494:	98 27       	eor	r25, r24
    2496:	80 7f       	andi	r24, 0xF0	; 240
    2498:	98 27       	eor	r25, r24
    249a:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>

        }

        //Erasing one character at a time
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	61 e0       	ldi	r22, 0x01	; 1
    24a2:	41 e0       	ldi	r20, 0x01	; 1
    24a4:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    24a8:	19 82       	std	Y+1, r1	; 0x01
    24aa:	06 c0       	rjmp	.+12     	; 0x24b8 <LCD_enu_ClearRow+0x88>
        {
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
    24ac:	80 e2       	ldi	r24, 0x20	; 32
    24ae:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>

        }

        //Erasing one character at a time
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    24b2:	89 81       	ldd	r24, Y+1	; 0x01
    24b4:	8f 5f       	subi	r24, 0xFF	; 255
    24b6:	89 83       	std	Y+1, r24	; 0x01
    24b8:	89 81       	ldd	r24, Y+1	; 0x01
    24ba:	80 31       	cpi	r24, 0x10	; 16
    24bc:	b8 f3       	brcs	.-18     	; 0x24ac <LCD_enu_ClearRow+0x7c>
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
        }

        //Placing cursor at the beginning of the row
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	61 e0       	ldi	r22, 0x01	; 1
    24c2:	40 e0       	ldi	r20, 0x00	; 0
    24c4:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
        if(Copy_u8_Row == 1)
    24c8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ca:	81 30       	cpi	r24, 0x01	; 1
    24cc:	69 f4       	brne	.+26     	; 0x24e8 <LCD_enu_ClearRow+0xb8>
        {
            enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_FIRST_LINE_BASE_ADDRESS);
    24ce:	8c 81       	ldd	r24, Y+4	; 0x04
    24d0:	88 2f       	mov	r24, r24
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	07 96       	adiw	r24, 0x07	; 7
    24d6:	82 95       	swap	r24
    24d8:	92 95       	swap	r25
    24da:	90 7f       	andi	r25, 0xF0	; 240
    24dc:	98 27       	eor	r25, r24
    24de:	80 7f       	andi	r24, 0xF0	; 240
    24e0:	98 27       	eor	r25, r24
    24e2:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>
    24e6:	0f c0       	rjmp	.+30     	; 0x2506 <LCD_enu_ClearRow+0xd6>
        }
        else if(Copy_u8_Row == 2)
    24e8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ea:	82 30       	cpi	r24, 0x02	; 2
    24ec:	61 f4       	brne	.+24     	; 0x2506 <LCD_enu_ClearRow+0xd6>
        {
            enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_SECOND_LINE_BASE_ADDRESS);
    24ee:	8c 81       	ldd	r24, Y+4	; 0x04
    24f0:	88 2f       	mov	r24, r24
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	0b 96       	adiw	r24, 0x0b	; 11
    24f6:	82 95       	swap	r24
    24f8:	92 95       	swap	r25
    24fa:	90 7f       	andi	r25, 0xF0	; 240
    24fc:	98 27       	eor	r25, r24
    24fe:	80 7f       	andi	r24, 0xF0	; 240
    2500:	98 27       	eor	r25, r24
    2502:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>

        }

        Local_u8_ErrorFlag = ES_OK;
    2506:	1a 82       	std	Y+2, r1	; 0x02
    2508:	02 c0       	rjmp	.+4      	; 0x250e <LCD_enu_ClearRow+0xde>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    250a:	82 e0       	ldi	r24, 0x02	; 2
    250c:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_u8_ErrorFlag;
    250e:	8a 81       	ldd	r24, Y+2	; 0x02

}
    2510:	0f 90       	pop	r0
    2512:	0f 90       	pop	r0
    2514:	0f 90       	pop	r0
    2516:	0f 90       	pop	r0
    2518:	cf 91       	pop	r28
    251a:	df 91       	pop	r29
    251c:	08 95       	ret

0000251e <LCD_enu_DrawSpecialCharacter>:

extern ErrorState_t LCD_enu_DrawSpecialCharacter(u8* Copy_au8_CharacterCode,u8 Copy_u8_PatternSize, u8 Copy_u8_Startpattern, u8 Copy_u8_Row, u8 Copy_u8_Column,u8 Copy_u8_Page,u8 Copy_u8_PrintingDrection)
{
    251e:	cf 92       	push	r12
    2520:	ef 92       	push	r14
    2522:	0f 93       	push	r16
    2524:	df 93       	push	r29
    2526:	cf 93       	push	r28
    2528:	cd b7       	in	r28, 0x3d	; 61
    252a:	de b7       	in	r29, 0x3e	; 62
    252c:	2e 97       	sbiw	r28, 0x0e	; 14
    252e:	0f b6       	in	r0, 0x3f	; 63
    2530:	f8 94       	cli
    2532:	de bf       	out	0x3e, r29	; 62
    2534:	0f be       	out	0x3f, r0	; 63
    2536:	cd bf       	out	0x3d, r28	; 61
    2538:	9e 83       	std	Y+6, r25	; 0x06
    253a:	8d 83       	std	Y+5, r24	; 0x05
    253c:	6f 83       	std	Y+7, r22	; 0x07
    253e:	48 87       	std	Y+8, r20	; 0x08
    2540:	29 87       	std	Y+9, r18	; 0x09
    2542:	0a 87       	std	Y+10, r16	; 0x0a
    2544:	eb 86       	std	Y+11, r14	; 0x0b
    2546:	cc 86       	std	Y+12, r12	; 0x0c
    u8 Local_u8_ErorrFlag = ES_NOK;
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	8c 83       	std	Y+4, r24	; 0x04
    
    if(Copy_au8_CharacterCode)
    254c:	8d 81       	ldd	r24, Y+5	; 0x05
    254e:	9e 81       	ldd	r25, Y+6	; 0x06
    2550:	00 97       	sbiw	r24, 0x00	; 0
    2552:	09 f4       	brne	.+2      	; 0x2556 <LCD_enu_DrawSpecialCharacter+0x38>
    2554:	b3 c0       	rjmp	.+358    	; 0x26bc <LCD_enu_DrawSpecialCharacter+0x19e>
    {
        u8* Local_pu8_PassingPointer = NULL;
    2556:	1b 82       	std	Y+3, r1	; 0x03
    2558:	1a 82       	std	Y+2, r1	; 0x02
        u8 Local_u8_LoopCounter = 0;
    255a:	19 82       	std	Y+1, r1	; 0x01

        if(((Copy_u8_PatternSize >= 1) && (Copy_u8_PatternSize <= 8)) && (Copy_u8_Startpattern <= LCD_CUSTOM_PATTERN_7) && ((LCD_CUSTOM_PATTERN_7  - Copy_u8_Startpattern + 1) >= Copy_u8_PatternSize) && ((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16)) && (Copy_u8_PrintingDrection <= LCD_AC_INC) && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES))
    255c:	8f 81       	ldd	r24, Y+7	; 0x07
    255e:	88 23       	and	r24, r24
    2560:	09 f4       	brne	.+2      	; 0x2564 <LCD_enu_DrawSpecialCharacter+0x46>
    2562:	a9 c0       	rjmp	.+338    	; 0x26b6 <LCD_enu_DrawSpecialCharacter+0x198>
    2564:	8f 81       	ldd	r24, Y+7	; 0x07
    2566:	89 30       	cpi	r24, 0x09	; 9
    2568:	08 f0       	brcs	.+2      	; 0x256c <LCD_enu_DrawSpecialCharacter+0x4e>
    256a:	a5 c0       	rjmp	.+330    	; 0x26b6 <LCD_enu_DrawSpecialCharacter+0x198>
    256c:	88 85       	ldd	r24, Y+8	; 0x08
    256e:	88 30       	cpi	r24, 0x08	; 8
    2570:	08 f0       	brcs	.+2      	; 0x2574 <LCD_enu_DrawSpecialCharacter+0x56>
    2572:	a1 c0       	rjmp	.+322    	; 0x26b6 <LCD_enu_DrawSpecialCharacter+0x198>
    2574:	88 85       	ldd	r24, Y+8	; 0x08
    2576:	28 2f       	mov	r18, r24
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	88 e0       	ldi	r24, 0x08	; 8
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	ac 01       	movw	r20, r24
    2580:	42 1b       	sub	r20, r18
    2582:	53 0b       	sbc	r21, r19
    2584:	9a 01       	movw	r18, r20
    2586:	8f 81       	ldd	r24, Y+7	; 0x07
    2588:	88 2f       	mov	r24, r24
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	28 17       	cp	r18, r24
    258e:	39 07       	cpc	r19, r25
    2590:	0c f4       	brge	.+2      	; 0x2594 <LCD_enu_DrawSpecialCharacter+0x76>
    2592:	91 c0       	rjmp	.+290    	; 0x26b6 <LCD_enu_DrawSpecialCharacter+0x198>
    2594:	89 85       	ldd	r24, Y+9	; 0x09
    2596:	88 23       	and	r24, r24
    2598:	09 f4       	brne	.+2      	; 0x259c <LCD_enu_DrawSpecialCharacter+0x7e>
    259a:	8d c0       	rjmp	.+282    	; 0x26b6 <LCD_enu_DrawSpecialCharacter+0x198>
    259c:	89 85       	ldd	r24, Y+9	; 0x09
    259e:	83 30       	cpi	r24, 0x03	; 3
    25a0:	08 f0       	brcs	.+2      	; 0x25a4 <LCD_enu_DrawSpecialCharacter+0x86>
    25a2:	89 c0       	rjmp	.+274    	; 0x26b6 <LCD_enu_DrawSpecialCharacter+0x198>
    25a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    25a6:	88 23       	and	r24, r24
    25a8:	09 f4       	brne	.+2      	; 0x25ac <LCD_enu_DrawSpecialCharacter+0x8e>
    25aa:	85 c0       	rjmp	.+266    	; 0x26b6 <LCD_enu_DrawSpecialCharacter+0x198>
    25ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    25ae:	81 31       	cpi	r24, 0x11	; 17
    25b0:	08 f0       	brcs	.+2      	; 0x25b4 <LCD_enu_DrawSpecialCharacter+0x96>
    25b2:	81 c0       	rjmp	.+258    	; 0x26b6 <LCD_enu_DrawSpecialCharacter+0x198>
    25b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    25b6:	82 30       	cpi	r24, 0x02	; 2
    25b8:	08 f0       	brcs	.+2      	; 0x25bc <LCD_enu_DrawSpecialCharacter+0x9e>
    25ba:	7d c0       	rjmp	.+250    	; 0x26b6 <LCD_enu_DrawSpecialCharacter+0x198>
    25bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    25be:	85 30       	cpi	r24, 0x05	; 5
    25c0:	08 f0       	brcs	.+2      	; 0x25c4 <LCD_enu_DrawSpecialCharacter+0xa6>
    25c2:	79 c0       	rjmp	.+242    	; 0x26b6 <LCD_enu_DrawSpecialCharacter+0x198>
        {
            //Adding Each distinct Custom character to CGRAM
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize*8; Local_u8_LoopCounter += 8)
    25c4:	19 82       	std	Y+1, r1	; 0x01
    25c6:	19 c0       	rjmp	.+50     	; 0x25fa <LCD_enu_DrawSpecialCharacter+0xdc>
            {
                Local_pu8_PassingPointer = Copy_au8_CharacterCode + Local_u8_LoopCounter;
    25c8:	89 81       	ldd	r24, Y+1	; 0x01
    25ca:	28 2f       	mov	r18, r24
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	8d 81       	ldd	r24, Y+5	; 0x05
    25d0:	9e 81       	ldd	r25, Y+6	; 0x06
    25d2:	82 0f       	add	r24, r18
    25d4:	93 1f       	adc	r25, r19
    25d6:	9b 83       	std	Y+3, r25	; 0x03
    25d8:	8a 83       	std	Y+2, r24	; 0x02
                enu_AddCustomCharacter(Local_pu8_PassingPointer,Copy_u8_Startpattern + (Local_u8_LoopCounter/8));
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	98 2f       	mov	r25, r24
    25de:	96 95       	lsr	r25
    25e0:	96 95       	lsr	r25
    25e2:	96 95       	lsr	r25
    25e4:	88 85       	ldd	r24, Y+8	; 0x08
    25e6:	29 2f       	mov	r18, r25
    25e8:	28 0f       	add	r18, r24
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	9b 81       	ldd	r25, Y+3	; 0x03
    25ee:	62 2f       	mov	r22, r18
    25f0:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <enu_AddCustomCharacter>
        u8 Local_u8_LoopCounter = 0;

        if(((Copy_u8_PatternSize >= 1) && (Copy_u8_PatternSize <= 8)) && (Copy_u8_Startpattern <= LCD_CUSTOM_PATTERN_7) && ((LCD_CUSTOM_PATTERN_7  - Copy_u8_Startpattern + 1) >= Copy_u8_PatternSize) && ((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16)) && (Copy_u8_PrintingDrection <= LCD_AC_INC) && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES))
        {
            //Adding Each distinct Custom character to CGRAM
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize*8; Local_u8_LoopCounter += 8)
    25f4:	89 81       	ldd	r24, Y+1	; 0x01
    25f6:	88 5f       	subi	r24, 0xF8	; 248
    25f8:	89 83       	std	Y+1, r24	; 0x01
    25fa:	89 81       	ldd	r24, Y+1	; 0x01
    25fc:	28 2f       	mov	r18, r24
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	8f 81       	ldd	r24, Y+7	; 0x07
    2602:	88 2f       	mov	r24, r24
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	88 0f       	add	r24, r24
    2608:	99 1f       	adc	r25, r25
    260a:	88 0f       	add	r24, r24
    260c:	99 1f       	adc	r25, r25
    260e:	88 0f       	add	r24, r24
    2610:	99 1f       	adc	r25, r25
    2612:	28 17       	cp	r18, r24
    2614:	39 07       	cpc	r19, r25
    2616:	c4 f2       	brlt	.-80     	; 0x25c8 <LCD_enu_DrawSpecialCharacter+0xaa>
                Local_pu8_PassingPointer = Copy_au8_CharacterCode + Local_u8_LoopCounter;
                enu_AddCustomCharacter(Local_pu8_PassingPointer,Copy_u8_Startpattern + (Local_u8_LoopCounter/8));
            }

            //Choosing IR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	61 e0       	ldi	r22, 0x01	; 1
    261c:	40 e0       	ldi	r20, 0x00	; 0
    261e:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
            
            //Chaninging AC direction with Entry Mode Set command
            switch (Copy_u8_PrintingDrection)
    2622:	8c 85       	ldd	r24, Y+12	; 0x0c
    2624:	28 2f       	mov	r18, r24
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	3e 87       	std	Y+14, r19	; 0x0e
    262a:	2d 87       	std	Y+13, r18	; 0x0d
    262c:	4d 85       	ldd	r20, Y+13	; 0x0d
    262e:	5e 85       	ldd	r21, Y+14	; 0x0e
    2630:	41 15       	cp	r20, r1
    2632:	51 05       	cpc	r21, r1
    2634:	49 f0       	breq	.+18     	; 0x2648 <LCD_enu_DrawSpecialCharacter+0x12a>
    2636:	8d 85       	ldd	r24, Y+13	; 0x0d
    2638:	9e 85       	ldd	r25, Y+14	; 0x0e
    263a:	81 30       	cpi	r24, 0x01	; 1
    263c:	91 05       	cpc	r25, r1
    263e:	39 f4       	brne	.+14     	; 0x264e <LCD_enu_DrawSpecialCharacter+0x130>
            {
                case LCD_AC_INC:
                enu_PassByteAndLatch(0x06);
    2640:	86 e0       	ldi	r24, 0x06	; 6
    2642:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>
    2646:	03 c0       	rjmp	.+6      	; 0x264e <LCD_enu_DrawSpecialCharacter+0x130>
                break;
            
                case LCD_AC_DEC:
                enu_PassByteAndLatch(0x04);
    2648:	84 e0       	ldi	r24, 0x04	; 4
    264a:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>
                default:
                break;
            }

            //Choosing IR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	61 e0       	ldi	r22, 0x01	; 1
    2652:	40 e0       	ldi	r20, 0x00	; 0
    2654:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
            
            //Placing Cursor in the intended Position
            enu_PassByteAndLatch( LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));
    2658:	8b 85       	ldd	r24, Y+11	; 0x0b
    265a:	88 2f       	mov	r24, r24
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	9c 01       	movw	r18, r24
    2660:	21 50       	subi	r18, 0x01	; 1
    2662:	30 40       	sbci	r19, 0x00	; 0
    2664:	89 85       	ldd	r24, Y+9	; 0x09
    2666:	88 2f       	mov	r24, r24
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	01 97       	sbiw	r24, 0x01	; 1
    266c:	88 0f       	add	r24, r24
    266e:	99 1f       	adc	r25, r25
    2670:	88 0f       	add	r24, r24
    2672:	99 1f       	adc	r25, r25
    2674:	82 0f       	add	r24, r18
    2676:	93 1f       	adc	r25, r19
    2678:	82 95       	swap	r24
    267a:	92 95       	swap	r25
    267c:	90 7f       	andi	r25, 0xF0	; 240
    267e:	98 27       	eor	r25, r24
    2680:	80 7f       	andi	r24, 0xF0	; 240
    2682:	98 27       	eor	r25, r24
    2684:	98 2f       	mov	r25, r24
    2686:	8a 85       	ldd	r24, Y+10	; 0x0a
    2688:	89 0f       	add	r24, r25
    268a:	81 58       	subi	r24, 0x81	; 129
    268c:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>


            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    2690:	81 e0       	ldi	r24, 0x01	; 1
    2692:	61 e0       	ldi	r22, 0x01	; 1
    2694:	41 e0       	ldi	r20, 0x01	; 1
    2696:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
            
            //Printing the special character
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize; Local_u8_LoopCounter++)
    269a:	19 82       	std	Y+1, r1	; 0x01
    269c:	06 c0       	rjmp	.+12     	; 0x26aa <LCD_enu_DrawSpecialCharacter+0x18c>
            {
                enu_PassByteAndLatch(Local_u8_LoopCounter);
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>

            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
            
            //Printing the special character
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize; Local_u8_LoopCounter++)
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
    26a6:	8f 5f       	subi	r24, 0xFF	; 255
    26a8:	89 83       	std	Y+1, r24	; 0x01
    26aa:	99 81       	ldd	r25, Y+1	; 0x01
    26ac:	8f 81       	ldd	r24, Y+7	; 0x07
    26ae:	98 17       	cp	r25, r24
    26b0:	b0 f3       	brcs	.-20     	; 0x269e <LCD_enu_DrawSpecialCharacter+0x180>
            {
                enu_PassByteAndLatch(Local_u8_LoopCounter);

            }
            
            Local_u8_ErorrFlag = ES_OK;
    26b2:	1c 82       	std	Y+4, r1	; 0x04
    26b4:	05 c0       	rjmp	.+10     	; 0x26c0 <LCD_enu_DrawSpecialCharacter+0x1a2>
        }
        else
        {
            Local_u8_ErorrFlag = ES_OUT_OF_RANGE;
    26b6:	82 e0       	ldi	r24, 0x02	; 2
    26b8:	8c 83       	std	Y+4, r24	; 0x04
    26ba:	02 c0       	rjmp	.+4      	; 0x26c0 <LCD_enu_DrawSpecialCharacter+0x1a2>
        

    }
    else
    {
        Local_u8_ErorrFlag = ES_NULL_POINTER;
    26bc:	83 e0       	ldi	r24, 0x03	; 3
    26be:	8c 83       	std	Y+4, r24	; 0x04
    }


    return Local_u8_ErorrFlag;
    26c0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    26c2:	2e 96       	adiw	r28, 0x0e	; 14
    26c4:	0f b6       	in	r0, 0x3f	; 63
    26c6:	f8 94       	cli
    26c8:	de bf       	out	0x3e, r29	; 62
    26ca:	0f be       	out	0x3f, r0	; 63
    26cc:	cd bf       	out	0x3d, r28	; 61
    26ce:	cf 91       	pop	r28
    26d0:	df 91       	pop	r29
    26d2:	0f 91       	pop	r16
    26d4:	ef 90       	pop	r14
    26d6:	cf 90       	pop	r12
    26d8:	08 95       	ret

000026da <LCD_enu_WriteIntegerNum>:

extern ErrorState_t LCD_enu_WriteIntegerNum(s32 Copy_s32_Num,u8 Copy_u8_Row,u8 Copy_u8_Column,u8 Copy_u8_Page)
{
    26da:	0f 93       	push	r16
    26dc:	df 93       	push	r29
    26de:	cf 93       	push	r28
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
    26e4:	2e 97       	sbiw	r28, 0x0e	; 14
    26e6:	0f b6       	in	r0, 0x3f	; 63
    26e8:	f8 94       	cli
    26ea:	de bf       	out	0x3e, r29	; 62
    26ec:	0f be       	out	0x3f, r0	; 63
    26ee:	cd bf       	out	0x3d, r28	; 61
    26f0:	68 87       	std	Y+8, r22	; 0x08
    26f2:	79 87       	std	Y+9, r23	; 0x09
    26f4:	8a 87       	std	Y+10, r24	; 0x0a
    26f6:	9b 87       	std	Y+11, r25	; 0x0b
    26f8:	4c 87       	std	Y+12, r20	; 0x0c
    26fa:	2d 87       	std	Y+13, r18	; 0x0d
    26fc:	0e 87       	std	Y+14, r16	; 0x0e
    u8 Local_u8_ErrorFlag = ES_NOK;
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	8b 83       	std	Y+3, r24	; 0x03
    s32 Local_u32_TempVariable;
    u8 Local_u8_DigitCount = 0;
    2702:	1a 82       	std	Y+2, r1	; 0x02
    u8 local_u8_NegativeFlag = False;
    2704:	19 82       	std	Y+1, r1	; 0x01

    //Handling the negative case
    if(Copy_s32_Num < 0)
    2706:	88 85       	ldd	r24, Y+8	; 0x08
    2708:	99 85       	ldd	r25, Y+9	; 0x09
    270a:	aa 85       	ldd	r26, Y+10	; 0x0a
    270c:	bb 85       	ldd	r27, Y+11	; 0x0b
    270e:	bb 23       	and	r27, r27
    2710:	8c f4       	brge	.+34     	; 0x2734 <LCD_enu_WriteIntegerNum+0x5a>
    {
        local_u8_NegativeFlag = True;
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	89 83       	std	Y+1, r24	; 0x01
        Copy_s32_Num *= -1;
    2716:	88 85       	ldd	r24, Y+8	; 0x08
    2718:	99 85       	ldd	r25, Y+9	; 0x09
    271a:	aa 85       	ldd	r26, Y+10	; 0x0a
    271c:	bb 85       	ldd	r27, Y+11	; 0x0b
    271e:	b0 95       	com	r27
    2720:	a0 95       	com	r26
    2722:	90 95       	com	r25
    2724:	81 95       	neg	r24
    2726:	9f 4f       	sbci	r25, 0xFF	; 255
    2728:	af 4f       	sbci	r26, 0xFF	; 255
    272a:	bf 4f       	sbci	r27, 0xFF	; 255
    272c:	88 87       	std	Y+8, r24	; 0x08
    272e:	99 87       	std	Y+9, r25	; 0x09
    2730:	aa 87       	std	Y+10, r26	; 0x0a
    2732:	bb 87       	std	Y+11, r27	; 0x0b
    }

    Local_u32_TempVariable = Copy_s32_Num;
    2734:	88 85       	ldd	r24, Y+8	; 0x08
    2736:	99 85       	ldd	r25, Y+9	; 0x09
    2738:	aa 85       	ldd	r26, Y+10	; 0x0a
    273a:	bb 85       	ldd	r27, Y+11	; 0x0b
    273c:	8c 83       	std	Y+4, r24	; 0x04
    273e:	9d 83       	std	Y+5, r25	; 0x05
    2740:	ae 83       	std	Y+6, r26	; 0x06
    2742:	bf 83       	std	Y+7, r27	; 0x07
    //Counting Number digits 
    do
    {
        Local_u8_DigitCount++;
    2744:	8a 81       	ldd	r24, Y+2	; 0x02
    2746:	8f 5f       	subi	r24, 0xFF	; 255
    2748:	8a 83       	std	Y+2, r24	; 0x02
        Local_u32_TempVariable  /= 10;
    274a:	8c 81       	ldd	r24, Y+4	; 0x04
    274c:	9d 81       	ldd	r25, Y+5	; 0x05
    274e:	ae 81       	ldd	r26, Y+6	; 0x06
    2750:	bf 81       	ldd	r27, Y+7	; 0x07
    2752:	2a e0       	ldi	r18, 0x0A	; 10
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	40 e0       	ldi	r20, 0x00	; 0
    2758:	50 e0       	ldi	r21, 0x00	; 0
    275a:	bc 01       	movw	r22, r24
    275c:	cd 01       	movw	r24, r26
    275e:	0e 94 d5 22 	call	0x45aa	; 0x45aa <__divmodsi4>
    2762:	da 01       	movw	r26, r20
    2764:	c9 01       	movw	r24, r18
    2766:	8c 83       	std	Y+4, r24	; 0x04
    2768:	9d 83       	std	Y+5, r25	; 0x05
    276a:	ae 83       	std	Y+6, r26	; 0x06
    276c:	bf 83       	std	Y+7, r27	; 0x07

    }while(Local_u32_TempVariable);
    276e:	8c 81       	ldd	r24, Y+4	; 0x04
    2770:	9d 81       	ldd	r25, Y+5	; 0x05
    2772:	ae 81       	ldd	r26, Y+6	; 0x06
    2774:	bf 81       	ldd	r27, Y+7	; 0x07
    2776:	00 97       	sbiw	r24, 0x00	; 0
    2778:	a1 05       	cpc	r26, r1
    277a:	b1 05       	cpc	r27, r1
    277c:	19 f7       	brne	.-58     	; 0x2744 <LCD_enu_WriteIntegerNum+0x6a>



    if(((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16))  && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES) && (Local_u8_DigitCount <= LCD_MAX_INTEGER_LENGTH))
    277e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2780:	88 23       	and	r24, r24
    2782:	09 f4       	brne	.+2      	; 0x2786 <LCD_enu_WriteIntegerNum+0xac>
    2784:	6b c0       	rjmp	.+214    	; 0x285c <LCD_enu_WriteIntegerNum+0x182>
    2786:	8c 85       	ldd	r24, Y+12	; 0x0c
    2788:	83 30       	cpi	r24, 0x03	; 3
    278a:	08 f0       	brcs	.+2      	; 0x278e <LCD_enu_WriteIntegerNum+0xb4>
    278c:	67 c0       	rjmp	.+206    	; 0x285c <LCD_enu_WriteIntegerNum+0x182>
    278e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2790:	88 23       	and	r24, r24
    2792:	09 f4       	brne	.+2      	; 0x2796 <LCD_enu_WriteIntegerNum+0xbc>
    2794:	63 c0       	rjmp	.+198    	; 0x285c <LCD_enu_WriteIntegerNum+0x182>
    2796:	8d 85       	ldd	r24, Y+13	; 0x0d
    2798:	81 31       	cpi	r24, 0x11	; 17
    279a:	08 f0       	brcs	.+2      	; 0x279e <LCD_enu_WriteIntegerNum+0xc4>
    279c:	5f c0       	rjmp	.+190    	; 0x285c <LCD_enu_WriteIntegerNum+0x182>
    279e:	8e 85       	ldd	r24, Y+14	; 0x0e
    27a0:	85 30       	cpi	r24, 0x05	; 5
    27a2:	08 f0       	brcs	.+2      	; 0x27a6 <LCD_enu_WriteIntegerNum+0xcc>
    27a4:	5b c0       	rjmp	.+182    	; 0x285c <LCD_enu_WriteIntegerNum+0x182>
    27a6:	8a 81       	ldd	r24, Y+2	; 0x02
    27a8:	81 31       	cpi	r24, 0x11	; 17
    27aa:	08 f0       	brcs	.+2      	; 0x27ae <LCD_enu_WriteIntegerNum+0xd4>
    27ac:	57 c0       	rjmp	.+174    	; 0x285c <LCD_enu_WriteIntegerNum+0x182>
    {
        Local_u32_TempVariable = Copy_s32_Num;
    27ae:	88 85       	ldd	r24, Y+8	; 0x08
    27b0:	99 85       	ldd	r25, Y+9	; 0x09
    27b2:	aa 85       	ldd	r26, Y+10	; 0x0a
    27b4:	bb 85       	ldd	r27, Y+11	; 0x0b
    27b6:	8c 83       	std	Y+4, r24	; 0x04
    27b8:	9d 83       	std	Y+5, r25	; 0x05
    27ba:	ae 83       	std	Y+6, r26	; 0x06
    27bc:	bf 83       	std	Y+7, r27	; 0x07
        enu_ReverseInteger(&Local_u32_TempVariable);
    27be:	ce 01       	movw	r24, r28
    27c0:	04 96       	adiw	r24, 0x04	; 4
    27c2:	0e 94 99 18 	call	0x3132	; 0x3132 <enu_ReverseInteger>

        //Choosing IR
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN,DIO_LOW);
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	61 e0       	ldi	r22, 0x01	; 1
    27ca:	40 e0       	ldi	r20, 0x00	; 0
    27cc:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
        
        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN,DIO_HIGH);
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	61 e0       	ldi	r22, 0x01	; 1
    27d4:	41 e0       	ldi	r20, 0x01	; 1
    27d6:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
        //Printing Negative Sign
        if(local_u8_NegativeFlag)
    27da:	89 81       	ldd	r24, Y+1	; 0x01
    27dc:	88 23       	and	r24, r24
    27de:	51 f1       	breq	.+84     	; 0x2834 <LCD_enu_WriteIntegerNum+0x15a>
        {
            enu_PassByteAndLatch('-');
    27e0:	8d e2       	ldi	r24, 0x2D	; 45
    27e2:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>
    27e6:	26 c0       	rjmp	.+76     	; 0x2834 <LCD_enu_WriteIntegerNum+0x15a>
        }
        //Printing one digit at a time
        while (Local_u32_TempVariable)
        {
            enu_PassByteAndLatch((Local_u32_TempVariable % 10) + 48);
    27e8:	8c 81       	ldd	r24, Y+4	; 0x04
    27ea:	9d 81       	ldd	r25, Y+5	; 0x05
    27ec:	ae 81       	ldd	r26, Y+6	; 0x06
    27ee:	bf 81       	ldd	r27, Y+7	; 0x07
    27f0:	2a e0       	ldi	r18, 0x0A	; 10
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	40 e0       	ldi	r20, 0x00	; 0
    27f6:	50 e0       	ldi	r21, 0x00	; 0
    27f8:	bc 01       	movw	r22, r24
    27fa:	cd 01       	movw	r24, r26
    27fc:	0e 94 d5 22 	call	0x45aa	; 0x45aa <__divmodsi4>
    2800:	dc 01       	movw	r26, r24
    2802:	cb 01       	movw	r24, r22
    2804:	80 5d       	subi	r24, 0xD0	; 208
    2806:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>
            Local_u32_TempVariable /= 10;
    280a:	8c 81       	ldd	r24, Y+4	; 0x04
    280c:	9d 81       	ldd	r25, Y+5	; 0x05
    280e:	ae 81       	ldd	r26, Y+6	; 0x06
    2810:	bf 81       	ldd	r27, Y+7	; 0x07
    2812:	2a e0       	ldi	r18, 0x0A	; 10
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	40 e0       	ldi	r20, 0x00	; 0
    2818:	50 e0       	ldi	r21, 0x00	; 0
    281a:	bc 01       	movw	r22, r24
    281c:	cd 01       	movw	r24, r26
    281e:	0e 94 d5 22 	call	0x45aa	; 0x45aa <__divmodsi4>
    2822:	da 01       	movw	r26, r20
    2824:	c9 01       	movw	r24, r18
    2826:	8c 83       	std	Y+4, r24	; 0x04
    2828:	9d 83       	std	Y+5, r25	; 0x05
    282a:	ae 83       	std	Y+6, r26	; 0x06
    282c:	bf 83       	std	Y+7, r27	; 0x07
            Local_u8_DigitCount--;
    282e:	8a 81       	ldd	r24, Y+2	; 0x02
    2830:	81 50       	subi	r24, 0x01	; 1
    2832:	8a 83       	std	Y+2, r24	; 0x02
        if(local_u8_NegativeFlag)
        {
            enu_PassByteAndLatch('-');
        }
        //Printing one digit at a time
        while (Local_u32_TempVariable)
    2834:	8c 81       	ldd	r24, Y+4	; 0x04
    2836:	9d 81       	ldd	r25, Y+5	; 0x05
    2838:	ae 81       	ldd	r26, Y+6	; 0x06
    283a:	bf 81       	ldd	r27, Y+7	; 0x07
    283c:	00 97       	sbiw	r24, 0x00	; 0
    283e:	a1 05       	cpc	r26, r1
    2840:	b1 05       	cpc	r27, r1
    2842:	91 f6       	brne	.-92     	; 0x27e8 <LCD_enu_WriteIntegerNum+0x10e>
    2844:	06 c0       	rjmp	.+12     	; 0x2852 <LCD_enu_WriteIntegerNum+0x178>
            Local_u8_DigitCount--;
        }
        //Printing any trail zeroes that might have got lost when the number was reversed
        while (Local_u8_DigitCount)
        {
            enu_PassByteAndLatch('0');
    2846:	80 e3       	ldi	r24, 0x30	; 48
    2848:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>
            Local_u8_DigitCount--;
    284c:	8a 81       	ldd	r24, Y+2	; 0x02
    284e:	81 50       	subi	r24, 0x01	; 1
    2850:	8a 83       	std	Y+2, r24	; 0x02
            enu_PassByteAndLatch((Local_u32_TempVariable % 10) + 48);
            Local_u32_TempVariable /= 10;
            Local_u8_DigitCount--;
        }
        //Printing any trail zeroes that might have got lost when the number was reversed
        while (Local_u8_DigitCount)
    2852:	8a 81       	ldd	r24, Y+2	; 0x02
    2854:	88 23       	and	r24, r24
    2856:	b9 f7       	brne	.-18     	; 0x2846 <LCD_enu_WriteIntegerNum+0x16c>
        }
        
        
        
        
        Local_u8_ErrorFlag = ES_OK;
    2858:	1b 82       	std	Y+3, r1	; 0x03
    285a:	02 c0       	rjmp	.+4      	; 0x2860 <LCD_enu_WriteIntegerNum+0x186>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    285c:	82 e0       	ldi	r24, 0x02	; 2
    285e:	8b 83       	std	Y+3, r24	; 0x03
    }
    


    return Local_u8_ErrorFlag;
    2860:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2862:	2e 96       	adiw	r28, 0x0e	; 14
    2864:	0f b6       	in	r0, 0x3f	; 63
    2866:	f8 94       	cli
    2868:	de bf       	out	0x3e, r29	; 62
    286a:	0f be       	out	0x3f, r0	; 63
    286c:	cd bf       	out	0x3d, r28	; 61
    286e:	cf 91       	pop	r28
    2870:	df 91       	pop	r29
    2872:	0f 91       	pop	r16
    2874:	08 95       	ret

00002876 <LCD_enu_WriteFloatNum>:

extern ErrorState_t LCD_enu_WriteFloatNum(f32 Copy_f32_Num, u8 Copy_u8_Row,u8 Copy_u8_Column,u8 Copy_u8_Page)
{
    2876:	0f 93       	push	r16
    2878:	df 93       	push	r29
    287a:	cf 93       	push	r28
    287c:	cd b7       	in	r28, 0x3d	; 61
    287e:	de b7       	in	r29, 0x3e	; 62
    2880:	63 97       	sbiw	r28, 0x13	; 19
    2882:	0f b6       	in	r0, 0x3f	; 63
    2884:	f8 94       	cli
    2886:	de bf       	out	0x3e, r29	; 62
    2888:	0f be       	out	0x3f, r0	; 63
    288a:	cd bf       	out	0x3d, r28	; 61
    288c:	6d 87       	std	Y+13, r22	; 0x0d
    288e:	7e 87       	std	Y+14, r23	; 0x0e
    2890:	8f 87       	std	Y+15, r24	; 0x0f
    2892:	98 8b       	std	Y+16, r25	; 0x10
    2894:	49 8b       	std	Y+17, r20	; 0x11
    2896:	2a 8b       	std	Y+18, r18	; 0x12
    2898:	0b 8b       	std	Y+19, r16	; 0x13
    u8 Local_u8_ErrorFlag = ES_NOK;
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	88 87       	std	Y+8, r24	; 0x08

    //Temp Variables
    u32 Local_u32_WholeDigits;
    f32 Local_f32_DecimalDigits;
    //Counters
    u8 Local_u8_WholeDigitCount = 0;
    289e:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8_DecimalDigitCount = 0;
    28a0:	1a 82       	std	Y+2, r1	; 0x02
    //Flags
    u8 local_u8_NegativeFlag = False;
    28a2:	19 82       	std	Y+1, r1	; 0x01

    //Handling the negative case
    if(Copy_f32_Num < 0)
    28a4:	6d 85       	ldd	r22, Y+13	; 0x0d
    28a6:	7e 85       	ldd	r23, Y+14	; 0x0e
    28a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    28aa:	98 89       	ldd	r25, Y+16	; 0x10
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	40 e0       	ldi	r20, 0x00	; 0
    28b2:	50 e0       	ldi	r21, 0x00	; 0
    28b4:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    28b8:	88 23       	and	r24, r24
    28ba:	5c f4       	brge	.+22     	; 0x28d2 <LCD_enu_WriteFloatNum+0x5c>
    {
        local_u8_NegativeFlag = True;
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	89 83       	std	Y+1, r24	; 0x01
        Copy_f32_Num *= -1;
    28c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    28c4:	af 85       	ldd	r26, Y+15	; 0x0f
    28c6:	b8 89       	ldd	r27, Y+16	; 0x10
    28c8:	b0 58       	subi	r27, 0x80	; 128
    28ca:	8d 87       	std	Y+13, r24	; 0x0d
    28cc:	9e 87       	std	Y+14, r25	; 0x0e
    28ce:	af 87       	std	Y+15, r26	; 0x0f
    28d0:	b8 8b       	std	Y+16, r27	; 0x10
    }


    Local_u32_WholeDigits = Copy_f32_Num;
    28d2:	6d 85       	ldd	r22, Y+13	; 0x0d
    28d4:	7e 85       	ldd	r23, Y+14	; 0x0e
    28d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    28d8:	98 89       	ldd	r25, Y+16	; 0x10
    28da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	89 87       	std	Y+9, r24	; 0x09
    28e4:	9a 87       	std	Y+10, r25	; 0x0a
    28e6:	ab 87       	std	Y+11, r26	; 0x0b
    28e8:	bc 87       	std	Y+12, r27	; 0x0c

    Local_f32_DecimalDigits = Copy_f32_Num - (f32)(Local_u32_WholeDigits);
    28ea:	89 85       	ldd	r24, Y+9	; 0x09
    28ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ee:	ab 85       	ldd	r26, Y+11	; 0x0b
    28f0:	bc 85       	ldd	r27, Y+12	; 0x0c
    28f2:	bc 01       	movw	r22, r24
    28f4:	cd 01       	movw	r24, r26
    28f6:	0e 94 2d 04 	call	0x85a	; 0x85a <__floatunsisf>
    28fa:	9b 01       	movw	r18, r22
    28fc:	ac 01       	movw	r20, r24
    28fe:	6d 85       	ldd	r22, Y+13	; 0x0d
    2900:	7e 85       	ldd	r23, Y+14	; 0x0e
    2902:	8f 85       	ldd	r24, Y+15	; 0x0f
    2904:	98 89       	ldd	r25, Y+16	; 0x10
    2906:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	8c 83       	std	Y+4, r24	; 0x04
    2910:	9d 83       	std	Y+5, r25	; 0x05
    2912:	ae 83       	std	Y+6, r26	; 0x06
    2914:	bf 83       	std	Y+7, r27	; 0x07
   
    //Counting whole digits 
    do
    {
        Local_u8_WholeDigitCount++;
    2916:	8b 81       	ldd	r24, Y+3	; 0x03
    2918:	8f 5f       	subi	r24, 0xFF	; 255
    291a:	8b 83       	std	Y+3, r24	; 0x03
        Local_u32_WholeDigits  /= 10;
    291c:	89 85       	ldd	r24, Y+9	; 0x09
    291e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2920:	ab 85       	ldd	r26, Y+11	; 0x0b
    2922:	bc 85       	ldd	r27, Y+12	; 0x0c
    2924:	2a e0       	ldi	r18, 0x0A	; 10
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	40 e0       	ldi	r20, 0x00	; 0
    292a:	50 e0       	ldi	r21, 0x00	; 0
    292c:	bc 01       	movw	r22, r24
    292e:	cd 01       	movw	r24, r26
    2930:	0e 94 b3 22 	call	0x4566	; 0x4566 <__udivmodsi4>
    2934:	da 01       	movw	r26, r20
    2936:	c9 01       	movw	r24, r18
    2938:	89 87       	std	Y+9, r24	; 0x09
    293a:	9a 87       	std	Y+10, r25	; 0x0a
    293c:	ab 87       	std	Y+11, r26	; 0x0b
    293e:	bc 87       	std	Y+12, r27	; 0x0c

    }while(Local_u32_WholeDigits);
    2940:	89 85       	ldd	r24, Y+9	; 0x09
    2942:	9a 85       	ldd	r25, Y+10	; 0x0a
    2944:	ab 85       	ldd	r26, Y+11	; 0x0b
    2946:	bc 85       	ldd	r27, Y+12	; 0x0c
    2948:	00 97       	sbiw	r24, 0x00	; 0
    294a:	a1 05       	cpc	r26, r1
    294c:	b1 05       	cpc	r27, r1
    294e:	19 f7       	brne	.-58     	; 0x2916 <LCD_enu_WriteFloatNum+0xa0>

    
    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	61 e0       	ldi	r22, 0x01	; 1
    2954:	41 e0       	ldi	r20, 0x01	; 1
    2956:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
    //Counting decimal digits
    Local_u32_WholeDigits = 0;
    295a:	19 86       	std	Y+9, r1	; 0x09
    295c:	1a 86       	std	Y+10, r1	; 0x0a
    295e:	1b 86       	std	Y+11, r1	; 0x0b
    2960:	1c 86       	std	Y+12, r1	; 0x0c
    2962:	1f c0       	rjmp	.+62     	; 0x29a2 <LCD_enu_WriteFloatNum+0x12c>
    while((Local_f32_DecimalDigits - (f32)Local_u32_WholeDigits) >= LCD_FLOAT_ERROR)
    {
        Local_f32_DecimalDigits *= 10;
    2964:	6c 81       	ldd	r22, Y+4	; 0x04
    2966:	7d 81       	ldd	r23, Y+5	; 0x05
    2968:	8e 81       	ldd	r24, Y+6	; 0x06
    296a:	9f 81       	ldd	r25, Y+7	; 0x07
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	40 e2       	ldi	r20, 0x20	; 32
    2972:	51 e4       	ldi	r21, 0x41	; 65
    2974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	8c 83       	std	Y+4, r24	; 0x04
    297e:	9d 83       	std	Y+5, r25	; 0x05
    2980:	ae 83       	std	Y+6, r26	; 0x06
    2982:	bf 83       	std	Y+7, r27	; 0x07
        Local_u32_WholeDigits = Local_f32_DecimalDigits;
    2984:	6c 81       	ldd	r22, Y+4	; 0x04
    2986:	7d 81       	ldd	r23, Y+5	; 0x05
    2988:	8e 81       	ldd	r24, Y+6	; 0x06
    298a:	9f 81       	ldd	r25, Y+7	; 0x07
    298c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	89 87       	std	Y+9, r24	; 0x09
    2996:	9a 87       	std	Y+10, r25	; 0x0a
    2998:	ab 87       	std	Y+11, r26	; 0x0b
    299a:	bc 87       	std	Y+12, r27	; 0x0c
        Local_u8_DecimalDigitCount++;
    299c:	8a 81       	ldd	r24, Y+2	; 0x02
    299e:	8f 5f       	subi	r24, 0xFF	; 255
    29a0:	8a 83       	std	Y+2, r24	; 0x02

    
    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    //Counting decimal digits
    Local_u32_WholeDigits = 0;
    while((Local_f32_DecimalDigits - (f32)Local_u32_WholeDigits) >= LCD_FLOAT_ERROR)
    29a2:	89 85       	ldd	r24, Y+9	; 0x09
    29a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a6:	ab 85       	ldd	r26, Y+11	; 0x0b
    29a8:	bc 85       	ldd	r27, Y+12	; 0x0c
    29aa:	bc 01       	movw	r22, r24
    29ac:	cd 01       	movw	r24, r26
    29ae:	0e 94 2d 04 	call	0x85a	; 0x85a <__floatunsisf>
    29b2:	9b 01       	movw	r18, r22
    29b4:	ac 01       	movw	r20, r24
    29b6:	6c 81       	ldd	r22, Y+4	; 0x04
    29b8:	7d 81       	ldd	r23, Y+5	; 0x05
    29ba:	8e 81       	ldd	r24, Y+6	; 0x06
    29bc:	9f 81       	ldd	r25, Y+7	; 0x07
    29be:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	bc 01       	movw	r22, r24
    29c8:	cd 01       	movw	r24, r26
    29ca:	2c ea       	ldi	r18, 0xAC	; 172
    29cc:	35 ec       	ldi	r19, 0xC5	; 197
    29ce:	47 e2       	ldi	r20, 0x27	; 39
    29d0:	57 e3       	ldi	r21, 0x37	; 55
    29d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
    29d6:	88 23       	and	r24, r24
    29d8:	2c f6       	brge	.-118    	; 0x2964 <LCD_enu_WriteFloatNum+0xee>
        Local_u8_DecimalDigitCount++;
        
    
    }

    if(((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16))  && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES) && ((Local_u32_WholeDigits + Local_u8_DecimalDigitCount) <= LCD_MAX_INTEGER_LENGTH))
    29da:	89 89       	ldd	r24, Y+17	; 0x11
    29dc:	88 23       	and	r24, r24
    29de:	09 f4       	brne	.+2      	; 0x29e2 <LCD_enu_WriteFloatNum+0x16c>
    29e0:	fd c0       	rjmp	.+506    	; 0x2bdc <LCD_enu_WriteFloatNum+0x366>
    29e2:	89 89       	ldd	r24, Y+17	; 0x11
    29e4:	83 30       	cpi	r24, 0x03	; 3
    29e6:	08 f0       	brcs	.+2      	; 0x29ea <LCD_enu_WriteFloatNum+0x174>
    29e8:	f9 c0       	rjmp	.+498    	; 0x2bdc <LCD_enu_WriteFloatNum+0x366>
    29ea:	8a 89       	ldd	r24, Y+18	; 0x12
    29ec:	88 23       	and	r24, r24
    29ee:	09 f4       	brne	.+2      	; 0x29f2 <LCD_enu_WriteFloatNum+0x17c>
    29f0:	f5 c0       	rjmp	.+490    	; 0x2bdc <LCD_enu_WriteFloatNum+0x366>
    29f2:	8a 89       	ldd	r24, Y+18	; 0x12
    29f4:	81 31       	cpi	r24, 0x11	; 17
    29f6:	08 f0       	brcs	.+2      	; 0x29fa <LCD_enu_WriteFloatNum+0x184>
    29f8:	f1 c0       	rjmp	.+482    	; 0x2bdc <LCD_enu_WriteFloatNum+0x366>
    29fa:	8b 89       	ldd	r24, Y+19	; 0x13
    29fc:	85 30       	cpi	r24, 0x05	; 5
    29fe:	08 f0       	brcs	.+2      	; 0x2a02 <LCD_enu_WriteFloatNum+0x18c>
    2a00:	ed c0       	rjmp	.+474    	; 0x2bdc <LCD_enu_WriteFloatNum+0x366>
    2a02:	8a 81       	ldd	r24, Y+2	; 0x02
    2a04:	28 2f       	mov	r18, r24
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	40 e0       	ldi	r20, 0x00	; 0
    2a0a:	50 e0       	ldi	r21, 0x00	; 0
    2a0c:	89 85       	ldd	r24, Y+9	; 0x09
    2a0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a10:	ab 85       	ldd	r26, Y+11	; 0x0b
    2a12:	bc 85       	ldd	r27, Y+12	; 0x0c
    2a14:	82 0f       	add	r24, r18
    2a16:	93 1f       	adc	r25, r19
    2a18:	a4 1f       	adc	r26, r20
    2a1a:	b5 1f       	adc	r27, r21
    2a1c:	81 31       	cpi	r24, 0x11	; 17
    2a1e:	91 05       	cpc	r25, r1
    2a20:	a1 05       	cpc	r26, r1
    2a22:	b1 05       	cpc	r27, r1
    2a24:	08 f0       	brcs	.+2      	; 0x2a28 <LCD_enu_WriteFloatNum+0x1b2>
    2a26:	da c0       	rjmp	.+436    	; 0x2bdc <LCD_enu_WriteFloatNum+0x366>
    {
        //Choosing IR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	61 e0       	ldi	r22, 0x01	; 1
    2a2c:	40 e0       	ldi	r20, 0x00	; 0
    2a2e:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
        //Setting the Cursor in position
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));    
    2a32:	8b 89       	ldd	r24, Y+19	; 0x13
    2a34:	88 2f       	mov	r24, r24
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	9c 01       	movw	r18, r24
    2a3a:	21 50       	subi	r18, 0x01	; 1
    2a3c:	30 40       	sbci	r19, 0x00	; 0
    2a3e:	89 89       	ldd	r24, Y+17	; 0x11
    2a40:	88 2f       	mov	r24, r24
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	01 97       	sbiw	r24, 0x01	; 1
    2a46:	88 0f       	add	r24, r24
    2a48:	99 1f       	adc	r25, r25
    2a4a:	88 0f       	add	r24, r24
    2a4c:	99 1f       	adc	r25, r25
    2a4e:	82 0f       	add	r24, r18
    2a50:	93 1f       	adc	r25, r19
    2a52:	82 95       	swap	r24
    2a54:	92 95       	swap	r25
    2a56:	90 7f       	andi	r25, 0xF0	; 240
    2a58:	98 27       	eor	r25, r24
    2a5a:	80 7f       	andi	r24, 0xF0	; 240
    2a5c:	98 27       	eor	r25, r24
    2a5e:	98 2f       	mov	r25, r24
    2a60:	8a 89       	ldd	r24, Y+18	; 0x12
    2a62:	89 0f       	add	r24, r25
    2a64:	81 58       	subi	r24, 0x81	; 129
    2a66:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>
        
        
        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	61 e0       	ldi	r22, 0x01	; 1
    2a6e:	41 e0       	ldi	r20, 0x01	; 1
    2a70:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
        //Printing Negative Sign if exists
        if(local_u8_NegativeFlag)
    2a74:	89 81       	ldd	r24, Y+1	; 0x01
    2a76:	88 23       	and	r24, r24
    2a78:	19 f0       	breq	.+6      	; 0x2a80 <LCD_enu_WriteFloatNum+0x20a>
        {
            enu_PassByteAndLatch('-');
    2a7a:	8d e2       	ldi	r24, 0x2D	; 45
    2a7c:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>
        }

        //A] Printing whole digits 
        Local_u32_WholeDigits = Copy_f32_Num;
    2a80:	6d 85       	ldd	r22, Y+13	; 0x0d
    2a82:	7e 85       	ldd	r23, Y+14	; 0x0e
    2a84:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a86:	98 89       	ldd	r25, Y+16	; 0x10
    2a88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	cb 01       	movw	r24, r22
    2a90:	89 87       	std	Y+9, r24	; 0x09
    2a92:	9a 87       	std	Y+10, r25	; 0x0a
    2a94:	ab 87       	std	Y+11, r26	; 0x0b
    2a96:	bc 87       	std	Y+12, r27	; 0x0c
        enu_ReverseInteger(&Local_u32_WholeDigits);
    2a98:	ce 01       	movw	r24, r28
    2a9a:	09 96       	adiw	r24, 0x09	; 9
    2a9c:	0e 94 99 18 	call	0x3132	; 0x3132 <enu_ReverseInteger>


        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	61 e0       	ldi	r22, 0x01	; 1
    2aa4:	41 e0       	ldi	r20, 0x01	; 1
    2aa6:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
    2aaa:	26 c0       	rjmp	.+76     	; 0x2af8 <LCD_enu_WriteFloatNum+0x282>
        //Printing one digit at a time        
        while(Local_u32_WholeDigits)
        {
            enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
    2aac:	89 85       	ldd	r24, Y+9	; 0x09
    2aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab0:	ab 85       	ldd	r26, Y+11	; 0x0b
    2ab2:	bc 85       	ldd	r27, Y+12	; 0x0c
    2ab4:	2a e0       	ldi	r18, 0x0A	; 10
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	40 e0       	ldi	r20, 0x00	; 0
    2aba:	50 e0       	ldi	r21, 0x00	; 0
    2abc:	bc 01       	movw	r22, r24
    2abe:	cd 01       	movw	r24, r26
    2ac0:	0e 94 b3 22 	call	0x4566	; 0x4566 <__udivmodsi4>
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	80 5d       	subi	r24, 0xD0	; 208
    2aca:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>
            Local_u32_WholeDigits /= 10;
    2ace:	89 85       	ldd	r24, Y+9	; 0x09
    2ad0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad2:	ab 85       	ldd	r26, Y+11	; 0x0b
    2ad4:	bc 85       	ldd	r27, Y+12	; 0x0c
    2ad6:	2a e0       	ldi	r18, 0x0A	; 10
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	40 e0       	ldi	r20, 0x00	; 0
    2adc:	50 e0       	ldi	r21, 0x00	; 0
    2ade:	bc 01       	movw	r22, r24
    2ae0:	cd 01       	movw	r24, r26
    2ae2:	0e 94 b3 22 	call	0x4566	; 0x4566 <__udivmodsi4>
    2ae6:	da 01       	movw	r26, r20
    2ae8:	c9 01       	movw	r24, r18
    2aea:	89 87       	std	Y+9, r24	; 0x09
    2aec:	9a 87       	std	Y+10, r25	; 0x0a
    2aee:	ab 87       	std	Y+11, r26	; 0x0b
    2af0:	bc 87       	std	Y+12, r27	; 0x0c
            Local_u8_WholeDigitCount--;
    2af2:	8b 81       	ldd	r24, Y+3	; 0x03
    2af4:	81 50       	subi	r24, 0x01	; 1
    2af6:	8b 83       	std	Y+3, r24	; 0x03


        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
        //Printing one digit at a time        
        while(Local_u32_WholeDigits)
    2af8:	89 85       	ldd	r24, Y+9	; 0x09
    2afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afc:	ab 85       	ldd	r26, Y+11	; 0x0b
    2afe:	bc 85       	ldd	r27, Y+12	; 0x0c
    2b00:	00 97       	sbiw	r24, 0x00	; 0
    2b02:	a1 05       	cpc	r26, r1
    2b04:	b1 05       	cpc	r27, r1
    2b06:	91 f6       	brne	.-92     	; 0x2aac <LCD_enu_WriteFloatNum+0x236>
    2b08:	06 c0       	rjmp	.+12     	; 0x2b16 <LCD_enu_WriteFloatNum+0x2a0>
            Local_u8_WholeDigitCount--;
        }
        //Printing any lost zeroes when the number was reversed 
        while(Local_u8_WholeDigitCount)
        {
            enu_PassByteAndLatch('0');
    2b0a:	80 e3       	ldi	r24, 0x30	; 48
    2b0c:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>
            Local_u8_WholeDigitCount--;
    2b10:	8b 81       	ldd	r24, Y+3	; 0x03
    2b12:	81 50       	subi	r24, 0x01	; 1
    2b14:	8b 83       	std	Y+3, r24	; 0x03
            enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
            Local_u32_WholeDigits /= 10;
            Local_u8_WholeDigitCount--;
        }
        //Printing any lost zeroes when the number was reversed 
        while(Local_u8_WholeDigitCount)
    2b16:	8b 81       	ldd	r24, Y+3	; 0x03
    2b18:	88 23       	and	r24, r24
    2b1a:	b9 f7       	brne	.-18     	; 0x2b0a <LCD_enu_WriteFloatNum+0x294>
            Local_u8_WholeDigitCount--;
        }


        //B] Printing decimal digits
        if(Local_f32_DecimalDigits)
    2b1c:	6c 81       	ldd	r22, Y+4	; 0x04
    2b1e:	7d 81       	ldd	r23, Y+5	; 0x05
    2b20:	8e 81       	ldd	r24, Y+6	; 0x06
    2b22:	9f 81       	ldd	r25, Y+7	; 0x07
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	40 e0       	ldi	r20, 0x00	; 0
    2b2a:	50 e0       	ldi	r21, 0x00	; 0
    2b2c:	0e 94 19 03 	call	0x632	; 0x632 <__nesf2>
    2b30:	88 23       	and	r24, r24
    2b32:	09 f4       	brne	.+2      	; 0x2b36 <LCD_enu_WriteFloatNum+0x2c0>
    2b34:	51 c0       	rjmp	.+162    	; 0x2bd8 <LCD_enu_WriteFloatNum+0x362>
        {
            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	61 e0       	ldi	r22, 0x01	; 1
    2b3a:	41 e0       	ldi	r20, 0x01	; 1
    2b3c:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>

            //Printing decimal point only if decimal digit exits
            enu_PassByteAndLatch('.');
    2b40:	8e e2       	ldi	r24, 0x2E	; 46
    2b42:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>

            //Reversing Digits (Using Local_u32_Wholedigits for safety) 'u32'
            Local_u32_WholeDigits = Local_f32_DecimalDigits;
    2b46:	6c 81       	ldd	r22, Y+4	; 0x04
    2b48:	7d 81       	ldd	r23, Y+5	; 0x05
    2b4a:	8e 81       	ldd	r24, Y+6	; 0x06
    2b4c:	9f 81       	ldd	r25, Y+7	; 0x07
    2b4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b52:	dc 01       	movw	r26, r24
    2b54:	cb 01       	movw	r24, r22
    2b56:	89 87       	std	Y+9, r24	; 0x09
    2b58:	9a 87       	std	Y+10, r25	; 0x0a
    2b5a:	ab 87       	std	Y+11, r26	; 0x0b
    2b5c:	bc 87       	std	Y+12, r27	; 0x0c
            enu_ReverseInteger(&Local_u32_WholeDigits);
    2b5e:	ce 01       	movw	r24, r28
    2b60:	09 96       	adiw	r24, 0x09	; 9
    2b62:	0e 94 99 18 	call	0x3132	; 0x3132 <enu_ReverseInteger>
    2b66:	26 c0       	rjmp	.+76     	; 0x2bb4 <LCD_enu_WriteFloatNum+0x33e>
            
            //Printing one digit at a time 
            while(Local_u32_WholeDigits)
            {
                enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
    2b68:	89 85       	ldd	r24, Y+9	; 0x09
    2b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b6c:	ab 85       	ldd	r26, Y+11	; 0x0b
    2b6e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2b70:	2a e0       	ldi	r18, 0x0A	; 10
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	40 e0       	ldi	r20, 0x00	; 0
    2b76:	50 e0       	ldi	r21, 0x00	; 0
    2b78:	bc 01       	movw	r22, r24
    2b7a:	cd 01       	movw	r24, r26
    2b7c:	0e 94 b3 22 	call	0x4566	; 0x4566 <__udivmodsi4>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	80 5d       	subi	r24, 0xD0	; 208
    2b86:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>
                Local_u32_WholeDigits /= 10;
    2b8a:	89 85       	ldd	r24, Y+9	; 0x09
    2b8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b8e:	ab 85       	ldd	r26, Y+11	; 0x0b
    2b90:	bc 85       	ldd	r27, Y+12	; 0x0c
    2b92:	2a e0       	ldi	r18, 0x0A	; 10
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	40 e0       	ldi	r20, 0x00	; 0
    2b98:	50 e0       	ldi	r21, 0x00	; 0
    2b9a:	bc 01       	movw	r22, r24
    2b9c:	cd 01       	movw	r24, r26
    2b9e:	0e 94 b3 22 	call	0x4566	; 0x4566 <__udivmodsi4>
    2ba2:	da 01       	movw	r26, r20
    2ba4:	c9 01       	movw	r24, r18
    2ba6:	89 87       	std	Y+9, r24	; 0x09
    2ba8:	9a 87       	std	Y+10, r25	; 0x0a
    2baa:	ab 87       	std	Y+11, r26	; 0x0b
    2bac:	bc 87       	std	Y+12, r27	; 0x0c
                Local_u8_DecimalDigitCount--;
    2bae:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb0:	81 50       	subi	r24, 0x01	; 1
    2bb2:	8a 83       	std	Y+2, r24	; 0x02
            //Reversing Digits (Using Local_u32_Wholedigits for safety) 'u32'
            Local_u32_WholeDigits = Local_f32_DecimalDigits;
            enu_ReverseInteger(&Local_u32_WholeDigits);
            
            //Printing one digit at a time 
            while(Local_u32_WholeDigits)
    2bb4:	89 85       	ldd	r24, Y+9	; 0x09
    2bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb8:	ab 85       	ldd	r26, Y+11	; 0x0b
    2bba:	bc 85       	ldd	r27, Y+12	; 0x0c
    2bbc:	00 97       	sbiw	r24, 0x00	; 0
    2bbe:	a1 05       	cpc	r26, r1
    2bc0:	b1 05       	cpc	r27, r1
    2bc2:	91 f6       	brne	.-92     	; 0x2b68 <LCD_enu_WriteFloatNum+0x2f2>
    2bc4:	06 c0       	rjmp	.+12     	; 0x2bd2 <LCD_enu_WriteFloatNum+0x35c>
                Local_u8_DecimalDigitCount--;
            }
            //Printing any lost zeroes when the number was reversed 
            while(Local_u8_DecimalDigitCount)
            {
                enu_PassByteAndLatch('0');
    2bc6:	80 e3       	ldi	r24, 0x30	; 48
    2bc8:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>
                Local_u8_DecimalDigitCount--;
    2bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bce:	81 50       	subi	r24, 0x01	; 1
    2bd0:	8a 83       	std	Y+2, r24	; 0x02
                enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
                Local_u32_WholeDigits /= 10;
                Local_u8_DecimalDigitCount--;
            }
            //Printing any lost zeroes when the number was reversed 
            while(Local_u8_DecimalDigitCount)
    2bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd4:	88 23       	and	r24, r24
    2bd6:	b9 f7       	brne	.-18     	; 0x2bc6 <LCD_enu_WriteFloatNum+0x350>
            
            

        }

        Local_u8_ErrorFlag = ES_OK;
    2bd8:	18 86       	std	Y+8, r1	; 0x08
    2bda:	02 c0       	rjmp	.+4      	; 0x2be0 <LCD_enu_WriteFloatNum+0x36a>


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2bdc:	82 e0       	ldi	r24, 0x02	; 2
    2bde:	88 87       	std	Y+8, r24	; 0x08
    }

    return Local_u8_ErrorFlag;
    2be0:	88 85       	ldd	r24, Y+8	; 0x08

}
    2be2:	63 96       	adiw	r28, 0x13	; 19
    2be4:	0f b6       	in	r0, 0x3f	; 63
    2be6:	f8 94       	cli
    2be8:	de bf       	out	0x3e, r29	; 62
    2bea:	0f be       	out	0x3f, r0	; 63
    2bec:	cd bf       	out	0x3d, r28	; 61
    2bee:	cf 91       	pop	r28
    2bf0:	df 91       	pop	r29
    2bf2:	0f 91       	pop	r16
    2bf4:	08 95       	ret

00002bf6 <enu_PassByteAndLatch>:

//Local Functions' implementations
static ErrorState_t enu_PassByteAndLatch(u8 Copy_u8_PassedByte)
{
    2bf6:	df 93       	push	r29
    2bf8:	cf 93       	push	r28
    2bfa:	cd b7       	in	r28, 0x3d	; 61
    2bfc:	de b7       	in	r29, 0x3e	; 62
    2bfe:	ac 97       	sbiw	r28, 0x2c	; 44
    2c00:	0f b6       	in	r0, 0x3f	; 63
    2c02:	f8 94       	cli
    2c04:	de bf       	out	0x3e, r29	; 62
    2c06:	0f be       	out	0x3f, r0	; 63
    2c08:	cd bf       	out	0x3d, r28	; 61
    2c0a:	8c a7       	std	Y+44, r24	; 0x2c
    u8 Local_u8_ErrorFlag = ES_NOK;
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	8b a7       	std	Y+43, r24	; 0x2b

    DIO_enu_SetPinValue(LCD_RW_GROUP,LCD_RW_PIN,DIO_LOW);
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	62 e0       	ldi	r22, 0x02	; 2
    2c14:	40 e0       	ldi	r20, 0x00	; 0
    2c16:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
    
    DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	63 e0       	ldi	r22, 0x03	; 3
    2c1e:	40 e0       	ldi	r20, 0x00	; 0
    2c20:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>

    DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,(Copy_u8_PassedByte >> 7) & 1);
    2c24:	8c a5       	ldd	r24, Y+44	; 0x2c
    2c26:	98 2f       	mov	r25, r24
    2c28:	99 1f       	adc	r25, r25
    2c2a:	99 27       	eor	r25, r25
    2c2c:	99 1f       	adc	r25, r25
    2c2e:	80 e0       	ldi	r24, 0x00	; 0
    2c30:	67 e0       	ldi	r22, 0x07	; 7
    2c32:	49 2f       	mov	r20, r25
    2c34:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,(Copy_u8_PassedByte >> 6) & 1);
    2c38:	8c a5       	ldd	r24, Y+44	; 0x2c
    2c3a:	82 95       	swap	r24
    2c3c:	86 95       	lsr	r24
    2c3e:	86 95       	lsr	r24
    2c40:	83 70       	andi	r24, 0x03	; 3
    2c42:	98 2f       	mov	r25, r24
    2c44:	91 70       	andi	r25, 0x01	; 1
    2c46:	80 e0       	ldi	r24, 0x00	; 0
    2c48:	66 e0       	ldi	r22, 0x06	; 6
    2c4a:	49 2f       	mov	r20, r25
    2c4c:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,(Copy_u8_PassedByte >> 5) & 1);
    2c50:	8c a5       	ldd	r24, Y+44	; 0x2c
    2c52:	82 95       	swap	r24
    2c54:	86 95       	lsr	r24
    2c56:	87 70       	andi	r24, 0x07	; 7
    2c58:	98 2f       	mov	r25, r24
    2c5a:	91 70       	andi	r25, 0x01	; 1
    2c5c:	80 e0       	ldi	r24, 0x00	; 0
    2c5e:	65 e0       	ldi	r22, 0x05	; 5
    2c60:	49 2f       	mov	r20, r25
    2c62:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,(Copy_u8_PassedByte >> 4) & 1);
    2c66:	8c a5       	ldd	r24, Y+44	; 0x2c
    2c68:	82 95       	swap	r24
    2c6a:	8f 70       	andi	r24, 0x0F	; 15
    2c6c:	98 2f       	mov	r25, r24
    2c6e:	91 70       	andi	r25, 0x01	; 1
    2c70:	80 e0       	ldi	r24, 0x00	; 0
    2c72:	64 e0       	ldi	r22, 0x04	; 4
    2c74:	49 2f       	mov	r20, r25
    2c76:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);

    #elif LCD == LCD_4_BIT_MODE 

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	63 e0       	ldi	r22, 0x03	; 3
    2c7e:	41 e0       	ldi	r20, 0x01	; 1
    2c80:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
    2c84:	80 e0       	ldi	r24, 0x00	; 0
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	a0 e8       	ldi	r26, 0x80	; 128
    2c8a:	bf e3       	ldi	r27, 0x3F	; 63
    2c8c:	8f a3       	std	Y+39, r24	; 0x27
    2c8e:	98 a7       	std	Y+40, r25	; 0x28
    2c90:	a9 a7       	std	Y+41, r26	; 0x29
    2c92:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c94:	6f a1       	ldd	r22, Y+39	; 0x27
    2c96:	78 a5       	ldd	r23, Y+40	; 0x28
    2c98:	89 a5       	ldd	r24, Y+41	; 0x29
    2c9a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	4a e7       	ldi	r20, 0x7A	; 122
    2ca2:	55 e4       	ldi	r21, 0x45	; 69
    2ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	8b a3       	std	Y+35, r24	; 0x23
    2cae:	9c a3       	std	Y+36, r25	; 0x24
    2cb0:	ad a3       	std	Y+37, r26	; 0x25
    2cb2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2cb4:	6b a1       	ldd	r22, Y+35	; 0x23
    2cb6:	7c a1       	ldd	r23, Y+36	; 0x24
    2cb8:	8d a1       	ldd	r24, Y+37	; 0x25
    2cba:	9e a1       	ldd	r25, Y+38	; 0x26
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	40 e8       	ldi	r20, 0x80	; 128
    2cc2:	5f e3       	ldi	r21, 0x3F	; 63
    2cc4:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2cc8:	88 23       	and	r24, r24
    2cca:	2c f4       	brge	.+10     	; 0x2cd6 <enu_PassByteAndLatch+0xe0>
		__ticks = 1;
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	9a a3       	std	Y+34, r25	; 0x22
    2cd2:	89 a3       	std	Y+33, r24	; 0x21
    2cd4:	3f c0       	rjmp	.+126    	; 0x2d54 <enu_PassByteAndLatch+0x15e>
	else if (__tmp > 65535)
    2cd6:	6b a1       	ldd	r22, Y+35	; 0x23
    2cd8:	7c a1       	ldd	r23, Y+36	; 0x24
    2cda:	8d a1       	ldd	r24, Y+37	; 0x25
    2cdc:	9e a1       	ldd	r25, Y+38	; 0x26
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	3f ef       	ldi	r19, 0xFF	; 255
    2ce2:	4f e7       	ldi	r20, 0x7F	; 127
    2ce4:	57 e4       	ldi	r21, 0x47	; 71
    2ce6:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2cea:	18 16       	cp	r1, r24
    2cec:	4c f5       	brge	.+82     	; 0x2d40 <enu_PassByteAndLatch+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cee:	6f a1       	ldd	r22, Y+39	; 0x27
    2cf0:	78 a5       	ldd	r23, Y+40	; 0x28
    2cf2:	89 a5       	ldd	r24, Y+41	; 0x29
    2cf4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	40 e2       	ldi	r20, 0x20	; 32
    2cfc:	51 e4       	ldi	r21, 0x41	; 65
    2cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	bc 01       	movw	r22, r24
    2d08:	cd 01       	movw	r24, r26
    2d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0e:	dc 01       	movw	r26, r24
    2d10:	cb 01       	movw	r24, r22
    2d12:	9a a3       	std	Y+34, r25	; 0x22
    2d14:	89 a3       	std	Y+33, r24	; 0x21
    2d16:	0f c0       	rjmp	.+30     	; 0x2d36 <enu_PassByteAndLatch+0x140>
    2d18:	80 e9       	ldi	r24, 0x90	; 144
    2d1a:	91 e0       	ldi	r25, 0x01	; 1
    2d1c:	98 a3       	std	Y+32, r25	; 0x20
    2d1e:	8f 8f       	std	Y+31, r24	; 0x1f
    2d20:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d22:	98 a1       	ldd	r25, Y+32	; 0x20
    2d24:	01 97       	sbiw	r24, 0x01	; 1
    2d26:	f1 f7       	brne	.-4      	; 0x2d24 <enu_PassByteAndLatch+0x12e>
    2d28:	98 a3       	std	Y+32, r25	; 0x20
    2d2a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d2c:	89 a1       	ldd	r24, Y+33	; 0x21
    2d2e:	9a a1       	ldd	r25, Y+34	; 0x22
    2d30:	01 97       	sbiw	r24, 0x01	; 1
    2d32:	9a a3       	std	Y+34, r25	; 0x22
    2d34:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d36:	89 a1       	ldd	r24, Y+33	; 0x21
    2d38:	9a a1       	ldd	r25, Y+34	; 0x22
    2d3a:	00 97       	sbiw	r24, 0x00	; 0
    2d3c:	69 f7       	brne	.-38     	; 0x2d18 <enu_PassByteAndLatch+0x122>
    2d3e:	14 c0       	rjmp	.+40     	; 0x2d68 <enu_PassByteAndLatch+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d40:	6b a1       	ldd	r22, Y+35	; 0x23
    2d42:	7c a1       	ldd	r23, Y+36	; 0x24
    2d44:	8d a1       	ldd	r24, Y+37	; 0x25
    2d46:	9e a1       	ldd	r25, Y+38	; 0x26
    2d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	9a a3       	std	Y+34, r25	; 0x22
    2d52:	89 a3       	std	Y+33, r24	; 0x21
    2d54:	89 a1       	ldd	r24, Y+33	; 0x21
    2d56:	9a a1       	ldd	r25, Y+34	; 0x22
    2d58:	9e 8f       	std	Y+30, r25	; 0x1e
    2d5a:	8d 8f       	std	Y+29, r24	; 0x1d
    2d5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d5e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d60:	01 97       	sbiw	r24, 0x01	; 1
    2d62:	f1 f7       	brne	.-4      	; 0x2d60 <enu_PassByteAndLatch+0x16a>
    2d64:	9e 8f       	std	Y+30, r25	; 0x1e
    2d66:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	63 e0       	ldi	r22, 0x03	; 3
    2d6c:	40 e0       	ldi	r20, 0x00	; 0
    2d6e:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
        
        DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,(Copy_u8_PassedByte >> 3) & 1);
    2d72:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d74:	86 95       	lsr	r24
    2d76:	86 95       	lsr	r24
    2d78:	86 95       	lsr	r24
    2d7a:	98 2f       	mov	r25, r24
    2d7c:	91 70       	andi	r25, 0x01	; 1
    2d7e:	80 e0       	ldi	r24, 0x00	; 0
    2d80:	67 e0       	ldi	r22, 0x07	; 7
    2d82:	49 2f       	mov	r20, r25
    2d84:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,(Copy_u8_PassedByte >> 2) & 1);
    2d88:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d8a:	86 95       	lsr	r24
    2d8c:	86 95       	lsr	r24
    2d8e:	98 2f       	mov	r25, r24
    2d90:	91 70       	andi	r25, 0x01	; 1
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	66 e0       	ldi	r22, 0x06	; 6
    2d96:	49 2f       	mov	r20, r25
    2d98:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,(Copy_u8_PassedByte >> 1) & 1);
    2d9c:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d9e:	86 95       	lsr	r24
    2da0:	98 2f       	mov	r25, r24
    2da2:	91 70       	andi	r25, 0x01	; 1
    2da4:	80 e0       	ldi	r24, 0x00	; 0
    2da6:	65 e0       	ldi	r22, 0x05	; 5
    2da8:	49 2f       	mov	r20, r25
    2daa:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,(Copy_u8_PassedByte >> 0) & 1);
    2dae:	8c a5       	ldd	r24, Y+44	; 0x2c
    2db0:	98 2f       	mov	r25, r24
    2db2:	91 70       	andi	r25, 0x01	; 1
    2db4:	80 e0       	ldi	r24, 0x00	; 0
    2db6:	64 e0       	ldi	r22, 0x04	; 4
    2db8:	49 2f       	mov	r20, r25
    2dba:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    2dbe:	81 e0       	ldi	r24, 0x01	; 1
    2dc0:	63 e0       	ldi	r22, 0x03	; 3
    2dc2:	41 e0       	ldi	r20, 0x01	; 1
    2dc4:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
    2dc8:	80 e0       	ldi	r24, 0x00	; 0
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	a0 e8       	ldi	r26, 0x80	; 128
    2dce:	bf e3       	ldi	r27, 0x3F	; 63
    2dd0:	89 8f       	std	Y+25, r24	; 0x19
    2dd2:	9a 8f       	std	Y+26, r25	; 0x1a
    2dd4:	ab 8f       	std	Y+27, r26	; 0x1b
    2dd6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dd8:	69 8d       	ldd	r22, Y+25	; 0x19
    2dda:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ddc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dde:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2de0:	20 e0       	ldi	r18, 0x00	; 0
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	4a e7       	ldi	r20, 0x7A	; 122
    2de6:	55 e4       	ldi	r21, 0x45	; 69
    2de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dec:	dc 01       	movw	r26, r24
    2dee:	cb 01       	movw	r24, r22
    2df0:	8d 8b       	std	Y+21, r24	; 0x15
    2df2:	9e 8b       	std	Y+22, r25	; 0x16
    2df4:	af 8b       	std	Y+23, r26	; 0x17
    2df6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2df8:	6d 89       	ldd	r22, Y+21	; 0x15
    2dfa:	7e 89       	ldd	r23, Y+22	; 0x16
    2dfc:	8f 89       	ldd	r24, Y+23	; 0x17
    2dfe:	98 8d       	ldd	r25, Y+24	; 0x18
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	40 e8       	ldi	r20, 0x80	; 128
    2e06:	5f e3       	ldi	r21, 0x3F	; 63
    2e08:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2e0c:	88 23       	and	r24, r24
    2e0e:	2c f4       	brge	.+10     	; 0x2e1a <enu_PassByteAndLatch+0x224>
		__ticks = 1;
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	9c 8b       	std	Y+20, r25	; 0x14
    2e16:	8b 8b       	std	Y+19, r24	; 0x13
    2e18:	3f c0       	rjmp	.+126    	; 0x2e98 <enu_PassByteAndLatch+0x2a2>
	else if (__tmp > 65535)
    2e1a:	6d 89       	ldd	r22, Y+21	; 0x15
    2e1c:	7e 89       	ldd	r23, Y+22	; 0x16
    2e1e:	8f 89       	ldd	r24, Y+23	; 0x17
    2e20:	98 8d       	ldd	r25, Y+24	; 0x18
    2e22:	20 e0       	ldi	r18, 0x00	; 0
    2e24:	3f ef       	ldi	r19, 0xFF	; 255
    2e26:	4f e7       	ldi	r20, 0x7F	; 127
    2e28:	57 e4       	ldi	r21, 0x47	; 71
    2e2a:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2e2e:	18 16       	cp	r1, r24
    2e30:	4c f5       	brge	.+82     	; 0x2e84 <enu_PassByteAndLatch+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e32:	69 8d       	ldd	r22, Y+25	; 0x19
    2e34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	40 e2       	ldi	r20, 0x20	; 32
    2e40:	51 e4       	ldi	r21, 0x41	; 65
    2e42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e46:	dc 01       	movw	r26, r24
    2e48:	cb 01       	movw	r24, r22
    2e4a:	bc 01       	movw	r22, r24
    2e4c:	cd 01       	movw	r24, r26
    2e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e52:	dc 01       	movw	r26, r24
    2e54:	cb 01       	movw	r24, r22
    2e56:	9c 8b       	std	Y+20, r25	; 0x14
    2e58:	8b 8b       	std	Y+19, r24	; 0x13
    2e5a:	0f c0       	rjmp	.+30     	; 0x2e7a <enu_PassByteAndLatch+0x284>
    2e5c:	80 e9       	ldi	r24, 0x90	; 144
    2e5e:	91 e0       	ldi	r25, 0x01	; 1
    2e60:	9a 8b       	std	Y+18, r25	; 0x12
    2e62:	89 8b       	std	Y+17, r24	; 0x11
    2e64:	89 89       	ldd	r24, Y+17	; 0x11
    2e66:	9a 89       	ldd	r25, Y+18	; 0x12
    2e68:	01 97       	sbiw	r24, 0x01	; 1
    2e6a:	f1 f7       	brne	.-4      	; 0x2e68 <enu_PassByteAndLatch+0x272>
    2e6c:	9a 8b       	std	Y+18, r25	; 0x12
    2e6e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e70:	8b 89       	ldd	r24, Y+19	; 0x13
    2e72:	9c 89       	ldd	r25, Y+20	; 0x14
    2e74:	01 97       	sbiw	r24, 0x01	; 1
    2e76:	9c 8b       	std	Y+20, r25	; 0x14
    2e78:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e7a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e7c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e7e:	00 97       	sbiw	r24, 0x00	; 0
    2e80:	69 f7       	brne	.-38     	; 0x2e5c <enu_PassByteAndLatch+0x266>
    2e82:	14 c0       	rjmp	.+40     	; 0x2eac <enu_PassByteAndLatch+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e84:	6d 89       	ldd	r22, Y+21	; 0x15
    2e86:	7e 89       	ldd	r23, Y+22	; 0x16
    2e88:	8f 89       	ldd	r24, Y+23	; 0x17
    2e8a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	9c 8b       	std	Y+20, r25	; 0x14
    2e96:	8b 8b       	std	Y+19, r24	; 0x13
    2e98:	8b 89       	ldd	r24, Y+19	; 0x13
    2e9a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e9c:	98 8b       	std	Y+16, r25	; 0x10
    2e9e:	8f 87       	std	Y+15, r24	; 0x0f
    2ea0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ea2:	98 89       	ldd	r25, Y+16	; 0x10
    2ea4:	01 97       	sbiw	r24, 0x01	; 1
    2ea6:	f1 f7       	brne	.-4      	; 0x2ea4 <enu_PassByteAndLatch+0x2ae>
    2ea8:	98 8b       	std	Y+16, r25	; 0x10
    2eaa:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	63 e0       	ldi	r22, 0x03	; 3
    2eb0:	40 e0       	ldi	r20, 0x00	; 0
    2eb2:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
    2eb6:	80 e0       	ldi	r24, 0x00	; 0
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	a0 e0       	ldi	r26, 0x00	; 0
    2ebc:	b0 e4       	ldi	r27, 0x40	; 64
    2ebe:	8b 87       	std	Y+11, r24	; 0x0b
    2ec0:	9c 87       	std	Y+12, r25	; 0x0c
    2ec2:	ad 87       	std	Y+13, r26	; 0x0d
    2ec4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ec6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ec8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eca:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ecc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ece:	20 e0       	ldi	r18, 0x00	; 0
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	4a e7       	ldi	r20, 0x7A	; 122
    2ed4:	55 e4       	ldi	r21, 0x45	; 69
    2ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eda:	dc 01       	movw	r26, r24
    2edc:	cb 01       	movw	r24, r22
    2ede:	8f 83       	std	Y+7, r24	; 0x07
    2ee0:	98 87       	std	Y+8, r25	; 0x08
    2ee2:	a9 87       	std	Y+9, r26	; 0x09
    2ee4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ee6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ee8:	78 85       	ldd	r23, Y+8	; 0x08
    2eea:	89 85       	ldd	r24, Y+9	; 0x09
    2eec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	40 e8       	ldi	r20, 0x80	; 128
    2ef4:	5f e3       	ldi	r21, 0x3F	; 63
    2ef6:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2efa:	88 23       	and	r24, r24
    2efc:	2c f4       	brge	.+10     	; 0x2f08 <enu_PassByteAndLatch+0x312>
		__ticks = 1;
    2efe:	81 e0       	ldi	r24, 0x01	; 1
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	9e 83       	std	Y+6, r25	; 0x06
    2f04:	8d 83       	std	Y+5, r24	; 0x05
    2f06:	3f c0       	rjmp	.+126    	; 0x2f86 <enu_PassByteAndLatch+0x390>
	else if (__tmp > 65535)
    2f08:	6f 81       	ldd	r22, Y+7	; 0x07
    2f0a:	78 85       	ldd	r23, Y+8	; 0x08
    2f0c:	89 85       	ldd	r24, Y+9	; 0x09
    2f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f10:	20 e0       	ldi	r18, 0x00	; 0
    2f12:	3f ef       	ldi	r19, 0xFF	; 255
    2f14:	4f e7       	ldi	r20, 0x7F	; 127
    2f16:	57 e4       	ldi	r21, 0x47	; 71
    2f18:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2f1c:	18 16       	cp	r1, r24
    2f1e:	4c f5       	brge	.+82     	; 0x2f72 <enu_PassByteAndLatch+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f20:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f22:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f26:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	40 e2       	ldi	r20, 0x20	; 32
    2f2e:	51 e4       	ldi	r21, 0x41	; 65
    2f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	bc 01       	movw	r22, r24
    2f3a:	cd 01       	movw	r24, r26
    2f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f40:	dc 01       	movw	r26, r24
    2f42:	cb 01       	movw	r24, r22
    2f44:	9e 83       	std	Y+6, r25	; 0x06
    2f46:	8d 83       	std	Y+5, r24	; 0x05
    2f48:	0f c0       	rjmp	.+30     	; 0x2f68 <enu_PassByteAndLatch+0x372>
    2f4a:	80 e9       	ldi	r24, 0x90	; 144
    2f4c:	91 e0       	ldi	r25, 0x01	; 1
    2f4e:	9c 83       	std	Y+4, r25	; 0x04
    2f50:	8b 83       	std	Y+3, r24	; 0x03
    2f52:	8b 81       	ldd	r24, Y+3	; 0x03
    2f54:	9c 81       	ldd	r25, Y+4	; 0x04
    2f56:	01 97       	sbiw	r24, 0x01	; 1
    2f58:	f1 f7       	brne	.-4      	; 0x2f56 <enu_PassByteAndLatch+0x360>
    2f5a:	9c 83       	std	Y+4, r25	; 0x04
    2f5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f60:	9e 81       	ldd	r25, Y+6	; 0x06
    2f62:	01 97       	sbiw	r24, 0x01	; 1
    2f64:	9e 83       	std	Y+6, r25	; 0x06
    2f66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f68:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f6c:	00 97       	sbiw	r24, 0x00	; 0
    2f6e:	69 f7       	brne	.-38     	; 0x2f4a <enu_PassByteAndLatch+0x354>
    2f70:	14 c0       	rjmp	.+40     	; 0x2f9a <enu_PassByteAndLatch+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f72:	6f 81       	ldd	r22, Y+7	; 0x07
    2f74:	78 85       	ldd	r23, Y+8	; 0x08
    2f76:	89 85       	ldd	r24, Y+9	; 0x09
    2f78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cb 01       	movw	r24, r22
    2f82:	9e 83       	std	Y+6, r25	; 0x06
    2f84:	8d 83       	std	Y+5, r24	; 0x05
    2f86:	8d 81       	ldd	r24, Y+5	; 0x05
    2f88:	9e 81       	ldd	r25, Y+6	; 0x06
    2f8a:	9a 83       	std	Y+2, r25	; 0x02
    2f8c:	89 83       	std	Y+1, r24	; 0x01
    2f8e:	89 81       	ldd	r24, Y+1	; 0x01
    2f90:	9a 81       	ldd	r25, Y+2	; 0x02
    2f92:	01 97       	sbiw	r24, 0x01	; 1
    2f94:	f1 f7       	brne	.-4      	; 0x2f92 <enu_PassByteAndLatch+0x39c>
    2f96:	9a 83       	std	Y+2, r25	; 0x02
    2f98:	89 83       	std	Y+1, r24	; 0x01


    //LCD MPU command delay
    _delay_ms(2);

    Local_u8_ErrorFlag = ES_OK; //Should be grouped in an array and returned after a for loop 
    2f9a:	1b a6       	std	Y+43, r1	; 0x2b
    return Local_u8_ErrorFlag;
    2f9c:	8b a5       	ldd	r24, Y+43	; 0x2b
    

}
    2f9e:	ac 96       	adiw	r28, 0x2c	; 44
    2fa0:	0f b6       	in	r0, 0x3f	; 63
    2fa2:	f8 94       	cli
    2fa4:	de bf       	out	0x3e, r29	; 62
    2fa6:	0f be       	out	0x3f, r0	; 63
    2fa8:	cd bf       	out	0x3d, r28	; 61
    2faa:	cf 91       	pop	r28
    2fac:	df 91       	pop	r29
    2fae:	08 95       	ret

00002fb0 <enu_AddCustomCharacter>:

static ErrorState_t enu_AddCustomCharacter(u8* Copy_au8_CharacterCode,u8 Copy_u8_PatternNumber)
{
    2fb0:	df 93       	push	r29
    2fb2:	cf 93       	push	r28
    2fb4:	cd b7       	in	r28, 0x3d	; 61
    2fb6:	de b7       	in	r29, 0x3e	; 62
    2fb8:	27 97       	sbiw	r28, 0x07	; 7
    2fba:	0f b6       	in	r0, 0x3f	; 63
    2fbc:	f8 94       	cli
    2fbe:	de bf       	out	0x3e, r29	; 62
    2fc0:	0f be       	out	0x3f, r0	; 63
    2fc2:	cd bf       	out	0x3d, r28	; 61
    2fc4:	9c 83       	std	Y+4, r25	; 0x04
    2fc6:	8b 83       	std	Y+3, r24	; 0x03
    2fc8:	6d 83       	std	Y+5, r22	; 0x05
    u8 Local_u8_ErrorFlag = ES_NOK;
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	8a 83       	std	Y+2, r24	; 0x02
    
    if(Copy_au8_CharacterCode)
    2fce:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd0:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd2:	00 97       	sbiw	r24, 0x00	; 0
    2fd4:	09 f4       	brne	.+2      	; 0x2fd8 <enu_AddCustomCharacter+0x28>
    2fd6:	79 c0       	rjmp	.+242    	; 0x30ca <enu_AddCustomCharacter+0x11a>
    {   
        if(Copy_u8_PatternNumber <= LCD_CUSTOM_PATTERN_7)
    2fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2fda:	88 30       	cpi	r24, 0x08	; 8
    2fdc:	08 f0       	brcs	.+2      	; 0x2fe0 <enu_AddCustomCharacter+0x30>
    2fde:	72 c0       	rjmp	.+228    	; 0x30c4 <enu_AddCustomCharacter+0x114>
        {

            u8 Local_u8_Counter = 0;
    2fe0:	19 82       	std	Y+1, r1	; 0x01
            
            //Choosing IR to send A command
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    2fe2:	81 e0       	ldi	r24, 0x01	; 1
    2fe4:	61 e0       	ldi	r22, 0x01	; 1
    2fe6:	40 e0       	ldi	r20, 0x00	; 0
    2fe8:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
            
            switch (Copy_u8_PatternNumber)
    2fec:	8d 81       	ldd	r24, Y+5	; 0x05
    2fee:	28 2f       	mov	r18, r24
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	3f 83       	std	Y+7, r19	; 0x07
    2ff4:	2e 83       	std	Y+6, r18	; 0x06
    2ff6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ff8:	9f 81       	ldd	r25, Y+7	; 0x07
    2ffa:	83 30       	cpi	r24, 0x03	; 3
    2ffc:	91 05       	cpc	r25, r1
    2ffe:	a9 f1       	breq	.+106    	; 0x306a <enu_AddCustomCharacter+0xba>
    3000:	2e 81       	ldd	r18, Y+6	; 0x06
    3002:	3f 81       	ldd	r19, Y+7	; 0x07
    3004:	24 30       	cpi	r18, 0x04	; 4
    3006:	31 05       	cpc	r19, r1
    3008:	7c f4       	brge	.+30     	; 0x3028 <enu_AddCustomCharacter+0x78>
    300a:	8e 81       	ldd	r24, Y+6	; 0x06
    300c:	9f 81       	ldd	r25, Y+7	; 0x07
    300e:	81 30       	cpi	r24, 0x01	; 1
    3010:	91 05       	cpc	r25, r1
    3012:	19 f1       	breq	.+70     	; 0x305a <enu_AddCustomCharacter+0xaa>
    3014:	2e 81       	ldd	r18, Y+6	; 0x06
    3016:	3f 81       	ldd	r19, Y+7	; 0x07
    3018:	22 30       	cpi	r18, 0x02	; 2
    301a:	31 05       	cpc	r19, r1
    301c:	14 f5       	brge	.+68     	; 0x3062 <enu_AddCustomCharacter+0xb2>
    301e:	8e 81       	ldd	r24, Y+6	; 0x06
    3020:	9f 81       	ldd	r25, Y+7	; 0x07
    3022:	00 97       	sbiw	r24, 0x00	; 0
    3024:	b1 f0       	breq	.+44     	; 0x3052 <enu_AddCustomCharacter+0xa2>
    3026:	34 c0       	rjmp	.+104    	; 0x3090 <enu_AddCustomCharacter+0xe0>
    3028:	2e 81       	ldd	r18, Y+6	; 0x06
    302a:	3f 81       	ldd	r19, Y+7	; 0x07
    302c:	25 30       	cpi	r18, 0x05	; 5
    302e:	31 05       	cpc	r19, r1
    3030:	21 f1       	breq	.+72     	; 0x307a <enu_AddCustomCharacter+0xca>
    3032:	8e 81       	ldd	r24, Y+6	; 0x06
    3034:	9f 81       	ldd	r25, Y+7	; 0x07
    3036:	85 30       	cpi	r24, 0x05	; 5
    3038:	91 05       	cpc	r25, r1
    303a:	dc f0       	brlt	.+54     	; 0x3072 <enu_AddCustomCharacter+0xc2>
    303c:	2e 81       	ldd	r18, Y+6	; 0x06
    303e:	3f 81       	ldd	r19, Y+7	; 0x07
    3040:	26 30       	cpi	r18, 0x06	; 6
    3042:	31 05       	cpc	r19, r1
    3044:	f1 f0       	breq	.+60     	; 0x3082 <enu_AddCustomCharacter+0xd2>
    3046:	8e 81       	ldd	r24, Y+6	; 0x06
    3048:	9f 81       	ldd	r25, Y+7	; 0x07
    304a:	87 30       	cpi	r24, 0x07	; 7
    304c:	91 05       	cpc	r25, r1
    304e:	e9 f0       	breq	.+58     	; 0x308a <enu_AddCustomCharacter+0xda>
    3050:	1f c0       	rjmp	.+62     	; 0x3090 <enu_AddCustomCharacter+0xe0>
            {
                //Setting the custom pattern base address in AC

                case LCD_CUSTOM_PATTERN_0:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_0_BASE_ADDRESS);
    3052:	80 e4       	ldi	r24, 0x40	; 64
    3054:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>
    3058:	1b c0       	rjmp	.+54     	; 0x3090 <enu_AddCustomCharacter+0xe0>
                break;
                
                case LCD_CUSTOM_PATTERN_1:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_1_BASE_ADDRESS);
    305a:	88 e4       	ldi	r24, 0x48	; 72
    305c:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>
    3060:	17 c0       	rjmp	.+46     	; 0x3090 <enu_AddCustomCharacter+0xe0>
                break;

                case LCD_CUSTOM_PATTERN_2:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_2_BASE_ADDRESS);
    3062:	80 e5       	ldi	r24, 0x50	; 80
    3064:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>
    3068:	13 c0       	rjmp	.+38     	; 0x3090 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_3:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_3_BASE_ADDRESS);
    306a:	88 e5       	ldi	r24, 0x58	; 88
    306c:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>
    3070:	0f c0       	rjmp	.+30     	; 0x3090 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_4:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_4_BASE_ADDRESS);
    3072:	80 e6       	ldi	r24, 0x60	; 96
    3074:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>
    3078:	0b c0       	rjmp	.+22     	; 0x3090 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_5:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_5_BASE_ADDRESS);
    307a:	88 e6       	ldi	r24, 0x68	; 104
    307c:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>
    3080:	07 c0       	rjmp	.+14     	; 0x3090 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_6:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_6_BASE_ADDRESS);
    3082:	80 e7       	ldi	r24, 0x70	; 112
    3084:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>
    3088:	03 c0       	rjmp	.+6      	; 0x3090 <enu_AddCustomCharacter+0xe0>
                break;           

                case LCD_CUSTOM_PATTERN_7:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_7_BASE_ADDRESS);
    308a:	88 e7       	ldi	r24, 0x78	; 120
    308c:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>
                default:
                break;
            }

            //Choosing DR to send data
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    3090:	81 e0       	ldi	r24, 0x01	; 1
    3092:	61 e0       	ldi	r22, 0x01	; 1
    3094:	41 e0       	ldi	r20, 0x01	; 1
    3096:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>

            for(Local_u8_Counter = 0; Local_u8_Counter < 8; Local_u8_Counter++)
    309a:	19 82       	std	Y+1, r1	; 0x01
    309c:	0e c0       	rjmp	.+28     	; 0x30ba <enu_AddCustomCharacter+0x10a>
            {
                enu_PassByteAndLatch(Copy_au8_CharacterCode[Local_u8_Counter]);
    309e:	89 81       	ldd	r24, Y+1	; 0x01
    30a0:	28 2f       	mov	r18, r24
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	8b 81       	ldd	r24, Y+3	; 0x03
    30a6:	9c 81       	ldd	r25, Y+4	; 0x04
    30a8:	fc 01       	movw	r30, r24
    30aa:	e2 0f       	add	r30, r18
    30ac:	f3 1f       	adc	r31, r19
    30ae:	80 81       	ld	r24, Z
    30b0:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <enu_PassByteAndLatch>
            }

            //Choosing DR to send data
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

            for(Local_u8_Counter = 0; Local_u8_Counter < 8; Local_u8_Counter++)
    30b4:	89 81       	ldd	r24, Y+1	; 0x01
    30b6:	8f 5f       	subi	r24, 0xFF	; 255
    30b8:	89 83       	std	Y+1, r24	; 0x01
    30ba:	89 81       	ldd	r24, Y+1	; 0x01
    30bc:	88 30       	cpi	r24, 0x08	; 8
    30be:	78 f3       	brcs	.-34     	; 0x309e <enu_AddCustomCharacter+0xee>
            {
                enu_PassByteAndLatch(Copy_au8_CharacterCode[Local_u8_Counter]);
            }

            Local_u8_ErrorFlag = ES_OK;
    30c0:	1a 82       	std	Y+2, r1	; 0x02
    30c2:	05 c0       	rjmp	.+10     	; 0x30ce <enu_AddCustomCharacter+0x11e>

        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    30c4:	82 e0       	ldi	r24, 0x02	; 2
    30c6:	8a 83       	std	Y+2, r24	; 0x02
    30c8:	02 c0       	rjmp	.+4      	; 0x30ce <enu_AddCustomCharacter+0x11e>
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    30ca:	83 e0       	ldi	r24, 0x03	; 3
    30cc:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_u8_ErrorFlag;
    30ce:	8a 81       	ldd	r24, Y+2	; 0x02
}
    30d0:	27 96       	adiw	r28, 0x07	; 7
    30d2:	0f b6       	in	r0, 0x3f	; 63
    30d4:	f8 94       	cli
    30d6:	de bf       	out	0x3e, r29	; 62
    30d8:	0f be       	out	0x3f, r0	; 63
    30da:	cd bf       	out	0x3d, r28	; 61
    30dc:	cf 91       	pop	r28
    30de:	df 91       	pop	r29
    30e0:	08 95       	ret

000030e2 <enu_ConvertDigitToASCII>:

static ErrorState_t enu_ConvertDigitToASCII(u8 *Copy_u8_Digit)
{
    30e2:	df 93       	push	r29
    30e4:	cf 93       	push	r28
    30e6:	00 d0       	rcall	.+0      	; 0x30e8 <enu_ConvertDigitToASCII+0x6>
    30e8:	0f 92       	push	r0
    30ea:	cd b7       	in	r28, 0x3d	; 61
    30ec:	de b7       	in	r29, 0x3e	; 62
    30ee:	9b 83       	std	Y+3, r25	; 0x03
    30f0:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErorFlag = ES_NOK;
    30f2:	81 e0       	ldi	r24, 0x01	; 1
    30f4:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_Digit)
    30f6:	8a 81       	ldd	r24, Y+2	; 0x02
    30f8:	9b 81       	ldd	r25, Y+3	; 0x03
    30fa:	00 97       	sbiw	r24, 0x00	; 0
    30fc:	89 f0       	breq	.+34     	; 0x3120 <enu_ConvertDigitToASCII+0x3e>
    {
        if(((*Copy_u8_Digit >= 0) && (*Copy_u8_Digit <= 9)))
    30fe:	ea 81       	ldd	r30, Y+2	; 0x02
    3100:	fb 81       	ldd	r31, Y+3	; 0x03
    3102:	80 81       	ld	r24, Z
    3104:	8a 30       	cpi	r24, 0x0A	; 10
    3106:	48 f4       	brcc	.+18     	; 0x311a <enu_ConvertDigitToASCII+0x38>
        {

            *Copy_u8_Digit = *Copy_u8_Digit + 48;
    3108:	ea 81       	ldd	r30, Y+2	; 0x02
    310a:	fb 81       	ldd	r31, Y+3	; 0x03
    310c:	80 81       	ld	r24, Z
    310e:	80 5d       	subi	r24, 0xD0	; 208
    3110:	ea 81       	ldd	r30, Y+2	; 0x02
    3112:	fb 81       	ldd	r31, Y+3	; 0x03
    3114:	80 83       	st	Z, r24
            Local_u8_ErorFlag = ES_OK;
    3116:	19 82       	std	Y+1, r1	; 0x01
    3118:	05 c0       	rjmp	.+10     	; 0x3124 <enu_ConvertDigitToASCII+0x42>
        }
        else
        {
            Local_u8_ErorFlag = ES_OUT_OF_RANGE;
    311a:	82 e0       	ldi	r24, 0x02	; 2
    311c:	89 83       	std	Y+1, r24	; 0x01
    311e:	02 c0       	rjmp	.+4      	; 0x3124 <enu_ConvertDigitToASCII+0x42>
        }
    }
    else
    {
        Local_u8_ErorFlag = ES_NULL_POINTER;
    3120:	83 e0       	ldi	r24, 0x03	; 3
    3122:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErorFlag;
    3124:	89 81       	ldd	r24, Y+1	; 0x01
}
    3126:	0f 90       	pop	r0
    3128:	0f 90       	pop	r0
    312a:	0f 90       	pop	r0
    312c:	cf 91       	pop	r28
    312e:	df 91       	pop	r29
    3130:	08 95       	ret

00003132 <enu_ReverseInteger>:

static ErrorState_t enu_ReverseInteger(u32* Copy_pu32_Num)
{
    3132:	ef 92       	push	r14
    3134:	ff 92       	push	r15
    3136:	0f 93       	push	r16
    3138:	1f 93       	push	r17
    313a:	df 93       	push	r29
    313c:	cf 93       	push	r28
    313e:	cd b7       	in	r28, 0x3d	; 61
    3140:	de b7       	in	r29, 0x3e	; 62
    3142:	27 97       	sbiw	r28, 0x07	; 7
    3144:	0f b6       	in	r0, 0x3f	; 63
    3146:	f8 94       	cli
    3148:	de bf       	out	0x3e, r29	; 62
    314a:	0f be       	out	0x3f, r0	; 63
    314c:	cd bf       	out	0x3d, r28	; 61
    314e:	9f 83       	std	Y+7, r25	; 0x07
    3150:	8e 83       	std	Y+6, r24	; 0x06
    //Must cast any to u32 when using this function

    u8 Local_u8_ErrorFlag = ES_OK;
    3152:	1d 82       	std	Y+5, r1	; 0x05

    if(Copy_pu32_Num)
    3154:	8e 81       	ldd	r24, Y+6	; 0x06
    3156:	9f 81       	ldd	r25, Y+7	; 0x07
    3158:	00 97       	sbiw	r24, 0x00	; 0
    315a:	09 f4       	brne	.+2      	; 0x315e <enu_ReverseInteger+0x2c>
    315c:	58 c0       	rjmp	.+176    	; 0x320e <enu_ReverseInteger+0xdc>
    {   
        u32 Local_u32_ReversedNum = 0;
    315e:	19 82       	std	Y+1, r1	; 0x01
    3160:	1a 82       	std	Y+2, r1	; 0x02
    3162:	1b 82       	std	Y+3, r1	; 0x03
    3164:	1c 82       	std	Y+4, r1	; 0x04
    3166:	3c c0       	rjmp	.+120    	; 0x31e0 <enu_ReverseInteger+0xae>
        while(*Copy_pu32_Num)
        {
            Local_u32_ReversedNum = (Local_u32_ReversedNum*10) + (*Copy_pu32_Num % 10);
    3168:	89 81       	ldd	r24, Y+1	; 0x01
    316a:	9a 81       	ldd	r25, Y+2	; 0x02
    316c:	ab 81       	ldd	r26, Y+3	; 0x03
    316e:	bc 81       	ldd	r27, Y+4	; 0x04
    3170:	2a e0       	ldi	r18, 0x0A	; 10
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	40 e0       	ldi	r20, 0x00	; 0
    3176:	50 e0       	ldi	r21, 0x00	; 0
    3178:	bc 01       	movw	r22, r24
    317a:	cd 01       	movw	r24, r26
    317c:	0e 94 94 22 	call	0x4528	; 0x4528 <__mulsi3>
    3180:	7b 01       	movw	r14, r22
    3182:	8c 01       	movw	r16, r24
    3184:	ee 81       	ldd	r30, Y+6	; 0x06
    3186:	ff 81       	ldd	r31, Y+7	; 0x07
    3188:	80 81       	ld	r24, Z
    318a:	91 81       	ldd	r25, Z+1	; 0x01
    318c:	a2 81       	ldd	r26, Z+2	; 0x02
    318e:	b3 81       	ldd	r27, Z+3	; 0x03
    3190:	2a e0       	ldi	r18, 0x0A	; 10
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	40 e0       	ldi	r20, 0x00	; 0
    3196:	50 e0       	ldi	r21, 0x00	; 0
    3198:	bc 01       	movw	r22, r24
    319a:	cd 01       	movw	r24, r26
    319c:	0e 94 b3 22 	call	0x4566	; 0x4566 <__udivmodsi4>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	8e 0d       	add	r24, r14
    31a6:	9f 1d       	adc	r25, r15
    31a8:	a0 1f       	adc	r26, r16
    31aa:	b1 1f       	adc	r27, r17
    31ac:	89 83       	std	Y+1, r24	; 0x01
    31ae:	9a 83       	std	Y+2, r25	; 0x02
    31b0:	ab 83       	std	Y+3, r26	; 0x03
    31b2:	bc 83       	std	Y+4, r27	; 0x04
            *Copy_pu32_Num /= 10;
    31b4:	ee 81       	ldd	r30, Y+6	; 0x06
    31b6:	ff 81       	ldd	r31, Y+7	; 0x07
    31b8:	80 81       	ld	r24, Z
    31ba:	91 81       	ldd	r25, Z+1	; 0x01
    31bc:	a2 81       	ldd	r26, Z+2	; 0x02
    31be:	b3 81       	ldd	r27, Z+3	; 0x03
    31c0:	2a e0       	ldi	r18, 0x0A	; 10
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	40 e0       	ldi	r20, 0x00	; 0
    31c6:	50 e0       	ldi	r21, 0x00	; 0
    31c8:	bc 01       	movw	r22, r24
    31ca:	cd 01       	movw	r24, r26
    31cc:	0e 94 b3 22 	call	0x4566	; 0x4566 <__udivmodsi4>
    31d0:	da 01       	movw	r26, r20
    31d2:	c9 01       	movw	r24, r18
    31d4:	ee 81       	ldd	r30, Y+6	; 0x06
    31d6:	ff 81       	ldd	r31, Y+7	; 0x07
    31d8:	80 83       	st	Z, r24
    31da:	91 83       	std	Z+1, r25	; 0x01
    31dc:	a2 83       	std	Z+2, r26	; 0x02
    31de:	b3 83       	std	Z+3, r27	; 0x03
    u8 Local_u8_ErrorFlag = ES_OK;

    if(Copy_pu32_Num)
    {   
        u32 Local_u32_ReversedNum = 0;
        while(*Copy_pu32_Num)
    31e0:	ee 81       	ldd	r30, Y+6	; 0x06
    31e2:	ff 81       	ldd	r31, Y+7	; 0x07
    31e4:	80 81       	ld	r24, Z
    31e6:	91 81       	ldd	r25, Z+1	; 0x01
    31e8:	a2 81       	ldd	r26, Z+2	; 0x02
    31ea:	b3 81       	ldd	r27, Z+3	; 0x03
    31ec:	00 97       	sbiw	r24, 0x00	; 0
    31ee:	a1 05       	cpc	r26, r1
    31f0:	b1 05       	cpc	r27, r1
    31f2:	09 f0       	breq	.+2      	; 0x31f6 <enu_ReverseInteger+0xc4>
    31f4:	b9 cf       	rjmp	.-142    	; 0x3168 <enu_ReverseInteger+0x36>
        {
            Local_u32_ReversedNum = (Local_u32_ReversedNum*10) + (*Copy_pu32_Num % 10);
            *Copy_pu32_Num /= 10;
        }

        *Copy_pu32_Num = Local_u32_ReversedNum;
    31f6:	ee 81       	ldd	r30, Y+6	; 0x06
    31f8:	ff 81       	ldd	r31, Y+7	; 0x07
    31fa:	89 81       	ldd	r24, Y+1	; 0x01
    31fc:	9a 81       	ldd	r25, Y+2	; 0x02
    31fe:	ab 81       	ldd	r26, Y+3	; 0x03
    3200:	bc 81       	ldd	r27, Y+4	; 0x04
    3202:	80 83       	st	Z, r24
    3204:	91 83       	std	Z+1, r25	; 0x01
    3206:	a2 83       	std	Z+2, r26	; 0x02
    3208:	b3 83       	std	Z+3, r27	; 0x03

        Local_u8_ErrorFlag = ES_OK;
    320a:	1d 82       	std	Y+5, r1	; 0x05
    320c:	02 c0       	rjmp	.+4      	; 0x3212 <enu_ReverseInteger+0xe0>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    320e:	83 e0       	ldi	r24, 0x03	; 3
    3210:	8d 83       	std	Y+5, r24	; 0x05
    }

    return Local_u8_ErrorFlag;
    3212:	8d 81       	ldd	r24, Y+5	; 0x05
    3214:	27 96       	adiw	r28, 0x07	; 7
    3216:	0f b6       	in	r0, 0x3f	; 63
    3218:	f8 94       	cli
    321a:	de bf       	out	0x3e, r29	; 62
    321c:	0f be       	out	0x3f, r0	; 63
    321e:	cd bf       	out	0x3d, r28	; 61
    3220:	cf 91       	pop	r28
    3222:	df 91       	pop	r29
    3224:	1f 91       	pop	r17
    3226:	0f 91       	pop	r16
    3228:	ff 90       	pop	r15
    322a:	ef 90       	pop	r14
    322c:	08 95       	ret

0000322e <Keypad_enu_Initialization>:
//Initializes all buttons with KEYPAD_NOT_PRESSED_STATE (0)
static u8 au8_KeysStates [KEYPAD_ROWS_NUMBER][KEYPAD_COLUMNS_NUMBER]= {KEYPAD_NOT_PRESSED_STATE};


extern ErrorState_t Keypad_enu_Initialization(void)
{
    322e:	df 93       	push	r29
    3230:	cf 93       	push	r28
    3232:	00 d0       	rcall	.+0      	; 0x3234 <Keypad_enu_Initialization+0x6>
    3234:	cd b7       	in	r28, 0x3d	; 61
    3236:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3238:	81 e0       	ldi	r24, 0x01	; 1
    323a:	8a 83       	std	Y+2, r24	; 0x02


    #if (KEYPAD_ROWS_NUMBER >= 1 && KEYPAD_ROWS_NUMBER <= KEYPAD_ROWS_MAX_NUMBER) && (KEYPAD_COLUMNS_NUMBER >= 1 && KEYPAD_COLUMNS_NUMBER <= KEYPAD_COLUMNS_MAX_NUMBER )
        u8 Local_u8_Counter = 0;
    323c:	19 82       	std	Y+1, r1	; 0x01

        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_ROWS_NUMBER; Local_u8_Counter++)
    323e:	19 82       	std	Y+1, r1	; 0x01
    3240:	31 c0       	rjmp	.+98     	; 0x32a4 <Keypad_enu_Initialization+0x76>
        {
            DIO_enu_SetPinDiretion(au8_Rows[Local_u8_Counter].Switch_Group,au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
    3242:	89 81       	ldd	r24, Y+1	; 0x01
    3244:	88 2f       	mov	r24, r24
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	88 0f       	add	r24, r24
    324a:	99 1f       	adc	r25, r25
    324c:	fc 01       	movw	r30, r24
    324e:	e4 5e       	subi	r30, 0xE4	; 228
    3250:	fd 4f       	sbci	r31, 0xFD	; 253
    3252:	20 81       	ld	r18, Z
    3254:	89 81       	ldd	r24, Y+1	; 0x01
    3256:	88 2f       	mov	r24, r24
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	88 0f       	add	r24, r24
    325c:	99 1f       	adc	r25, r25
    325e:	fc 01       	movw	r30, r24
    3260:	e3 5e       	subi	r30, 0xE3	; 227
    3262:	fd 4f       	sbci	r31, 0xFD	; 253
    3264:	90 81       	ld	r25, Z
    3266:	82 2f       	mov	r24, r18
    3268:	69 2f       	mov	r22, r25
    326a:	40 e0       	ldi	r20, 0x00	; 0
    326c:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_enu_SetPinDiretion>
            DIO_enu_SetPinState(au8_Rows[Local_u8_Counter].Switch_Group,au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
    3270:	89 81       	ldd	r24, Y+1	; 0x01
    3272:	88 2f       	mov	r24, r24
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	88 0f       	add	r24, r24
    3278:	99 1f       	adc	r25, r25
    327a:	fc 01       	movw	r30, r24
    327c:	e4 5e       	subi	r30, 0xE4	; 228
    327e:	fd 4f       	sbci	r31, 0xFD	; 253
    3280:	20 81       	ld	r18, Z
    3282:	89 81       	ldd	r24, Y+1	; 0x01
    3284:	88 2f       	mov	r24, r24
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	88 0f       	add	r24, r24
    328a:	99 1f       	adc	r25, r25
    328c:	fc 01       	movw	r30, r24
    328e:	e3 5e       	subi	r30, 0xE3	; 227
    3290:	fd 4f       	sbci	r31, 0xFD	; 253
    3292:	90 81       	ld	r25, Z
    3294:	82 2f       	mov	r24, r18
    3296:	69 2f       	mov	r22, r25
    3298:	41 e0       	ldi	r20, 0x01	; 1
    329a:	0e 94 b0 07 	call	0xf60	; 0xf60 <DIO_enu_SetPinState>


    #if (KEYPAD_ROWS_NUMBER >= 1 && KEYPAD_ROWS_NUMBER <= KEYPAD_ROWS_MAX_NUMBER) && (KEYPAD_COLUMNS_NUMBER >= 1 && KEYPAD_COLUMNS_NUMBER <= KEYPAD_COLUMNS_MAX_NUMBER )
        u8 Local_u8_Counter = 0;

        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_ROWS_NUMBER; Local_u8_Counter++)
    329e:	89 81       	ldd	r24, Y+1	; 0x01
    32a0:	8f 5f       	subi	r24, 0xFF	; 255
    32a2:	89 83       	std	Y+1, r24	; 0x01
    32a4:	89 81       	ldd	r24, Y+1	; 0x01
    32a6:	84 30       	cpi	r24, 0x04	; 4
    32a8:	60 f2       	brcs	.-104    	; 0x3242 <Keypad_enu_Initialization+0x14>
        {
            DIO_enu_SetPinDiretion(au8_Rows[Local_u8_Counter].Switch_Group,au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
            DIO_enu_SetPinState(au8_Rows[Local_u8_Counter].Switch_Group,au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
        }

        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_COLUMNS_NUMBER; Local_u8_Counter++)
    32aa:	19 82       	std	Y+1, r1	; 0x01
    32ac:	31 c0       	rjmp	.+98     	; 0x3310 <Keypad_enu_Initialization+0xe2>
        {
            DIO_enu_SetPinDiretion(au8_Columns[Local_u8_Counter].Switch_Group,au8_Columns[Local_u8_Counter].Switch_Pin,DIO_PIN_WRITE);
    32ae:	89 81       	ldd	r24, Y+1	; 0x01
    32b0:	88 2f       	mov	r24, r24
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	88 0f       	add	r24, r24
    32b6:	99 1f       	adc	r25, r25
    32b8:	fc 01       	movw	r30, r24
    32ba:	ec 5d       	subi	r30, 0xDC	; 220
    32bc:	fd 4f       	sbci	r31, 0xFD	; 253
    32be:	20 81       	ld	r18, Z
    32c0:	89 81       	ldd	r24, Y+1	; 0x01
    32c2:	88 2f       	mov	r24, r24
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	88 0f       	add	r24, r24
    32c8:	99 1f       	adc	r25, r25
    32ca:	fc 01       	movw	r30, r24
    32cc:	eb 5d       	subi	r30, 0xDB	; 219
    32ce:	fd 4f       	sbci	r31, 0xFD	; 253
    32d0:	90 81       	ld	r25, Z
    32d2:	82 2f       	mov	r24, r18
    32d4:	69 2f       	mov	r22, r25
    32d6:	41 e0       	ldi	r20, 0x01	; 1
    32d8:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_enu_SetPinDiretion>
            DIO_enu_SetPinState(au8_Columns[Local_u8_Counter].Switch_Group,au8_Columns[Local_u8_Counter].Switch_Pin,DIO_LOW);
    32dc:	89 81       	ldd	r24, Y+1	; 0x01
    32de:	88 2f       	mov	r24, r24
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	88 0f       	add	r24, r24
    32e4:	99 1f       	adc	r25, r25
    32e6:	fc 01       	movw	r30, r24
    32e8:	ec 5d       	subi	r30, 0xDC	; 220
    32ea:	fd 4f       	sbci	r31, 0xFD	; 253
    32ec:	20 81       	ld	r18, Z
    32ee:	89 81       	ldd	r24, Y+1	; 0x01
    32f0:	88 2f       	mov	r24, r24
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	88 0f       	add	r24, r24
    32f6:	99 1f       	adc	r25, r25
    32f8:	fc 01       	movw	r30, r24
    32fa:	eb 5d       	subi	r30, 0xDB	; 219
    32fc:	fd 4f       	sbci	r31, 0xFD	; 253
    32fe:	90 81       	ld	r25, Z
    3300:	82 2f       	mov	r24, r18
    3302:	69 2f       	mov	r22, r25
    3304:	40 e0       	ldi	r20, 0x00	; 0
    3306:	0e 94 b0 07 	call	0xf60	; 0xf60 <DIO_enu_SetPinState>
        {
            DIO_enu_SetPinDiretion(au8_Rows[Local_u8_Counter].Switch_Group,au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
            DIO_enu_SetPinState(au8_Rows[Local_u8_Counter].Switch_Group,au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
        }

        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_COLUMNS_NUMBER; Local_u8_Counter++)
    330a:	89 81       	ldd	r24, Y+1	; 0x01
    330c:	8f 5f       	subi	r24, 0xFF	; 255
    330e:	89 83       	std	Y+1, r24	; 0x01
    3310:	89 81       	ldd	r24, Y+1	; 0x01
    3312:	84 30       	cpi	r24, 0x04	; 4
    3314:	60 f2       	brcs	.-104    	; 0x32ae <Keypad_enu_Initialization+0x80>
        {
            DIO_enu_SetPinDiretion(au8_Columns[Local_u8_Counter].Switch_Group,au8_Columns[Local_u8_Counter].Switch_Pin,DIO_PIN_WRITE);
            DIO_enu_SetPinState(au8_Columns[Local_u8_Counter].Switch_Group,au8_Columns[Local_u8_Counter].Switch_Pin,DIO_LOW);
        }

        Local_u8_ErrorFlag = ES_OK;
    3316:	1a 82       	std	Y+2, r1	; 0x02
    #else

        #error "Maximum number or rows or columns is exceeded"
    #endif

    return Local_u8_ErrorFlag;
    3318:	8a 81       	ldd	r24, Y+2	; 0x02

}
    331a:	0f 90       	pop	r0
    331c:	0f 90       	pop	r0
    331e:	cf 91       	pop	r28
    3320:	df 91       	pop	r29
    3322:	08 95       	ret

00003324 <Keypad_enu_GetButtonPressedValue>:

extern ErrorState_t Keypad_enu_GetButtonPressedValue(u8* Copy_pu8_ButtonValue)
{
    3324:	df 93       	push	r29
    3326:	cf 93       	push	r28
    3328:	cd b7       	in	r28, 0x3d	; 61
    332a:	de b7       	in	r29, 0x3e	; 62
    332c:	aa 97       	sbiw	r28, 0x2a	; 42
    332e:	0f b6       	in	r0, 0x3f	; 63
    3330:	f8 94       	cli
    3332:	de bf       	out	0x3e, r29	; 62
    3334:	0f be       	out	0x3f, r0	; 63
    3336:	cd bf       	out	0x3d, r28	; 61
    3338:	9d a3       	std	Y+37, r25	; 0x25
    333a:	8c a3       	std	Y+36, r24	; 0x24
    u8 Local_u8_ErrorFlag = ES_NOK;
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	8a 8b       	std	Y+18, r24	; 0x12

    if(Copy_pu8_ButtonValue)
    3340:	8c a1       	ldd	r24, Y+36	; 0x24
    3342:	9d a1       	ldd	r25, Y+37	; 0x25
    3344:	00 97       	sbiw	r24, 0x00	; 0
    3346:	09 f4       	brne	.+2      	; 0x334a <Keypad_enu_GetButtonPressedValue+0x26>
    3348:	cd c1       	rjmp	.+922    	; 0x36e4 <Keypad_enu_GetButtonPressedValue+0x3c0>
    {
        u8 Local_u8_RowCounter = 0;
    334a:	19 8a       	std	Y+17, r1	; 0x11
        u8 Local_u8_ColumnCounter = 0;
    334c:	18 8a       	std	Y+16, r1	; 0x10

        u8 Local_u8_RowValue;
        Bool Local_bool_FoundFlag = False;
    334e:	1f 86       	std	Y+15, r1	; 0x0f

        *Copy_pu8_ButtonValue = KEYPAD_NOT_PRESSED_VALUE;
    3350:	ec a1       	ldd	r30, Y+36	; 0x24
    3352:	fd a1       	ldd	r31, Y+37	; 0x25
    3354:	8f ef       	ldi	r24, 0xFF	; 255
    3356:	80 83       	st	Z, r24


        for(Local_u8_RowCounter = 0; Local_u8_RowCounter < KEYPAD_ROWS_NUMBER; Local_u8_RowCounter++)
    3358:	19 8a       	std	Y+17, r1	; 0x11
    335a:	bf c1       	rjmp	.+894    	; 0x36da <Keypad_enu_GetButtonPressedValue+0x3b6>
        {
            //scanning the rows for any closed switches
            DIO_enu_GetPinValue(au8_Rows[Local_u8_RowCounter].Switch_Group,au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);
    335c:	89 89       	ldd	r24, Y+17	; 0x11
    335e:	88 2f       	mov	r24, r24
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	88 0f       	add	r24, r24
    3364:	99 1f       	adc	r25, r25
    3366:	fc 01       	movw	r30, r24
    3368:	e4 5e       	subi	r30, 0xE4	; 228
    336a:	fd 4f       	sbci	r31, 0xFD	; 253
    336c:	40 81       	ld	r20, Z
    336e:	89 89       	ldd	r24, Y+17	; 0x11
    3370:	88 2f       	mov	r24, r24
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	88 0f       	add	r24, r24
    3376:	99 1f       	adc	r25, r25
    3378:	fc 01       	movw	r30, r24
    337a:	e3 5e       	subi	r30, 0xE3	; 227
    337c:	fd 4f       	sbci	r31, 0xFD	; 253
    337e:	90 81       	ld	r25, Z
    3380:	9e 01       	movw	r18, r28
    3382:	2d 5e       	subi	r18, 0xED	; 237
    3384:	3f 4f       	sbci	r19, 0xFF	; 255
    3386:	84 2f       	mov	r24, r20
    3388:	69 2f       	mov	r22, r25
    338a:	a9 01       	movw	r20, r18
    338c:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_enu_GetPinValue>

            if(Local_u8_RowValue == DIO_LOW)
    3390:	8b 89       	ldd	r24, Y+19	; 0x13
    3392:	88 23       	and	r24, r24
    3394:	09 f0       	breq	.+2      	; 0x3398 <Keypad_enu_GetButtonPressedValue+0x74>
    3396:	71 c1       	rjmp	.+738    	; 0x367a <Keypad_enu_GetButtonPressedValue+0x356>
    3398:	80 e0       	ldi	r24, 0x00	; 0
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	a0 e4       	ldi	r26, 0x40	; 64
    339e:	b0 e4       	ldi	r27, 0x40	; 64
    33a0:	8b 87       	std	Y+11, r24	; 0x0b
    33a2:	9c 87       	std	Y+12, r25	; 0x0c
    33a4:	ad 87       	std	Y+13, r26	; 0x0d
    33a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    33aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    33ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    33ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    33b0:	20 e0       	ldi	r18, 0x00	; 0
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	4a e7       	ldi	r20, 0x7A	; 122
    33b6:	55 e4       	ldi	r21, 0x45	; 69
    33b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33bc:	dc 01       	movw	r26, r24
    33be:	cb 01       	movw	r24, r22
    33c0:	8f 83       	std	Y+7, r24	; 0x07
    33c2:	98 87       	std	Y+8, r25	; 0x08
    33c4:	a9 87       	std	Y+9, r26	; 0x09
    33c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33c8:	6f 81       	ldd	r22, Y+7	; 0x07
    33ca:	78 85       	ldd	r23, Y+8	; 0x08
    33cc:	89 85       	ldd	r24, Y+9	; 0x09
    33ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    33d0:	20 e0       	ldi	r18, 0x00	; 0
    33d2:	30 e0       	ldi	r19, 0x00	; 0
    33d4:	40 e8       	ldi	r20, 0x80	; 128
    33d6:	5f e3       	ldi	r21, 0x3F	; 63
    33d8:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    33dc:	88 23       	and	r24, r24
    33de:	2c f4       	brge	.+10     	; 0x33ea <Keypad_enu_GetButtonPressedValue+0xc6>
		__ticks = 1;
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	90 e0       	ldi	r25, 0x00	; 0
    33e4:	9e 83       	std	Y+6, r25	; 0x06
    33e6:	8d 83       	std	Y+5, r24	; 0x05
    33e8:	3f c0       	rjmp	.+126    	; 0x3468 <Keypad_enu_GetButtonPressedValue+0x144>
	else if (__tmp > 65535)
    33ea:	6f 81       	ldd	r22, Y+7	; 0x07
    33ec:	78 85       	ldd	r23, Y+8	; 0x08
    33ee:	89 85       	ldd	r24, Y+9	; 0x09
    33f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33f2:	20 e0       	ldi	r18, 0x00	; 0
    33f4:	3f ef       	ldi	r19, 0xFF	; 255
    33f6:	4f e7       	ldi	r20, 0x7F	; 127
    33f8:	57 e4       	ldi	r21, 0x47	; 71
    33fa:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    33fe:	18 16       	cp	r1, r24
    3400:	4c f5       	brge	.+82     	; 0x3454 <Keypad_enu_GetButtonPressedValue+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3402:	6b 85       	ldd	r22, Y+11	; 0x0b
    3404:	7c 85       	ldd	r23, Y+12	; 0x0c
    3406:	8d 85       	ldd	r24, Y+13	; 0x0d
    3408:	9e 85       	ldd	r25, Y+14	; 0x0e
    340a:	20 e0       	ldi	r18, 0x00	; 0
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	40 e2       	ldi	r20, 0x20	; 32
    3410:	51 e4       	ldi	r21, 0x41	; 65
    3412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3416:	dc 01       	movw	r26, r24
    3418:	cb 01       	movw	r24, r22
    341a:	bc 01       	movw	r22, r24
    341c:	cd 01       	movw	r24, r26
    341e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3422:	dc 01       	movw	r26, r24
    3424:	cb 01       	movw	r24, r22
    3426:	9e 83       	std	Y+6, r25	; 0x06
    3428:	8d 83       	std	Y+5, r24	; 0x05
    342a:	0f c0       	rjmp	.+30     	; 0x344a <Keypad_enu_GetButtonPressedValue+0x126>
    342c:	80 e9       	ldi	r24, 0x90	; 144
    342e:	91 e0       	ldi	r25, 0x01	; 1
    3430:	9c 83       	std	Y+4, r25	; 0x04
    3432:	8b 83       	std	Y+3, r24	; 0x03
    3434:	8b 81       	ldd	r24, Y+3	; 0x03
    3436:	9c 81       	ldd	r25, Y+4	; 0x04
    3438:	01 97       	sbiw	r24, 0x01	; 1
    343a:	f1 f7       	brne	.-4      	; 0x3438 <Keypad_enu_GetButtonPressedValue+0x114>
    343c:	9c 83       	std	Y+4, r25	; 0x04
    343e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3440:	8d 81       	ldd	r24, Y+5	; 0x05
    3442:	9e 81       	ldd	r25, Y+6	; 0x06
    3444:	01 97       	sbiw	r24, 0x01	; 1
    3446:	9e 83       	std	Y+6, r25	; 0x06
    3448:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    344a:	8d 81       	ldd	r24, Y+5	; 0x05
    344c:	9e 81       	ldd	r25, Y+6	; 0x06
    344e:	00 97       	sbiw	r24, 0x00	; 0
    3450:	69 f7       	brne	.-38     	; 0x342c <Keypad_enu_GetButtonPressedValue+0x108>
    3452:	14 c0       	rjmp	.+40     	; 0x347c <Keypad_enu_GetButtonPressedValue+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3454:	6f 81       	ldd	r22, Y+7	; 0x07
    3456:	78 85       	ldd	r23, Y+8	; 0x08
    3458:	89 85       	ldd	r24, Y+9	; 0x09
    345a:	9a 85       	ldd	r25, Y+10	; 0x0a
    345c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3460:	dc 01       	movw	r26, r24
    3462:	cb 01       	movw	r24, r22
    3464:	9e 83       	std	Y+6, r25	; 0x06
    3466:	8d 83       	std	Y+5, r24	; 0x05
    3468:	8d 81       	ldd	r24, Y+5	; 0x05
    346a:	9e 81       	ldd	r25, Y+6	; 0x06
    346c:	9a 83       	std	Y+2, r25	; 0x02
    346e:	89 83       	std	Y+1, r24	; 0x01
    3470:	89 81       	ldd	r24, Y+1	; 0x01
    3472:	9a 81       	ldd	r25, Y+2	; 0x02
    3474:	01 97       	sbiw	r24, 0x01	; 1
    3476:	f1 f7       	brne	.-4      	; 0x3474 <Keypad_enu_GetButtonPressedValue+0x150>
    3478:	9a 83       	std	Y+2, r25	; 0x02
    347a:	89 83       	std	Y+1, r24	; 0x01
            {
                //Reperforming the check to prevent mechanica oscillations from triggerring the system
                _delay_ms(3);
                //scanning the rows for any closed switches
                DIO_enu_GetPinValue(au8_Rows[Local_u8_RowCounter].Switch_Group,au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);
    347c:	89 89       	ldd	r24, Y+17	; 0x11
    347e:	88 2f       	mov	r24, r24
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	88 0f       	add	r24, r24
    3484:	99 1f       	adc	r25, r25
    3486:	fc 01       	movw	r30, r24
    3488:	e4 5e       	subi	r30, 0xE4	; 228
    348a:	fd 4f       	sbci	r31, 0xFD	; 253
    348c:	40 81       	ld	r20, Z
    348e:	89 89       	ldd	r24, Y+17	; 0x11
    3490:	88 2f       	mov	r24, r24
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	88 0f       	add	r24, r24
    3496:	99 1f       	adc	r25, r25
    3498:	fc 01       	movw	r30, r24
    349a:	e3 5e       	subi	r30, 0xE3	; 227
    349c:	fd 4f       	sbci	r31, 0xFD	; 253
    349e:	90 81       	ld	r25, Z
    34a0:	9e 01       	movw	r18, r28
    34a2:	2d 5e       	subi	r18, 0xED	; 237
    34a4:	3f 4f       	sbci	r19, 0xFF	; 255
    34a6:	84 2f       	mov	r24, r20
    34a8:	69 2f       	mov	r22, r25
    34aa:	a9 01       	movw	r20, r18
    34ac:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_enu_GetPinValue>

                if(Local_u8_RowValue == DIO_LOW)
    34b0:	8b 89       	ldd	r24, Y+19	; 0x13
    34b2:	88 23       	and	r24, r24
    34b4:	09 f0       	breq	.+2      	; 0x34b8 <Keypad_enu_GetButtonPressedValue+0x194>
    34b6:	0e c1       	rjmp	.+540    	; 0x36d4 <Keypad_enu_GetButtonPressedValue+0x3b0>
                {

                    for(Local_u8_ColumnCounter =0; Local_u8_ColumnCounter < KEYPAD_COLUMNS_NUMBER; Local_u8_ColumnCounter++)
    34b8:	18 8a       	std	Y+16, r1	; 0x10
    34ba:	d7 c0       	rjmp	.+430    	; 0x366a <Keypad_enu_GetButtonPressedValue+0x346>
                    {
                        //Placing a high signal on the column
                        DIO_enu_SetPinValue(au8_Columns[Local_u8_ColumnCounter].Switch_Group,au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_HIGH);
    34bc:	88 89       	ldd	r24, Y+16	; 0x10
    34be:	88 2f       	mov	r24, r24
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	88 0f       	add	r24, r24
    34c4:	99 1f       	adc	r25, r25
    34c6:	fc 01       	movw	r30, r24
    34c8:	ec 5d       	subi	r30, 0xDC	; 220
    34ca:	fd 4f       	sbci	r31, 0xFD	; 253
    34cc:	20 81       	ld	r18, Z
    34ce:	88 89       	ldd	r24, Y+16	; 0x10
    34d0:	88 2f       	mov	r24, r24
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	88 0f       	add	r24, r24
    34d6:	99 1f       	adc	r25, r25
    34d8:	fc 01       	movw	r30, r24
    34da:	eb 5d       	subi	r30, 0xDB	; 219
    34dc:	fd 4f       	sbci	r31, 0xFD	; 253
    34de:	90 81       	ld	r25, Z
    34e0:	82 2f       	mov	r24, r18
    34e2:	69 2f       	mov	r22, r25
    34e4:	41 e0       	ldi	r20, 0x01	; 1
    34e6:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
                        //getting the value of the row
                        DIO_enu_GetPinValue(au8_Rows[Local_u8_RowCounter].Switch_Group,au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);
    34ea:	89 89       	ldd	r24, Y+17	; 0x11
    34ec:	88 2f       	mov	r24, r24
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	88 0f       	add	r24, r24
    34f2:	99 1f       	adc	r25, r25
    34f4:	fc 01       	movw	r30, r24
    34f6:	e4 5e       	subi	r30, 0xE4	; 228
    34f8:	fd 4f       	sbci	r31, 0xFD	; 253
    34fa:	40 81       	ld	r20, Z
    34fc:	89 89       	ldd	r24, Y+17	; 0x11
    34fe:	88 2f       	mov	r24, r24
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	88 0f       	add	r24, r24
    3504:	99 1f       	adc	r25, r25
    3506:	fc 01       	movw	r30, r24
    3508:	e3 5e       	subi	r30, 0xE3	; 227
    350a:	fd 4f       	sbci	r31, 0xFD	; 253
    350c:	90 81       	ld	r25, Z
    350e:	9e 01       	movw	r18, r28
    3510:	2d 5e       	subi	r18, 0xED	; 237
    3512:	3f 4f       	sbci	r19, 0xFF	; 255
    3514:	84 2f       	mov	r24, r20
    3516:	69 2f       	mov	r22, r25
    3518:	a9 01       	movw	r20, r18
    351a:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_enu_GetPinValue>

                        if(Local_u8_RowValue == DIO_HIGH)
    351e:	8b 89       	ldd	r24, Y+19	; 0x13
    3520:	81 30       	cpi	r24, 0x01	; 1
    3522:	09 f0       	breq	.+2      	; 0x3526 <Keypad_enu_GetButtonPressedValue+0x202>
    3524:	77 c0       	rjmp	.+238    	; 0x3614 <Keypad_enu_GetButtonPressedValue+0x2f0>
                        {
                            if(au8_KeysStates[Local_u8_RowCounter][Local_u8_ColumnCounter] == KEYPAD_NOT_PRESSED_STATE)
    3526:	89 89       	ldd	r24, Y+17	; 0x11
    3528:	48 2f       	mov	r20, r24
    352a:	50 e0       	ldi	r21, 0x00	; 0
    352c:	88 89       	ldd	r24, Y+16	; 0x10
    352e:	28 2f       	mov	r18, r24
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	ca 01       	movw	r24, r20
    3534:	88 0f       	add	r24, r24
    3536:	99 1f       	adc	r25, r25
    3538:	88 0f       	add	r24, r24
    353a:	99 1f       	adc	r25, r25
    353c:	82 0f       	add	r24, r18
    353e:	93 1f       	adc	r25, r19
    3540:	fc 01       	movw	r30, r24
    3542:	e8 58       	subi	r30, 0x88	; 136
    3544:	fd 4f       	sbci	r31, 0xFD	; 253
    3546:	80 81       	ld	r24, Z
    3548:	88 23       	and	r24, r24
    354a:	09 f0       	breq	.+2      	; 0x354e <Keypad_enu_GetButtonPressedValue+0x22a>
    354c:	74 c0       	rjmp	.+232    	; 0x3636 <Keypad_enu_GetButtonPressedValue+0x312>
                            {

                                //Creating 2D array
                                u8 Keypad_au8_KeyadValues [KEYPAD_ROWS_NUMBER][KEYPAD_COLUMNS_NUMBER] = KEYPAD_KEY_VALUES;
    354e:	ce 01       	movw	r24, r28
    3550:	44 96       	adiw	r24, 0x14	; 20
    3552:	9f a3       	std	Y+39, r25	; 0x27
    3554:	8e a3       	std	Y+38, r24	; 0x26
    3556:	ef e3       	ldi	r30, 0x3F	; 63
    3558:	f2 e0       	ldi	r31, 0x02	; 2
    355a:	f9 a7       	std	Y+41, r31	; 0x29
    355c:	e8 a7       	std	Y+40, r30	; 0x28
    355e:	f0 e1       	ldi	r31, 0x10	; 16
    3560:	fa a7       	std	Y+42, r31	; 0x2a
    3562:	e8 a5       	ldd	r30, Y+40	; 0x28
    3564:	f9 a5       	ldd	r31, Y+41	; 0x29
    3566:	00 80       	ld	r0, Z
    3568:	88 a5       	ldd	r24, Y+40	; 0x28
    356a:	99 a5       	ldd	r25, Y+41	; 0x29
    356c:	01 96       	adiw	r24, 0x01	; 1
    356e:	99 a7       	std	Y+41, r25	; 0x29
    3570:	88 a7       	std	Y+40, r24	; 0x28
    3572:	ee a1       	ldd	r30, Y+38	; 0x26
    3574:	ff a1       	ldd	r31, Y+39	; 0x27
    3576:	00 82       	st	Z, r0
    3578:	8e a1       	ldd	r24, Y+38	; 0x26
    357a:	9f a1       	ldd	r25, Y+39	; 0x27
    357c:	01 96       	adiw	r24, 0x01	; 1
    357e:	9f a3       	std	Y+39, r25	; 0x27
    3580:	8e a3       	std	Y+38, r24	; 0x26
    3582:	9a a5       	ldd	r25, Y+42	; 0x2a
    3584:	91 50       	subi	r25, 0x01	; 1
    3586:	9a a7       	std	Y+42, r25	; 0x2a
    3588:	ea a5       	ldd	r30, Y+42	; 0x2a
    358a:	ee 23       	and	r30, r30
    358c:	51 f7       	brne	.-44     	; 0x3562 <Keypad_enu_GetButtonPressedValue+0x23e>

                                //Placing key Value in button
                                *Copy_pu8_ButtonValue = Keypad_au8_KeyadValues[Local_u8_RowCounter][Local_u8_ColumnCounter];
    358e:	89 89       	ldd	r24, Y+17	; 0x11
    3590:	28 2f       	mov	r18, r24
    3592:	30 e0       	ldi	r19, 0x00	; 0
    3594:	88 89       	ldd	r24, Y+16	; 0x10
    3596:	48 2f       	mov	r20, r24
    3598:	50 e0       	ldi	r21, 0x00	; 0
    359a:	22 0f       	add	r18, r18
    359c:	33 1f       	adc	r19, r19
    359e:	22 0f       	add	r18, r18
    35a0:	33 1f       	adc	r19, r19
    35a2:	ce 01       	movw	r24, r28
    35a4:	01 96       	adiw	r24, 0x01	; 1
    35a6:	82 0f       	add	r24, r18
    35a8:	93 1f       	adc	r25, r19
    35aa:	84 0f       	add	r24, r20
    35ac:	95 1f       	adc	r25, r21
    35ae:	fc 01       	movw	r30, r24
    35b0:	73 96       	adiw	r30, 0x13	; 19
    35b2:	80 81       	ld	r24, Z
    35b4:	ec a1       	ldd	r30, Y+36	; 0x24
    35b6:	fd a1       	ldd	r31, Y+37	; 0x25
    35b8:	80 83       	st	Z, r24

                                //Setting Found flag to break the row loop
                                Local_bool_FoundFlag = True;
    35ba:	81 e0       	ldi	r24, 0x01	; 1
    35bc:	8f 87       	std	Y+15, r24	; 0x0f

                                //Setting the key state to Pressed
                                au8_KeysStates[Local_u8_RowCounter][Local_u8_ColumnCounter] = KEYPAD_PRESSED_STATE;                                
    35be:	89 89       	ldd	r24, Y+17	; 0x11
    35c0:	48 2f       	mov	r20, r24
    35c2:	50 e0       	ldi	r21, 0x00	; 0
    35c4:	88 89       	ldd	r24, Y+16	; 0x10
    35c6:	28 2f       	mov	r18, r24
    35c8:	30 e0       	ldi	r19, 0x00	; 0
    35ca:	ca 01       	movw	r24, r20
    35cc:	88 0f       	add	r24, r24
    35ce:	99 1f       	adc	r25, r25
    35d0:	88 0f       	add	r24, r24
    35d2:	99 1f       	adc	r25, r25
    35d4:	82 0f       	add	r24, r18
    35d6:	93 1f       	adc	r25, r19
    35d8:	fc 01       	movw	r30, r24
    35da:	e8 58       	subi	r30, 0x88	; 136
    35dc:	fd 4f       	sbci	r31, 0xFD	; 253
    35de:	81 e0       	ldi	r24, 0x01	; 1
    35e0:	80 83       	st	Z, r24


                                //Clearing the high signal placed on the column
                                DIO_enu_SetPinValue(au8_Columns[Local_u8_ColumnCounter].Switch_Group,au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_LOW);
    35e2:	88 89       	ldd	r24, Y+16	; 0x10
    35e4:	88 2f       	mov	r24, r24
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	88 0f       	add	r24, r24
    35ea:	99 1f       	adc	r25, r25
    35ec:	fc 01       	movw	r30, r24
    35ee:	ec 5d       	subi	r30, 0xDC	; 220
    35f0:	fd 4f       	sbci	r31, 0xFD	; 253
    35f2:	20 81       	ld	r18, Z
    35f4:	88 89       	ldd	r24, Y+16	; 0x10
    35f6:	88 2f       	mov	r24, r24
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	88 0f       	add	r24, r24
    35fc:	99 1f       	adc	r25, r25
    35fe:	fc 01       	movw	r30, r24
    3600:	eb 5d       	subi	r30, 0xDB	; 219
    3602:	fd 4f       	sbci	r31, 0xFD	; 253
    3604:	90 81       	ld	r25, Z
    3606:	82 2f       	mov	r24, r18
    3608:	69 2f       	mov	r22, r25
    360a:	40 e0       	ldi	r20, 0x00	; 0
    360c:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>

                                Local_u8_ErrorFlag = ES_OK;
    3610:	1a 8a       	std	Y+18, r1	; 0x12
    3612:	2f c0       	rjmp	.+94     	; 0x3672 <Keypad_enu_GetButtonPressedValue+0x34e>

                        }
                        else
                        {
                            //Resetting any keys' states to KEYPAD_NOT_PRESSED_STATE, since the row has a high value            
                            au8_KeysStates [Local_u8_RowCounter][Local_u8_ColumnCounter] = KEYPAD_NOT_PRESSED_STATE;
    3614:	89 89       	ldd	r24, Y+17	; 0x11
    3616:	48 2f       	mov	r20, r24
    3618:	50 e0       	ldi	r21, 0x00	; 0
    361a:	88 89       	ldd	r24, Y+16	; 0x10
    361c:	28 2f       	mov	r18, r24
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	ca 01       	movw	r24, r20
    3622:	88 0f       	add	r24, r24
    3624:	99 1f       	adc	r25, r25
    3626:	88 0f       	add	r24, r24
    3628:	99 1f       	adc	r25, r25
    362a:	82 0f       	add	r24, r18
    362c:	93 1f       	adc	r25, r19
    362e:	fc 01       	movw	r30, r24
    3630:	e8 58       	subi	r30, 0x88	; 136
    3632:	fd 4f       	sbci	r31, 0xFD	; 253
    3634:	10 82       	st	Z, r1
                        }

                        //Clearing the high signal placed on the column
                        DIO_enu_SetPinValue(au8_Columns[Local_u8_ColumnCounter].Switch_Group,au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_LOW);
    3636:	88 89       	ldd	r24, Y+16	; 0x10
    3638:	88 2f       	mov	r24, r24
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	88 0f       	add	r24, r24
    363e:	99 1f       	adc	r25, r25
    3640:	fc 01       	movw	r30, r24
    3642:	ec 5d       	subi	r30, 0xDC	; 220
    3644:	fd 4f       	sbci	r31, 0xFD	; 253
    3646:	20 81       	ld	r18, Z
    3648:	88 89       	ldd	r24, Y+16	; 0x10
    364a:	88 2f       	mov	r24, r24
    364c:	90 e0       	ldi	r25, 0x00	; 0
    364e:	88 0f       	add	r24, r24
    3650:	99 1f       	adc	r25, r25
    3652:	fc 01       	movw	r30, r24
    3654:	eb 5d       	subi	r30, 0xDB	; 219
    3656:	fd 4f       	sbci	r31, 0xFD	; 253
    3658:	90 81       	ld	r25, Z
    365a:	82 2f       	mov	r24, r18
    365c:	69 2f       	mov	r22, r25
    365e:	40 e0       	ldi	r20, 0x00	; 0
    3660:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
                DIO_enu_GetPinValue(au8_Rows[Local_u8_RowCounter].Switch_Group,au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);

                if(Local_u8_RowValue == DIO_LOW)
                {

                    for(Local_u8_ColumnCounter =0; Local_u8_ColumnCounter < KEYPAD_COLUMNS_NUMBER; Local_u8_ColumnCounter++)
    3664:	88 89       	ldd	r24, Y+16	; 0x10
    3666:	8f 5f       	subi	r24, 0xFF	; 255
    3668:	88 8b       	std	Y+16, r24	; 0x10
    366a:	88 89       	ldd	r24, Y+16	; 0x10
    366c:	84 30       	cpi	r24, 0x04	; 4
    366e:	08 f4       	brcc	.+2      	; 0x3672 <Keypad_enu_GetButtonPressedValue+0x34e>
    3670:	25 cf       	rjmp	.-438    	; 0x34bc <Keypad_enu_GetButtonPressedValue+0x198>

                        //Clearing the high signal placed on the column
                        DIO_enu_SetPinValue(au8_Columns[Local_u8_ColumnCounter].Switch_Group,au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_LOW);
                    }

                    if(Local_bool_FoundFlag)
    3672:	8f 85       	ldd	r24, Y+15	; 0x0f
    3674:	88 23       	and	r24, r24
    3676:	c1 f5       	brne	.+112    	; 0x36e8 <Keypad_enu_GetButtonPressedValue+0x3c4>
    3678:	2d c0       	rjmp	.+90     	; 0x36d4 <Keypad_enu_GetButtonPressedValue+0x3b0>

            }
            else
            {
                //Resetting any keys' states to KEYPAD_NOT_PRESSED_STATE, since the row has a high value
                au8_KeysStates[Local_u8_RowCounter][0] = KEYPAD_NOT_PRESSED_STATE;
    367a:	89 89       	ldd	r24, Y+17	; 0x11
    367c:	88 2f       	mov	r24, r24
    367e:	90 e0       	ldi	r25, 0x00	; 0
    3680:	88 0f       	add	r24, r24
    3682:	99 1f       	adc	r25, r25
    3684:	88 0f       	add	r24, r24
    3686:	99 1f       	adc	r25, r25
    3688:	fc 01       	movw	r30, r24
    368a:	e8 58       	subi	r30, 0x88	; 136
    368c:	fd 4f       	sbci	r31, 0xFD	; 253
    368e:	10 82       	st	Z, r1
                au8_KeysStates[Local_u8_RowCounter][1] = KEYPAD_NOT_PRESSED_STATE;
    3690:	89 89       	ldd	r24, Y+17	; 0x11
    3692:	88 2f       	mov	r24, r24
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	88 0f       	add	r24, r24
    3698:	99 1f       	adc	r25, r25
    369a:	88 0f       	add	r24, r24
    369c:	99 1f       	adc	r25, r25
    369e:	fc 01       	movw	r30, r24
    36a0:	e7 58       	subi	r30, 0x87	; 135
    36a2:	fd 4f       	sbci	r31, 0xFD	; 253
    36a4:	10 82       	st	Z, r1
                au8_KeysStates[Local_u8_RowCounter][2] = KEYPAD_NOT_PRESSED_STATE;
    36a6:	89 89       	ldd	r24, Y+17	; 0x11
    36a8:	88 2f       	mov	r24, r24
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	88 0f       	add	r24, r24
    36ae:	99 1f       	adc	r25, r25
    36b0:	01 96       	adiw	r24, 0x01	; 1
    36b2:	88 0f       	add	r24, r24
    36b4:	99 1f       	adc	r25, r25
    36b6:	fc 01       	movw	r30, r24
    36b8:	e8 58       	subi	r30, 0x88	; 136
    36ba:	fd 4f       	sbci	r31, 0xFD	; 253
    36bc:	10 82       	st	Z, r1
                au8_KeysStates[Local_u8_RowCounter][3] = KEYPAD_NOT_PRESSED_STATE;
    36be:	89 89       	ldd	r24, Y+17	; 0x11
    36c0:	88 2f       	mov	r24, r24
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	88 0f       	add	r24, r24
    36c6:	99 1f       	adc	r25, r25
    36c8:	88 0f       	add	r24, r24
    36ca:	99 1f       	adc	r25, r25
    36cc:	fc 01       	movw	r30, r24
    36ce:	e5 58       	subi	r30, 0x85	; 133
    36d0:	fd 4f       	sbci	r31, 0xFD	; 253
    36d2:	10 82       	st	Z, r1
        Bool Local_bool_FoundFlag = False;

        *Copy_pu8_ButtonValue = KEYPAD_NOT_PRESSED_VALUE;


        for(Local_u8_RowCounter = 0; Local_u8_RowCounter < KEYPAD_ROWS_NUMBER; Local_u8_RowCounter++)
    36d4:	89 89       	ldd	r24, Y+17	; 0x11
    36d6:	8f 5f       	subi	r24, 0xFF	; 255
    36d8:	89 8b       	std	Y+17, r24	; 0x11
    36da:	89 89       	ldd	r24, Y+17	; 0x11
    36dc:	84 30       	cpi	r24, 0x04	; 4
    36de:	08 f4       	brcc	.+2      	; 0x36e2 <Keypad_enu_GetButtonPressedValue+0x3be>
    36e0:	3d ce       	rjmp	.-902    	; 0x335c <Keypad_enu_GetButtonPressedValue+0x38>
    36e2:	02 c0       	rjmp	.+4      	; 0x36e8 <Keypad_enu_GetButtonPressedValue+0x3c4>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    36e4:	83 e0       	ldi	r24, 0x03	; 3
    36e6:	8a 8b       	std	Y+18, r24	; 0x12
    }


    return Local_u8_ErrorFlag;
    36e8:	8a 89       	ldd	r24, Y+18	; 0x12

}
    36ea:	aa 96       	adiw	r28, 0x2a	; 42
    36ec:	0f b6       	in	r0, 0x3f	; 63
    36ee:	f8 94       	cli
    36f0:	de bf       	out	0x3e, r29	; 62
    36f2:	0f be       	out	0x3f, r0	; 63
    36f4:	cd bf       	out	0x3d, r28	; 61
    36f6:	cf 91       	pop	r28
    36f8:	df 91       	pop	r29
    36fa:	08 95       	ret

000036fc <Buzzer_enu_Initialization>:
extern Buzzer_t Buzzer_astr_BuzzerList[];

//APIs implementation

extern ErrorState_t Buzzer_enu_Initialization(void)
{
    36fc:	df 93       	push	r29
    36fe:	cf 93       	push	r28
    3700:	00 d0       	rcall	.+0      	; 0x3702 <Buzzer_enu_Initialization+0x6>
    3702:	cd b7       	in	r28, 0x3d	; 61
    3704:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3706:	81 e0       	ldi	r24, 0x01	; 1
    3708:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    370a:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    370c:	19 82       	std	Y+1, r1	; 0x01
    370e:	31 c0       	rjmp	.+98     	; 0x3772 <Buzzer_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_PIN_WRITE);
    3710:	89 81       	ldd	r24, Y+1	; 0x01
    3712:	88 2f       	mov	r24, r24
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	88 0f       	add	r24, r24
    3718:	99 1f       	adc	r25, r25
    371a:	fc 01       	movw	r30, r24
    371c:	e3 5d       	subi	r30, 0xD3	; 211
    371e:	fd 4f       	sbci	r31, 0xFD	; 253
    3720:	20 81       	ld	r18, Z
    3722:	89 81       	ldd	r24, Y+1	; 0x01
    3724:	88 2f       	mov	r24, r24
    3726:	90 e0       	ldi	r25, 0x00	; 0
    3728:	88 0f       	add	r24, r24
    372a:	99 1f       	adc	r25, r25
    372c:	fc 01       	movw	r30, r24
    372e:	e2 5d       	subi	r30, 0xD2	; 210
    3730:	fd 4f       	sbci	r31, 0xFD	; 253
    3732:	90 81       	ld	r25, Z
    3734:	82 2f       	mov	r24, r18
    3736:	69 2f       	mov	r22, r25
    3738:	41 e0       	ldi	r20, 0x01	; 1
    373a:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_LOW);
    373e:	89 81       	ldd	r24, Y+1	; 0x01
    3740:	88 2f       	mov	r24, r24
    3742:	90 e0       	ldi	r25, 0x00	; 0
    3744:	88 0f       	add	r24, r24
    3746:	99 1f       	adc	r25, r25
    3748:	fc 01       	movw	r30, r24
    374a:	e3 5d       	subi	r30, 0xD3	; 211
    374c:	fd 4f       	sbci	r31, 0xFD	; 253
    374e:	20 81       	ld	r18, Z
    3750:	89 81       	ldd	r24, Y+1	; 0x01
    3752:	88 2f       	mov	r24, r24
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	88 0f       	add	r24, r24
    3758:	99 1f       	adc	r25, r25
    375a:	fc 01       	movw	r30, r24
    375c:	e2 5d       	subi	r30, 0xD2	; 210
    375e:	fd 4f       	sbci	r31, 0xFD	; 253
    3760:	90 81       	ld	r25, Z
    3762:	82 2f       	mov	r24, r18
    3764:	69 2f       	mov	r22, r25
    3766:	40 e0       	ldi	r20, 0x00	; 0
    3768:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    376c:	89 81       	ldd	r24, Y+1	; 0x01
    376e:	8f 5f       	subi	r24, 0xFF	; 255
    3770:	89 83       	std	Y+1, r24	; 0x01
    3772:	90 91 2c 02 	lds	r25, 0x022C
    3776:	89 81       	ldd	r24, Y+1	; 0x01
    3778:	89 17       	cp	r24, r25
    377a:	50 f2       	brcs	.-108    	; 0x3710 <Buzzer_enu_Initialization+0x14>
        DIO_enu_SetPinDiretion(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_PIN_WRITE);
        DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_LOW);
    }

    //TO be handled later
    Local_u8_ErrorFlag = ES_OK;
    377c:	1a 82       	std	Y+2, r1	; 0x02




    return Local_u8_ErrorFlag; 
    377e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3780:	0f 90       	pop	r0
    3782:	0f 90       	pop	r0
    3784:	cf 91       	pop	r28
    3786:	df 91       	pop	r29
    3788:	08 95       	ret

0000378a <Buzzer_enu_TuronOnBuzzer>:

extern ErrorState_t Buzzer_enu_TuronOnBuzzer(u8 Copy_u8_BuzzerNumber)
{
    378a:	df 93       	push	r29
    378c:	cf 93       	push	r28
    378e:	00 d0       	rcall	.+0      	; 0x3790 <Buzzer_enu_TuronOnBuzzer+0x6>
    3790:	cd b7       	in	r28, 0x3d	; 61
    3792:	de b7       	in	r29, 0x3e	; 62
    3794:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3796:	81 e0       	ldi	r24, 0x01	; 1
    3798:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_BuzzerNumber < Buzzer_u8_BuzzerCount)
    379a:	90 91 2c 02 	lds	r25, 0x022C
    379e:	8a 81       	ldd	r24, Y+2	; 0x02
    37a0:	89 17       	cp	r24, r25
    37a2:	c8 f4       	brcc	.+50     	; 0x37d6 <Buzzer_enu_TuronOnBuzzer+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Group,Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Pin,DIO_HIGH);
    37a4:	8a 81       	ldd	r24, Y+2	; 0x02
    37a6:	88 2f       	mov	r24, r24
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	88 0f       	add	r24, r24
    37ac:	99 1f       	adc	r25, r25
    37ae:	fc 01       	movw	r30, r24
    37b0:	e3 5d       	subi	r30, 0xD3	; 211
    37b2:	fd 4f       	sbci	r31, 0xFD	; 253
    37b4:	20 81       	ld	r18, Z
    37b6:	8a 81       	ldd	r24, Y+2	; 0x02
    37b8:	88 2f       	mov	r24, r24
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    37bc:	88 0f       	add	r24, r24
    37be:	99 1f       	adc	r25, r25
    37c0:	fc 01       	movw	r30, r24
    37c2:	e2 5d       	subi	r30, 0xD2	; 210
    37c4:	fd 4f       	sbci	r31, 0xFD	; 253
    37c6:	90 81       	ld	r25, Z
    37c8:	82 2f       	mov	r24, r18
    37ca:	69 2f       	mov	r22, r25
    37cc:	41 e0       	ldi	r20, 0x01	; 1
    37ce:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
    37d2:	89 83       	std	Y+1, r24	; 0x01
    37d4:	02 c0       	rjmp	.+4      	; 0x37da <Buzzer_enu_TuronOnBuzzer+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    37d6:	82 e0       	ldi	r24, 0x02	; 2
    37d8:	89 83       	std	Y+1, r24	; 0x01





    return Local_u8_ErrorFlag; 
    37da:	89 81       	ldd	r24, Y+1	; 0x01
}
    37dc:	0f 90       	pop	r0
    37de:	0f 90       	pop	r0
    37e0:	cf 91       	pop	r28
    37e2:	df 91       	pop	r29
    37e4:	08 95       	ret

000037e6 <Buzzer_enu_TuronOffBuzzer>:

extern ErrorState_t Buzzer_enu_TuronOffBuzzer(u8 Copy_u8_BuzzerNumber)
{
    37e6:	df 93       	push	r29
    37e8:	cf 93       	push	r28
    37ea:	00 d0       	rcall	.+0      	; 0x37ec <Buzzer_enu_TuronOffBuzzer+0x6>
    37ec:	cd b7       	in	r28, 0x3d	; 61
    37ee:	de b7       	in	r29, 0x3e	; 62
    37f0:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    37f2:	81 e0       	ldi	r24, 0x01	; 1
    37f4:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_BuzzerNumber < Buzzer_u8_BuzzerCount)
    37f6:	90 91 2c 02 	lds	r25, 0x022C
    37fa:	8a 81       	ldd	r24, Y+2	; 0x02
    37fc:	89 17       	cp	r24, r25
    37fe:	c8 f4       	brcc	.+50     	; 0x3832 <Buzzer_enu_TuronOffBuzzer+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Group,Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Pin,DIO_LOW);
    3800:	8a 81       	ldd	r24, Y+2	; 0x02
    3802:	88 2f       	mov	r24, r24
    3804:	90 e0       	ldi	r25, 0x00	; 0
    3806:	88 0f       	add	r24, r24
    3808:	99 1f       	adc	r25, r25
    380a:	fc 01       	movw	r30, r24
    380c:	e3 5d       	subi	r30, 0xD3	; 211
    380e:	fd 4f       	sbci	r31, 0xFD	; 253
    3810:	20 81       	ld	r18, Z
    3812:	8a 81       	ldd	r24, Y+2	; 0x02
    3814:	88 2f       	mov	r24, r24
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	88 0f       	add	r24, r24
    381a:	99 1f       	adc	r25, r25
    381c:	fc 01       	movw	r30, r24
    381e:	e2 5d       	subi	r30, 0xD2	; 210
    3820:	fd 4f       	sbci	r31, 0xFD	; 253
    3822:	90 81       	ld	r25, Z
    3824:	82 2f       	mov	r24, r18
    3826:	69 2f       	mov	r22, r25
    3828:	40 e0       	ldi	r20, 0x00	; 0
    382a:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
    382e:	89 83       	std	Y+1, r24	; 0x01
    3830:	02 c0       	rjmp	.+4      	; 0x3836 <Buzzer_enu_TuronOffBuzzer+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3832:	82 e0       	ldi	r24, 0x02	; 2
    3834:	89 83       	std	Y+1, r24	; 0x01
    }



    return Local_u8_ErrorFlag; 
    3836:	89 81       	ldd	r24, Y+1	; 0x01
}
    3838:	0f 90       	pop	r0
    383a:	0f 90       	pop	r0
    383c:	cf 91       	pop	r28
    383e:	df 91       	pop	r29
    3840:	08 95       	ret

00003842 <Buzzer_enu_TurnOnAllBuzzers>:

extern ErrorState_t Buzzer_enu_TurnOnAllBuzzers(void)
{
    3842:	df 93       	push	r29
    3844:	cf 93       	push	r28
    3846:	00 d0       	rcall	.+0      	; 0x3848 <Buzzer_enu_TurnOnAllBuzzers+0x6>
    3848:	cd b7       	in	r28, 0x3d	; 61
    384a:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    384c:	81 e0       	ldi	r24, 0x01	; 1
    384e:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    3850:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    3852:	19 82       	std	Y+1, r1	; 0x01
    3854:	1a c0       	rjmp	.+52     	; 0x388a <Buzzer_enu_TurnOnAllBuzzers+0x48>
    {

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_HIGH);
    3856:	89 81       	ldd	r24, Y+1	; 0x01
    3858:	88 2f       	mov	r24, r24
    385a:	90 e0       	ldi	r25, 0x00	; 0
    385c:	88 0f       	add	r24, r24
    385e:	99 1f       	adc	r25, r25
    3860:	fc 01       	movw	r30, r24
    3862:	e3 5d       	subi	r30, 0xD3	; 211
    3864:	fd 4f       	sbci	r31, 0xFD	; 253
    3866:	20 81       	ld	r18, Z
    3868:	89 81       	ldd	r24, Y+1	; 0x01
    386a:	88 2f       	mov	r24, r24
    386c:	90 e0       	ldi	r25, 0x00	; 0
    386e:	88 0f       	add	r24, r24
    3870:	99 1f       	adc	r25, r25
    3872:	fc 01       	movw	r30, r24
    3874:	e2 5d       	subi	r30, 0xD2	; 210
    3876:	fd 4f       	sbci	r31, 0xFD	; 253
    3878:	90 81       	ld	r25, Z
    387a:	82 2f       	mov	r24, r18
    387c:	69 2f       	mov	r22, r25
    387e:	41 e0       	ldi	r20, 0x01	; 1
    3880:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_TurnOnAllBuzzers(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    3884:	89 81       	ldd	r24, Y+1	; 0x01
    3886:	8f 5f       	subi	r24, 0xFF	; 255
    3888:	89 83       	std	Y+1, r24	; 0x01
    388a:	90 91 2c 02 	lds	r25, 0x022C
    388e:	89 81       	ldd	r24, Y+1	; 0x01
    3890:	89 17       	cp	r24, r25
    3892:	08 f3       	brcs	.-62     	; 0x3856 <Buzzer_enu_TurnOnAllBuzzers+0x14>

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_HIGH);
        
    }

    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3894:	82 e0       	ldi	r24, 0x02	; 2
    3896:	8a 83       	std	Y+2, r24	; 0x02



    return Local_u8_ErrorFlag; 
    3898:	8a 81       	ldd	r24, Y+2	; 0x02
}
    389a:	0f 90       	pop	r0
    389c:	0f 90       	pop	r0
    389e:	cf 91       	pop	r28
    38a0:	df 91       	pop	r29
    38a2:	08 95       	ret

000038a4 <Buzzer_enu_TurnOffAllBuzzers>:

extern ErrorState_t Buzzer_enu_TurnOffAllBuzzers(void)
{
    38a4:	df 93       	push	r29
    38a6:	cf 93       	push	r28
    38a8:	00 d0       	rcall	.+0      	; 0x38aa <Buzzer_enu_TurnOffAllBuzzers+0x6>
    38aa:	cd b7       	in	r28, 0x3d	; 61
    38ac:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    38ae:	81 e0       	ldi	r24, 0x01	; 1
    38b0:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    38b2:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    38b4:	19 82       	std	Y+1, r1	; 0x01
    38b6:	1a c0       	rjmp	.+52     	; 0x38ec <Buzzer_enu_TurnOffAllBuzzers+0x48>
    {

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_LOW);
    38b8:	89 81       	ldd	r24, Y+1	; 0x01
    38ba:	88 2f       	mov	r24, r24
    38bc:	90 e0       	ldi	r25, 0x00	; 0
    38be:	88 0f       	add	r24, r24
    38c0:	99 1f       	adc	r25, r25
    38c2:	fc 01       	movw	r30, r24
    38c4:	e3 5d       	subi	r30, 0xD3	; 211
    38c6:	fd 4f       	sbci	r31, 0xFD	; 253
    38c8:	20 81       	ld	r18, Z
    38ca:	89 81       	ldd	r24, Y+1	; 0x01
    38cc:	88 2f       	mov	r24, r24
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	88 0f       	add	r24, r24
    38d2:	99 1f       	adc	r25, r25
    38d4:	fc 01       	movw	r30, r24
    38d6:	e2 5d       	subi	r30, 0xD2	; 210
    38d8:	fd 4f       	sbci	r31, 0xFD	; 253
    38da:	90 81       	ld	r25, Z
    38dc:	82 2f       	mov	r24, r18
    38de:	69 2f       	mov	r22, r25
    38e0:	40 e0       	ldi	r20, 0x00	; 0
    38e2:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_TurnOffAllBuzzers(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    38e6:	89 81       	ldd	r24, Y+1	; 0x01
    38e8:	8f 5f       	subi	r24, 0xFF	; 255
    38ea:	89 83       	std	Y+1, r24	; 0x01
    38ec:	90 91 2c 02 	lds	r25, 0x022C
    38f0:	89 81       	ldd	r24, Y+1	; 0x01
    38f2:	89 17       	cp	r24, r25
    38f4:	08 f3       	brcs	.-62     	; 0x38b8 <Buzzer_enu_TurnOffAllBuzzers+0x14>
     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_LOW);
        
    }


    return Local_u8_ErrorFlag; 
    38f6:	8a 81       	ldd	r24, Y+2	; 0x02
    38f8:	0f 90       	pop	r0
    38fa:	0f 90       	pop	r0
    38fc:	cf 91       	pop	r28
    38fe:	df 91       	pop	r29
    3900:	08 95       	ret

00003902 <tog>:
#include <util/delay.h>
#include "../MCAL/EXTI/EXTI_Interface.h"
#include "../MCAL/SREG/SREG_Interface.h"

void tog (void)
{
    3902:	df 93       	push	r29
    3904:	cf 93       	push	r28
    3906:	cd b7       	in	r28, 0x3d	; 61
    3908:	de b7       	in	r29, 0x3e	; 62
	DIO_enu_SetPinValue(DIO_PIN_GROUP_C,DIO_PIN_7,DIO_HIGH);
    390a:	82 e0       	ldi	r24, 0x02	; 2
    390c:	67 e0       	ldi	r22, 0x07	; 7
    390e:	41 e0       	ldi	r20, 0x01	; 1
    3910:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_enu_SetPinValue>

}
    3914:	cf 91       	pop	r28
    3916:	df 91       	pop	r29
    3918:	08 95       	ret

0000391a <main>:

int main (void)
{
    391a:	df 93       	push	r29
    391c:	cf 93       	push	r28
    391e:	cd b7       	in	r28, 0x3d	; 61
    3920:	de b7       	in	r29, 0x3e	; 62
    //Initializations
	HomeControl_enu_Initialization();
    3922:	0e 94 9a 1c 	call	0x3934	; 0x3934 <HomeControl_enu_Initialization>
	
	//System Operation
	HomeControl_enu_HomeControlSystem();
    3926:	0e 94 b1 1c 	call	0x3962	; 0x3962 <HomeControl_enu_HomeControlSystem>

	return 0;
    392a:	80 e0       	ldi	r24, 0x00	; 0
    392c:	90 e0       	ldi	r25, 0x00	; 0
}
    392e:	cf 91       	pop	r28
    3930:	df 91       	pop	r29
    3932:	08 95       	ret

00003934 <HomeControl_enu_Initialization>:
u8 u8_ChosenLED = LED_NOT_CHOSEN;


//APIs implementation
extern ErrorState_t HomeControl_enu_Initialization(void)
{
    3934:	df 93       	push	r29
    3936:	cf 93       	push	r28
    3938:	0f 92       	push	r0
    393a:	cd b7       	in	r28, 0x3d	; 61
    393c:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    393e:	81 e0       	ldi	r24, 0x01	; 1
    3940:	89 83       	std	Y+1, r24	; 0x01

    LCD_enu_Initialization();
    3942:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <LCD_enu_Initialization>
    Keypad_enu_Initialization();
    3946:	0e 94 17 19 	call	0x322e	; 0x322e <Keypad_enu_Initialization>
    LED_enu_Initialization();
    394a:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LED_enu_Initialization>
    Buzzer_enu_Initialization();
    394e:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <Buzzer_enu_Initialization>
    Relay_enu_Initialization();
    3952:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <Relay_enu_Initialization>

    Local_u8_ErrorFlag = ES_OK;
    3956:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    3958:	89 81       	ldd	r24, Y+1	; 0x01
}
    395a:	0f 90       	pop	r0
    395c:	cf 91       	pop	r28
    395e:	df 91       	pop	r29
    3960:	08 95       	ret

00003962 <HomeControl_enu_HomeControlSystem>:

extern ErrorState_t HomeControl_enu_HomeControlSystem (void)
{
    3962:	df 93       	push	r29
    3964:	cf 93       	push	r28
    3966:	cd b7       	in	r28, 0x3d	; 61
    3968:	de b7       	in	r29, 0x3e	; 62
    396a:	c3 54       	subi	r28, 0x43	; 67
    396c:	d0 40       	sbci	r29, 0x00	; 0
    396e:	0f b6       	in	r0, 0x3f	; 63
    3970:	f8 94       	cli
    3972:	de bf       	out	0x3e, r29	; 62
    3974:	0f be       	out	0x3f, r0	; 63
    3976:	cd bf       	out	0x3d, r28	; 61
    3978:	ab c3       	rjmp	.+1878   	; 0x40d0 <HomeControl_enu_HomeControlSystem+0x76e>
    while (u8_SystemState != SHUTDOWN)
    {

        switch(u8_SystemState)
    397a:	80 91 88 02 	lds	r24, 0x0288
    397e:	28 2f       	mov	r18, r24
    3980:	30 e0       	ldi	r19, 0x00	; 0
    3982:	23 96       	adiw	r28, 0x03	; 3
    3984:	3f af       	std	Y+63, r19	; 0x3f
    3986:	2e af       	std	Y+62, r18	; 0x3e
    3988:	23 97       	sbiw	r28, 0x03	; 3
    398a:	23 96       	adiw	r28, 0x03	; 3
    398c:	8e ad       	ldd	r24, Y+62	; 0x3e
    398e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3990:	23 97       	sbiw	r28, 0x03	; 3
    3992:	84 30       	cpi	r24, 0x04	; 4
    3994:	91 05       	cpc	r25, r1
    3996:	09 f4       	brne	.+2      	; 0x399a <HomeControl_enu_HomeControlSystem+0x38>
    3998:	91 c2       	rjmp	.+1314   	; 0x3ebc <HomeControl_enu_HomeControlSystem+0x55a>
    399a:	23 96       	adiw	r28, 0x03	; 3
    399c:	2e ad       	ldd	r18, Y+62	; 0x3e
    399e:	3f ad       	ldd	r19, Y+63	; 0x3f
    39a0:	23 97       	sbiw	r28, 0x03	; 3
    39a2:	25 30       	cpi	r18, 0x05	; 5
    39a4:	31 05       	cpc	r19, r1
    39a6:	3c f5       	brge	.+78     	; 0x39f6 <HomeControl_enu_HomeControlSystem+0x94>
    39a8:	23 96       	adiw	r28, 0x03	; 3
    39aa:	8e ad       	ldd	r24, Y+62	; 0x3e
    39ac:	9f ad       	ldd	r25, Y+63	; 0x3f
    39ae:	23 97       	sbiw	r28, 0x03	; 3
    39b0:	81 30       	cpi	r24, 0x01	; 1
    39b2:	91 05       	cpc	r25, r1
    39b4:	09 f4       	brne	.+2      	; 0x39b8 <HomeControl_enu_HomeControlSystem+0x56>
    39b6:	b9 c0       	rjmp	.+370    	; 0x3b2a <HomeControl_enu_HomeControlSystem+0x1c8>
    39b8:	23 96       	adiw	r28, 0x03	; 3
    39ba:	2e ad       	ldd	r18, Y+62	; 0x3e
    39bc:	3f ad       	ldd	r19, Y+63	; 0x3f
    39be:	23 97       	sbiw	r28, 0x03	; 3
    39c0:	22 30       	cpi	r18, 0x02	; 2
    39c2:	31 05       	cpc	r19, r1
    39c4:	3c f4       	brge	.+14     	; 0x39d4 <HomeControl_enu_HomeControlSystem+0x72>
    39c6:	23 96       	adiw	r28, 0x03	; 3
    39c8:	8e ad       	ldd	r24, Y+62	; 0x3e
    39ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    39cc:	23 97       	sbiw	r28, 0x03	; 3
    39ce:	00 97       	sbiw	r24, 0x00	; 0
    39d0:	99 f1       	breq	.+102    	; 0x3a38 <HomeControl_enu_HomeControlSystem+0xd6>
    39d2:	7e c3       	rjmp	.+1788   	; 0x40d0 <HomeControl_enu_HomeControlSystem+0x76e>
    39d4:	23 96       	adiw	r28, 0x03	; 3
    39d6:	2e ad       	ldd	r18, Y+62	; 0x3e
    39d8:	3f ad       	ldd	r19, Y+63	; 0x3f
    39da:	23 97       	sbiw	r28, 0x03	; 3
    39dc:	22 30       	cpi	r18, 0x02	; 2
    39de:	31 05       	cpc	r19, r1
    39e0:	09 f4       	brne	.+2      	; 0x39e4 <HomeControl_enu_HomeControlSystem+0x82>
    39e2:	00 c2       	rjmp	.+1024   	; 0x3de4 <HomeControl_enu_HomeControlSystem+0x482>
    39e4:	23 96       	adiw	r28, 0x03	; 3
    39e6:	8e ad       	ldd	r24, Y+62	; 0x3e
    39e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    39ea:	23 97       	sbiw	r28, 0x03	; 3
    39ec:	83 30       	cpi	r24, 0x03	; 3
    39ee:	91 05       	cpc	r25, r1
    39f0:	09 f4       	brne	.+2      	; 0x39f4 <HomeControl_enu_HomeControlSystem+0x92>
    39f2:	2a c2       	rjmp	.+1108   	; 0x3e48 <HomeControl_enu_HomeControlSystem+0x4e6>
    39f4:	6d c3       	rjmp	.+1754   	; 0x40d0 <HomeControl_enu_HomeControlSystem+0x76e>
    39f6:	23 96       	adiw	r28, 0x03	; 3
    39f8:	2e ad       	ldd	r18, Y+62	; 0x3e
    39fa:	3f ad       	ldd	r19, Y+63	; 0x3f
    39fc:	23 97       	sbiw	r28, 0x03	; 3
    39fe:	26 30       	cpi	r18, 0x06	; 6
    3a00:	31 05       	cpc	r19, r1
    3a02:	09 f4       	brne	.+2      	; 0x3a06 <HomeControl_enu_HomeControlSystem+0xa4>
    3a04:	b6 c2       	rjmp	.+1388   	; 0x3f72 <HomeControl_enu_HomeControlSystem+0x610>
    3a06:	23 96       	adiw	r28, 0x03	; 3
    3a08:	8e ad       	ldd	r24, Y+62	; 0x3e
    3a0a:	9f ad       	ldd	r25, Y+63	; 0x3f
    3a0c:	23 97       	sbiw	r28, 0x03	; 3
    3a0e:	86 30       	cpi	r24, 0x06	; 6
    3a10:	91 05       	cpc	r25, r1
    3a12:	0c f4       	brge	.+2      	; 0x3a16 <HomeControl_enu_HomeControlSystem+0xb4>
    3a14:	83 c2       	rjmp	.+1286   	; 0x3f1c <HomeControl_enu_HomeControlSystem+0x5ba>
    3a16:	23 96       	adiw	r28, 0x03	; 3
    3a18:	2e ad       	ldd	r18, Y+62	; 0x3e
    3a1a:	3f ad       	ldd	r19, Y+63	; 0x3f
    3a1c:	23 97       	sbiw	r28, 0x03	; 3
    3a1e:	27 30       	cpi	r18, 0x07	; 7
    3a20:	31 05       	cpc	r19, r1
    3a22:	09 f4       	brne	.+2      	; 0x3a26 <HomeControl_enu_HomeControlSystem+0xc4>
    3a24:	d6 c2       	rjmp	.+1452   	; 0x3fd2 <HomeControl_enu_HomeControlSystem+0x670>
    3a26:	23 96       	adiw	r28, 0x03	; 3
    3a28:	8e ad       	ldd	r24, Y+62	; 0x3e
    3a2a:	9f ad       	ldd	r25, Y+63	; 0x3f
    3a2c:	23 97       	sbiw	r28, 0x03	; 3
    3a2e:	88 30       	cpi	r24, 0x08	; 8
    3a30:	91 05       	cpc	r25, r1
    3a32:	09 f4       	brne	.+2      	; 0x3a36 <HomeControl_enu_HomeControlSystem+0xd4>
    3a34:	47 c3       	rjmp	.+1678   	; 0x40c4 <HomeControl_enu_HomeControlSystem+0x762>
    3a36:	4c c3       	rjmp	.+1688   	; 0x40d0 <HomeControl_enu_HomeControlSystem+0x76e>
        {
            case HOME_SCREEN:
            {

                //printing the home screen
                enu_PrintScreen(HOME_SCREEN);
    3a38:	80 e0       	ldi	r24, 0x00	; 0
    3a3a:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <enu_PrintScreen>
    3a3e:	80 e0       	ldi	r24, 0x00	; 0
    3a40:	90 e0       	ldi	r25, 0x00	; 0
    3a42:	aa ef       	ldi	r26, 0xFA	; 250
    3a44:	b4 e4       	ldi	r27, 0x44	; 68
    3a46:	8d ab       	std	Y+53, r24	; 0x35
    3a48:	9e ab       	std	Y+54, r25	; 0x36
    3a4a:	af ab       	std	Y+55, r26	; 0x37
    3a4c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a4e:	6d a9       	ldd	r22, Y+53	; 0x35
    3a50:	7e a9       	ldd	r23, Y+54	; 0x36
    3a52:	8f a9       	ldd	r24, Y+55	; 0x37
    3a54:	98 ad       	ldd	r25, Y+56	; 0x38
    3a56:	20 e0       	ldi	r18, 0x00	; 0
    3a58:	30 e0       	ldi	r19, 0x00	; 0
    3a5a:	4a e7       	ldi	r20, 0x7A	; 122
    3a5c:	55 e4       	ldi	r21, 0x45	; 69
    3a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a62:	dc 01       	movw	r26, r24
    3a64:	cb 01       	movw	r24, r22
    3a66:	89 ab       	std	Y+49, r24	; 0x31
    3a68:	9a ab       	std	Y+50, r25	; 0x32
    3a6a:	ab ab       	std	Y+51, r26	; 0x33
    3a6c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3a6e:	69 a9       	ldd	r22, Y+49	; 0x31
    3a70:	7a a9       	ldd	r23, Y+50	; 0x32
    3a72:	8b a9       	ldd	r24, Y+51	; 0x33
    3a74:	9c a9       	ldd	r25, Y+52	; 0x34
    3a76:	20 e0       	ldi	r18, 0x00	; 0
    3a78:	30 e0       	ldi	r19, 0x00	; 0
    3a7a:	40 e8       	ldi	r20, 0x80	; 128
    3a7c:	5f e3       	ldi	r21, 0x3F	; 63
    3a7e:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    3a82:	88 23       	and	r24, r24
    3a84:	2c f4       	brge	.+10     	; 0x3a90 <HomeControl_enu_HomeControlSystem+0x12e>
		__ticks = 1;
    3a86:	81 e0       	ldi	r24, 0x01	; 1
    3a88:	90 e0       	ldi	r25, 0x00	; 0
    3a8a:	98 ab       	std	Y+48, r25	; 0x30
    3a8c:	8f a7       	std	Y+47, r24	; 0x2f
    3a8e:	3f c0       	rjmp	.+126    	; 0x3b0e <HomeControl_enu_HomeControlSystem+0x1ac>
	else if (__tmp > 65535)
    3a90:	69 a9       	ldd	r22, Y+49	; 0x31
    3a92:	7a a9       	ldd	r23, Y+50	; 0x32
    3a94:	8b a9       	ldd	r24, Y+51	; 0x33
    3a96:	9c a9       	ldd	r25, Y+52	; 0x34
    3a98:	20 e0       	ldi	r18, 0x00	; 0
    3a9a:	3f ef       	ldi	r19, 0xFF	; 255
    3a9c:	4f e7       	ldi	r20, 0x7F	; 127
    3a9e:	57 e4       	ldi	r21, 0x47	; 71
    3aa0:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    3aa4:	18 16       	cp	r1, r24
    3aa6:	4c f5       	brge	.+82     	; 0x3afa <HomeControl_enu_HomeControlSystem+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aa8:	6d a9       	ldd	r22, Y+53	; 0x35
    3aaa:	7e a9       	ldd	r23, Y+54	; 0x36
    3aac:	8f a9       	ldd	r24, Y+55	; 0x37
    3aae:	98 ad       	ldd	r25, Y+56	; 0x38
    3ab0:	20 e0       	ldi	r18, 0x00	; 0
    3ab2:	30 e0       	ldi	r19, 0x00	; 0
    3ab4:	40 e2       	ldi	r20, 0x20	; 32
    3ab6:	51 e4       	ldi	r21, 0x41	; 65
    3ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3abc:	dc 01       	movw	r26, r24
    3abe:	cb 01       	movw	r24, r22
    3ac0:	bc 01       	movw	r22, r24
    3ac2:	cd 01       	movw	r24, r26
    3ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ac8:	dc 01       	movw	r26, r24
    3aca:	cb 01       	movw	r24, r22
    3acc:	98 ab       	std	Y+48, r25	; 0x30
    3ace:	8f a7       	std	Y+47, r24	; 0x2f
    3ad0:	0f c0       	rjmp	.+30     	; 0x3af0 <HomeControl_enu_HomeControlSystem+0x18e>
    3ad2:	80 e9       	ldi	r24, 0x90	; 144
    3ad4:	91 e0       	ldi	r25, 0x01	; 1
    3ad6:	9e a7       	std	Y+46, r25	; 0x2e
    3ad8:	8d a7       	std	Y+45, r24	; 0x2d
    3ada:	8d a5       	ldd	r24, Y+45	; 0x2d
    3adc:	9e a5       	ldd	r25, Y+46	; 0x2e
    3ade:	01 97       	sbiw	r24, 0x01	; 1
    3ae0:	f1 f7       	brne	.-4      	; 0x3ade <HomeControl_enu_HomeControlSystem+0x17c>
    3ae2:	9e a7       	std	Y+46, r25	; 0x2e
    3ae4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ae6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ae8:	98 a9       	ldd	r25, Y+48	; 0x30
    3aea:	01 97       	sbiw	r24, 0x01	; 1
    3aec:	98 ab       	std	Y+48, r25	; 0x30
    3aee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3af0:	8f a5       	ldd	r24, Y+47	; 0x2f
    3af2:	98 a9       	ldd	r25, Y+48	; 0x30
    3af4:	00 97       	sbiw	r24, 0x00	; 0
    3af6:	69 f7       	brne	.-38     	; 0x3ad2 <HomeControl_enu_HomeControlSystem+0x170>
    3af8:	14 c0       	rjmp	.+40     	; 0x3b22 <HomeControl_enu_HomeControlSystem+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3afa:	69 a9       	ldd	r22, Y+49	; 0x31
    3afc:	7a a9       	ldd	r23, Y+50	; 0x32
    3afe:	8b a9       	ldd	r24, Y+51	; 0x33
    3b00:	9c a9       	ldd	r25, Y+52	; 0x34
    3b02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b06:	dc 01       	movw	r26, r24
    3b08:	cb 01       	movw	r24, r22
    3b0a:	98 ab       	std	Y+48, r25	; 0x30
    3b0c:	8f a7       	std	Y+47, r24	; 0x2f
    3b0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b10:	98 a9       	ldd	r25, Y+48	; 0x30
    3b12:	9c a7       	std	Y+44, r25	; 0x2c
    3b14:	8b a7       	std	Y+43, r24	; 0x2b
    3b16:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b18:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b1a:	01 97       	sbiw	r24, 0x01	; 1
    3b1c:	f1 f7       	brne	.-4      	; 0x3b1a <HomeControl_enu_HomeControlSystem+0x1b8>
    3b1e:	9c a7       	std	Y+44, r25	; 0x2c
    3b20:	8b a7       	std	Y+43, r24	; 0x2b
                //1 second delay
                _delay_ms(2000);

                u8_SystemState = LOGIN_SCREEN;
    3b22:	81 e0       	ldi	r24, 0x01	; 1
    3b24:	80 93 88 02 	sts	0x0288, r24
    3b28:	d3 c2       	rjmp	.+1446   	; 0x40d0 <HomeControl_enu_HomeControlSystem+0x76e>
    

            case LOGIN_SCREEN:
            {
                //printing the home screen
                enu_PrintScreen(LOGIN_SCREEN);
    3b2a:	81 e0       	ldi	r24, 0x01	; 1
    3b2c:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <enu_PrintScreen>
    3b30:	47 c1       	rjmp	.+654    	; 0x3dc0 <HomeControl_enu_HomeControlSystem+0x45e>
                
                while((u8_IncorrectPasswordEntry < HOMECONTROL_MAX_TRIALS) && (u8_SystemState == LOGIN_SCREEN))
                {

                    u8 Local_u8_keyValue;
                    u8 Local_u8_CharacterCounter = 0;
    3b32:	1a ae       	std	Y+58, r1	; 0x3a
                    u8 Local_u8_IncorrectPasswordFlag = False;
    3b34:	19 ae       	std	Y+57, r1	; 0x39


                    //Displaying the failed trails count
                    LCD_enu_GoToPosition(LCD_ROW_2,LCD_COLUMN_16,LCD_PAGE_1);
    3b36:	82 e0       	ldi	r24, 0x02	; 2
    3b38:	60 e1       	ldi	r22, 0x10	; 16
    3b3a:	41 e0       	ldi	r20, 0x01	; 1
    3b3c:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enu_GoToPosition>
                    LCD_enu_SendData(u8_IncorrectPasswordEntry + ASCII_OFFSET );
    3b40:	80 91 89 02 	lds	r24, 0x0289
    3b44:	80 5d       	subi	r24, 0xD0	; 208
    3b46:	0e 94 2a 11 	call	0x2254	; 0x2254 <LCD_enu_SendData>


                    //Placing cursor on the beginning of the line to print the asterisk
                    LCD_enu_GoToPosition(LCD_ROW_2,LCD_COLUMN_1,LCD_PAGE_1);
    3b4a:	82 e0       	ldi	r24, 0x02	; 2
    3b4c:	61 e0       	ldi	r22, 0x01	; 1
    3b4e:	41 e0       	ldi	r20, 0x01	; 1
    3b50:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enu_GoToPosition>
    3b54:	1a c0       	rjmp	.+52     	; 0x3b8a <HomeControl_enu_HomeControlSystem+0x228>
                    //User entering password
                    while (Local_u8_CharacterCounter < HOMECONTROL_PASSWORD_LENGTH)
                    {
                        //Getting key pressed
                        Keypad_enu_GetButtonPressedValue(&Local_u8_keyValue);
    3b56:	ce 01       	movw	r24, r28
    3b58:	cb 96       	adiw	r24, 0x3b	; 59
    3b5a:	0e 94 92 19 	call	0x3324	; 0x3324 <Keypad_enu_GetButtonPressedValue>

                        if (Local_u8_keyValue != KEYPAD_NOT_PRESSED_VALUE)
    3b5e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3b60:	8f 3f       	cpi	r24, 0xFF	; 255
    3b62:	99 f0       	breq	.+38     	; 0x3b8a <HomeControl_enu_HomeControlSystem+0x228>
                        {
                            Local_u8_CharacterCounter++;
    3b64:	8a ad       	ldd	r24, Y+58	; 0x3a
    3b66:	8f 5f       	subi	r24, 0xFF	; 255
    3b68:	8a af       	std	Y+58, r24	; 0x3a
                            LCD_enu_SendData('*');
    3b6a:	8a e2       	ldi	r24, 0x2A	; 42
    3b6c:	0e 94 2a 11 	call	0x2254	; 0x2254 <LCD_enu_SendData>

                            //Checking if the password is correct
                            if(Local_u8_keyValue != au8_Password[Local_u8_CharacterCounter - 1])
    3b70:	8a ad       	ldd	r24, Y+58	; 0x3a
    3b72:	88 2f       	mov	r24, r24
    3b74:	90 e0       	ldi	r25, 0x00	; 0
    3b76:	01 97       	sbiw	r24, 0x01	; 1
    3b78:	fc 01       	movw	r30, r24
    3b7a:	e1 5d       	subi	r30, 0xD1	; 209
    3b7c:	fd 4f       	sbci	r31, 0xFD	; 253
    3b7e:	90 81       	ld	r25, Z
    3b80:	8b ad       	ldd	r24, Y+59	; 0x3b
    3b82:	98 17       	cp	r25, r24
    3b84:	11 f0       	breq	.+4      	; 0x3b8a <HomeControl_enu_HomeControlSystem+0x228>
                            {   
                                Local_u8_IncorrectPasswordFlag = True;
    3b86:	81 e0       	ldi	r24, 0x01	; 1
    3b88:	89 af       	std	Y+57, r24	; 0x39


                    //Placing cursor on the beginning of the line to print the asterisk
                    LCD_enu_GoToPosition(LCD_ROW_2,LCD_COLUMN_1,LCD_PAGE_1);
                    //User entering password
                    while (Local_u8_CharacterCounter < HOMECONTROL_PASSWORD_LENGTH)
    3b8a:	8a ad       	ldd	r24, Y+58	; 0x3a
    3b8c:	85 30       	cpi	r24, 0x05	; 5
    3b8e:	18 f3       	brcs	.-58     	; 0x3b56 <HomeControl_enu_HomeControlSystem+0x1f4>
                                Local_u8_IncorrectPasswordFlag = True;
                            }
                        }
                    } 

                    if(Local_u8_IncorrectPasswordFlag)
    3b90:	89 ad       	ldd	r24, Y+57	; 0x39
    3b92:	88 23       	and	r24, r24
    3b94:	09 f4       	brne	.+2      	; 0x3b98 <HomeControl_enu_HomeControlSystem+0x236>
    3b96:	8c c0       	rjmp	.+280    	; 0x3cb0 <HomeControl_enu_HomeControlSystem+0x34e>
                    {
                        
                        //Clearing second row
                        LCD_enu_ClearRow(LCD_ROW_2,LCD_PAGE_1);
    3b98:	82 e0       	ldi	r24, 0x02	; 2
    3b9a:	61 e0       	ldi	r22, 0x01	; 1
    3b9c:	0e 94 18 12 	call	0x2430	; 0x2430 <LCD_enu_ClearRow>

                        //Printing Incorrect Password
                        LCD_enu_GoToPosition(LCD_ROW_2,LCD_COLUMN_1,LCD_PAGE_1);
    3ba0:	82 e0       	ldi	r24, 0x02	; 2
    3ba2:	61 e0       	ldi	r22, 0x01	; 1
    3ba4:	41 e0       	ldi	r20, 0x01	; 1
    3ba6:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enu_GoToPosition>
                        LCD_enu_SendString("INCORRECT!");
    3baa:	80 e6       	ldi	r24, 0x60	; 96
    3bac:	90 e0       	ldi	r25, 0x00	; 0
    3bae:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_enu_SendString>
                        enu_WrongChoiceSelected(LCD_PAGE_1);
    3bb2:	81 e0       	ldi	r24, 0x01	; 1
    3bb4:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <enu_WrongChoiceSelected>
    3bb8:	80 e0       	ldi	r24, 0x00	; 0
    3bba:	90 e0       	ldi	r25, 0x00	; 0
    3bbc:	aa ef       	ldi	r26, 0xFA	; 250
    3bbe:	b4 e4       	ldi	r27, 0x44	; 68
    3bc0:	8f a3       	std	Y+39, r24	; 0x27
    3bc2:	98 a7       	std	Y+40, r25	; 0x28
    3bc4:	a9 a7       	std	Y+41, r26	; 0x29
    3bc6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bc8:	6f a1       	ldd	r22, Y+39	; 0x27
    3bca:	78 a5       	ldd	r23, Y+40	; 0x28
    3bcc:	89 a5       	ldd	r24, Y+41	; 0x29
    3bce:	9a a5       	ldd	r25, Y+42	; 0x2a
    3bd0:	20 e0       	ldi	r18, 0x00	; 0
    3bd2:	30 e0       	ldi	r19, 0x00	; 0
    3bd4:	4a e7       	ldi	r20, 0x7A	; 122
    3bd6:	55 e4       	ldi	r21, 0x45	; 69
    3bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bdc:	dc 01       	movw	r26, r24
    3bde:	cb 01       	movw	r24, r22
    3be0:	8b a3       	std	Y+35, r24	; 0x23
    3be2:	9c a3       	std	Y+36, r25	; 0x24
    3be4:	ad a3       	std	Y+37, r26	; 0x25
    3be6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3be8:	6b a1       	ldd	r22, Y+35	; 0x23
    3bea:	7c a1       	ldd	r23, Y+36	; 0x24
    3bec:	8d a1       	ldd	r24, Y+37	; 0x25
    3bee:	9e a1       	ldd	r25, Y+38	; 0x26
    3bf0:	20 e0       	ldi	r18, 0x00	; 0
    3bf2:	30 e0       	ldi	r19, 0x00	; 0
    3bf4:	40 e8       	ldi	r20, 0x80	; 128
    3bf6:	5f e3       	ldi	r21, 0x3F	; 63
    3bf8:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    3bfc:	88 23       	and	r24, r24
    3bfe:	2c f4       	brge	.+10     	; 0x3c0a <HomeControl_enu_HomeControlSystem+0x2a8>
		__ticks = 1;
    3c00:	81 e0       	ldi	r24, 0x01	; 1
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	9a a3       	std	Y+34, r25	; 0x22
    3c06:	89 a3       	std	Y+33, r24	; 0x21
    3c08:	3f c0       	rjmp	.+126    	; 0x3c88 <HomeControl_enu_HomeControlSystem+0x326>
	else if (__tmp > 65535)
    3c0a:	6b a1       	ldd	r22, Y+35	; 0x23
    3c0c:	7c a1       	ldd	r23, Y+36	; 0x24
    3c0e:	8d a1       	ldd	r24, Y+37	; 0x25
    3c10:	9e a1       	ldd	r25, Y+38	; 0x26
    3c12:	20 e0       	ldi	r18, 0x00	; 0
    3c14:	3f ef       	ldi	r19, 0xFF	; 255
    3c16:	4f e7       	ldi	r20, 0x7F	; 127
    3c18:	57 e4       	ldi	r21, 0x47	; 71
    3c1a:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    3c1e:	18 16       	cp	r1, r24
    3c20:	4c f5       	brge	.+82     	; 0x3c74 <HomeControl_enu_HomeControlSystem+0x312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c22:	6f a1       	ldd	r22, Y+39	; 0x27
    3c24:	78 a5       	ldd	r23, Y+40	; 0x28
    3c26:	89 a5       	ldd	r24, Y+41	; 0x29
    3c28:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c2a:	20 e0       	ldi	r18, 0x00	; 0
    3c2c:	30 e0       	ldi	r19, 0x00	; 0
    3c2e:	40 e2       	ldi	r20, 0x20	; 32
    3c30:	51 e4       	ldi	r21, 0x41	; 65
    3c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c36:	dc 01       	movw	r26, r24
    3c38:	cb 01       	movw	r24, r22
    3c3a:	bc 01       	movw	r22, r24
    3c3c:	cd 01       	movw	r24, r26
    3c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c42:	dc 01       	movw	r26, r24
    3c44:	cb 01       	movw	r24, r22
    3c46:	9a a3       	std	Y+34, r25	; 0x22
    3c48:	89 a3       	std	Y+33, r24	; 0x21
    3c4a:	0f c0       	rjmp	.+30     	; 0x3c6a <HomeControl_enu_HomeControlSystem+0x308>
    3c4c:	80 e9       	ldi	r24, 0x90	; 144
    3c4e:	91 e0       	ldi	r25, 0x01	; 1
    3c50:	98 a3       	std	Y+32, r25	; 0x20
    3c52:	8f 8f       	std	Y+31, r24	; 0x1f
    3c54:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c56:	98 a1       	ldd	r25, Y+32	; 0x20
    3c58:	01 97       	sbiw	r24, 0x01	; 1
    3c5a:	f1 f7       	brne	.-4      	; 0x3c58 <HomeControl_enu_HomeControlSystem+0x2f6>
    3c5c:	98 a3       	std	Y+32, r25	; 0x20
    3c5e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c60:	89 a1       	ldd	r24, Y+33	; 0x21
    3c62:	9a a1       	ldd	r25, Y+34	; 0x22
    3c64:	01 97       	sbiw	r24, 0x01	; 1
    3c66:	9a a3       	std	Y+34, r25	; 0x22
    3c68:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c6a:	89 a1       	ldd	r24, Y+33	; 0x21
    3c6c:	9a a1       	ldd	r25, Y+34	; 0x22
    3c6e:	00 97       	sbiw	r24, 0x00	; 0
    3c70:	69 f7       	brne	.-38     	; 0x3c4c <HomeControl_enu_HomeControlSystem+0x2ea>
    3c72:	14 c0       	rjmp	.+40     	; 0x3c9c <HomeControl_enu_HomeControlSystem+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c74:	6b a1       	ldd	r22, Y+35	; 0x23
    3c76:	7c a1       	ldd	r23, Y+36	; 0x24
    3c78:	8d a1       	ldd	r24, Y+37	; 0x25
    3c7a:	9e a1       	ldd	r25, Y+38	; 0x26
    3c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c80:	dc 01       	movw	r26, r24
    3c82:	cb 01       	movw	r24, r22
    3c84:	9a a3       	std	Y+34, r25	; 0x22
    3c86:	89 a3       	std	Y+33, r24	; 0x21
    3c88:	89 a1       	ldd	r24, Y+33	; 0x21
    3c8a:	9a a1       	ldd	r25, Y+34	; 0x22
    3c8c:	9e 8f       	std	Y+30, r25	; 0x1e
    3c8e:	8d 8f       	std	Y+29, r24	; 0x1d
    3c90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c92:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c94:	01 97       	sbiw	r24, 0x01	; 1
    3c96:	f1 f7       	brne	.-4      	; 0x3c94 <HomeControl_enu_HomeControlSystem+0x332>
    3c98:	9e 8f       	std	Y+30, r25	; 0x1e
    3c9a:	8d 8f       	std	Y+29, r24	; 0x1d
                        _delay_ms(2000);

                        //Clearing second row
                        LCD_enu_ClearRow(LCD_ROW_2,LCD_PAGE_1);
    3c9c:	82 e0       	ldi	r24, 0x02	; 2
    3c9e:	61 e0       	ldi	r22, 0x01	; 1
    3ca0:	0e 94 18 12 	call	0x2430	; 0x2430 <LCD_enu_ClearRow>

                        //Incrementing the count
                        u8_IncorrectPasswordEntry++;        
    3ca4:	80 91 89 02 	lds	r24, 0x0289
    3ca8:	8f 5f       	subi	r24, 0xFF	; 255
    3caa:	80 93 89 02 	sts	0x0289, r24
    3cae:	88 c0       	rjmp	.+272    	; 0x3dc0 <HomeControl_enu_HomeControlSystem+0x45e>
                        
                    }
                    else
                    {
                        //Clearing second row
                        LCD_enu_ClearRow(LCD_ROW_2,LCD_PAGE_1);
    3cb0:	82 e0       	ldi	r24, 0x02	; 2
    3cb2:	61 e0       	ldi	r22, 0x01	; 1
    3cb4:	0e 94 18 12 	call	0x2430	; 0x2430 <LCD_enu_ClearRow>

                        //Printing correct Password
                        LCD_enu_GoToPosition(LCD_ROW_2,LCD_COLUMN_1,LCD_PAGE_1);
    3cb8:	82 e0       	ldi	r24, 0x02	; 2
    3cba:	61 e0       	ldi	r22, 0x01	; 1
    3cbc:	41 e0       	ldi	r20, 0x01	; 1
    3cbe:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enu_GoToPosition>
                        LCD_enu_SendString("CORRECT!");
    3cc2:	8b e6       	ldi	r24, 0x6B	; 107
    3cc4:	90 e0       	ldi	r25, 0x00	; 0
    3cc6:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_enu_SendString>
    3cca:	80 e0       	ldi	r24, 0x00	; 0
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	aa ef       	ldi	r26, 0xFA	; 250
    3cd0:	b4 e4       	ldi	r27, 0x44	; 68
    3cd2:	89 8f       	std	Y+25, r24	; 0x19
    3cd4:	9a 8f       	std	Y+26, r25	; 0x1a
    3cd6:	ab 8f       	std	Y+27, r26	; 0x1b
    3cd8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cda:	69 8d       	ldd	r22, Y+25	; 0x19
    3cdc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3cde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ce0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ce2:	20 e0       	ldi	r18, 0x00	; 0
    3ce4:	30 e0       	ldi	r19, 0x00	; 0
    3ce6:	4a e7       	ldi	r20, 0x7A	; 122
    3ce8:	55 e4       	ldi	r21, 0x45	; 69
    3cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cee:	dc 01       	movw	r26, r24
    3cf0:	cb 01       	movw	r24, r22
    3cf2:	8d 8b       	std	Y+21, r24	; 0x15
    3cf4:	9e 8b       	std	Y+22, r25	; 0x16
    3cf6:	af 8b       	std	Y+23, r26	; 0x17
    3cf8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3cfa:	6d 89       	ldd	r22, Y+21	; 0x15
    3cfc:	7e 89       	ldd	r23, Y+22	; 0x16
    3cfe:	8f 89       	ldd	r24, Y+23	; 0x17
    3d00:	98 8d       	ldd	r25, Y+24	; 0x18
    3d02:	20 e0       	ldi	r18, 0x00	; 0
    3d04:	30 e0       	ldi	r19, 0x00	; 0
    3d06:	40 e8       	ldi	r20, 0x80	; 128
    3d08:	5f e3       	ldi	r21, 0x3F	; 63
    3d0a:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    3d0e:	88 23       	and	r24, r24
    3d10:	2c f4       	brge	.+10     	; 0x3d1c <HomeControl_enu_HomeControlSystem+0x3ba>
		__ticks = 1;
    3d12:	81 e0       	ldi	r24, 0x01	; 1
    3d14:	90 e0       	ldi	r25, 0x00	; 0
    3d16:	9c 8b       	std	Y+20, r25	; 0x14
    3d18:	8b 8b       	std	Y+19, r24	; 0x13
    3d1a:	3f c0       	rjmp	.+126    	; 0x3d9a <HomeControl_enu_HomeControlSystem+0x438>
	else if (__tmp > 65535)
    3d1c:	6d 89       	ldd	r22, Y+21	; 0x15
    3d1e:	7e 89       	ldd	r23, Y+22	; 0x16
    3d20:	8f 89       	ldd	r24, Y+23	; 0x17
    3d22:	98 8d       	ldd	r25, Y+24	; 0x18
    3d24:	20 e0       	ldi	r18, 0x00	; 0
    3d26:	3f ef       	ldi	r19, 0xFF	; 255
    3d28:	4f e7       	ldi	r20, 0x7F	; 127
    3d2a:	57 e4       	ldi	r21, 0x47	; 71
    3d2c:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    3d30:	18 16       	cp	r1, r24
    3d32:	4c f5       	brge	.+82     	; 0x3d86 <HomeControl_enu_HomeControlSystem+0x424>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d34:	69 8d       	ldd	r22, Y+25	; 0x19
    3d36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d3c:	20 e0       	ldi	r18, 0x00	; 0
    3d3e:	30 e0       	ldi	r19, 0x00	; 0
    3d40:	40 e2       	ldi	r20, 0x20	; 32
    3d42:	51 e4       	ldi	r21, 0x41	; 65
    3d44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d48:	dc 01       	movw	r26, r24
    3d4a:	cb 01       	movw	r24, r22
    3d4c:	bc 01       	movw	r22, r24
    3d4e:	cd 01       	movw	r24, r26
    3d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d54:	dc 01       	movw	r26, r24
    3d56:	cb 01       	movw	r24, r22
    3d58:	9c 8b       	std	Y+20, r25	; 0x14
    3d5a:	8b 8b       	std	Y+19, r24	; 0x13
    3d5c:	0f c0       	rjmp	.+30     	; 0x3d7c <HomeControl_enu_HomeControlSystem+0x41a>
    3d5e:	80 e9       	ldi	r24, 0x90	; 144
    3d60:	91 e0       	ldi	r25, 0x01	; 1
    3d62:	9a 8b       	std	Y+18, r25	; 0x12
    3d64:	89 8b       	std	Y+17, r24	; 0x11
    3d66:	89 89       	ldd	r24, Y+17	; 0x11
    3d68:	9a 89       	ldd	r25, Y+18	; 0x12
    3d6a:	01 97       	sbiw	r24, 0x01	; 1
    3d6c:	f1 f7       	brne	.-4      	; 0x3d6a <HomeControl_enu_HomeControlSystem+0x408>
    3d6e:	9a 8b       	std	Y+18, r25	; 0x12
    3d70:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d72:	8b 89       	ldd	r24, Y+19	; 0x13
    3d74:	9c 89       	ldd	r25, Y+20	; 0x14
    3d76:	01 97       	sbiw	r24, 0x01	; 1
    3d78:	9c 8b       	std	Y+20, r25	; 0x14
    3d7a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d7c:	8b 89       	ldd	r24, Y+19	; 0x13
    3d7e:	9c 89       	ldd	r25, Y+20	; 0x14
    3d80:	00 97       	sbiw	r24, 0x00	; 0
    3d82:	69 f7       	brne	.-38     	; 0x3d5e <HomeControl_enu_HomeControlSystem+0x3fc>
    3d84:	14 c0       	rjmp	.+40     	; 0x3dae <HomeControl_enu_HomeControlSystem+0x44c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d86:	6d 89       	ldd	r22, Y+21	; 0x15
    3d88:	7e 89       	ldd	r23, Y+22	; 0x16
    3d8a:	8f 89       	ldd	r24, Y+23	; 0x17
    3d8c:	98 8d       	ldd	r25, Y+24	; 0x18
    3d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d92:	dc 01       	movw	r26, r24
    3d94:	cb 01       	movw	r24, r22
    3d96:	9c 8b       	std	Y+20, r25	; 0x14
    3d98:	8b 8b       	std	Y+19, r24	; 0x13
    3d9a:	8b 89       	ldd	r24, Y+19	; 0x13
    3d9c:	9c 89       	ldd	r25, Y+20	; 0x14
    3d9e:	98 8b       	std	Y+16, r25	; 0x10
    3da0:	8f 87       	std	Y+15, r24	; 0x0f
    3da2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3da4:	98 89       	ldd	r25, Y+16	; 0x10
    3da6:	01 97       	sbiw	r24, 0x01	; 1
    3da8:	f1 f7       	brne	.-4      	; 0x3da6 <HomeControl_enu_HomeControlSystem+0x444>
    3daa:	98 8b       	std	Y+16, r25	; 0x10
    3dac:	8f 87       	std	Y+15, r24	; 0x0f
                        _delay_ms(2000);

                        //Clearing the second row
                        LCD_enu_ClearRow(LCD_ROW_2,LCD_PAGE_1);
    3dae:	82 e0       	ldi	r24, 0x02	; 2
    3db0:	61 e0       	ldi	r22, 0x01	; 1
    3db2:	0e 94 18 12 	call	0x2430	; 0x2430 <LCD_enu_ClearRow>

                        //Resetting counter to zero 
                        u8_IncorrectPasswordEntry = 0;
    3db6:	10 92 89 02 	sts	0x0289, r1

                        u8_SystemState = CONTROL_MENU;
    3dba:	82 e0       	ldi	r24, 0x02	; 2
    3dbc:	80 93 88 02 	sts	0x0288, r24
            case LOGIN_SCREEN:
            {
                //printing the home screen
                enu_PrintScreen(LOGIN_SCREEN);
                
                while((u8_IncorrectPasswordEntry < HOMECONTROL_MAX_TRIALS) && (u8_SystemState == LOGIN_SCREEN))
    3dc0:	80 91 89 02 	lds	r24, 0x0289
    3dc4:	83 30       	cpi	r24, 0x03	; 3
    3dc6:	28 f4       	brcc	.+10     	; 0x3dd2 <HomeControl_enu_HomeControlSystem+0x470>
    3dc8:	80 91 88 02 	lds	r24, 0x0288
    3dcc:	81 30       	cpi	r24, 0x01	; 1
    3dce:	09 f4       	brne	.+2      	; 0x3dd2 <HomeControl_enu_HomeControlSystem+0x470>
    3dd0:	b0 ce       	rjmp	.-672    	; 0x3b32 <HomeControl_enu_HomeControlSystem+0x1d0>
                    }
                    
                    
                }

                if(u8_IncorrectPasswordEntry == HOMECONTROL_MAX_TRIALS)
    3dd2:	80 91 89 02 	lds	r24, 0x0289
    3dd6:	83 30       	cpi	r24, 0x03	; 3
    3dd8:	09 f0       	breq	.+2      	; 0x3ddc <HomeControl_enu_HomeControlSystem+0x47a>
    3dda:	7a c1       	rjmp	.+756    	; 0x40d0 <HomeControl_enu_HomeControlSystem+0x76e>
                {
                    u8_SystemState = ALERT;
    3ddc:	88 e0       	ldi	r24, 0x08	; 8
    3dde:	80 93 88 02 	sts	0x0288, r24
    3de2:	76 c1       	rjmp	.+748    	; 0x40d0 <HomeControl_enu_HomeControlSystem+0x76e>
            case CONTROL_MENU:
            {
                u8 Local_u8_KeyValue;

                //printing the home screen
                enu_PrintScreen(CONTROL_MENU);
    3de4:	82 e0       	ldi	r24, 0x02	; 2
    3de6:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <enu_PrintScreen>
    3dea:	26 c0       	rjmp	.+76     	; 0x3e38 <HomeControl_enu_HomeControlSystem+0x4d6>

                while((Local_u8_KeyValue == KEYPAD_NOT_PRESSED_VALUE) || (u8_SystemState == CONTROL_MENU))
                {
                    Keypad_enu_GetButtonPressedValue(&Local_u8_KeyValue);
    3dec:	ce 01       	movw	r24, r28
    3dee:	cc 96       	adiw	r24, 0x3c	; 60
    3df0:	0e 94 92 19 	call	0x3324	; 0x3324 <Keypad_enu_GetButtonPressedValue>

                    if(Local_u8_KeyValue == '1')
    3df4:	8c ad       	ldd	r24, Y+60	; 0x3c
    3df6:	81 33       	cpi	r24, 0x31	; 49
    3df8:	21 f4       	brne	.+8      	; 0x3e02 <HomeControl_enu_HomeControlSystem+0x4a0>
                    {
                        u8_SystemState = CONTROL_LED_MENU;
    3dfa:	83 e0       	ldi	r24, 0x03	; 3
    3dfc:	80 93 88 02 	sts	0x0288, r24
    3e00:	1b c0       	rjmp	.+54     	; 0x3e38 <HomeControl_enu_HomeControlSystem+0x4d6>
                    }
                    else if (Local_u8_KeyValue == '2')
    3e02:	8c ad       	ldd	r24, Y+60	; 0x3c
    3e04:	82 33       	cpi	r24, 0x32	; 50
    3e06:	21 f4       	brne	.+8      	; 0x3e10 <HomeControl_enu_HomeControlSystem+0x4ae>
                    {

                        u8_SystemState = CONTROL_AC_OPTION;
    3e08:	85 e0       	ldi	r24, 0x05	; 5
    3e0a:	80 93 88 02 	sts	0x0288, r24
    3e0e:	14 c0       	rjmp	.+40     	; 0x3e38 <HomeControl_enu_HomeControlSystem+0x4d6>
                    }
                    else if (Local_u8_KeyValue == '3')
    3e10:	8c ad       	ldd	r24, Y+60	; 0x3c
    3e12:	83 33       	cpi	r24, 0x33	; 51
    3e14:	21 f4       	brne	.+8      	; 0x3e1e <HomeControl_enu_HomeControlSystem+0x4bc>
                    {
                        
                        u8_SystemState = CONTROL_TEMPERATURE_OPTION;
    3e16:	86 e0       	ldi	r24, 0x06	; 6
    3e18:	80 93 88 02 	sts	0x0288, r24
    3e1c:	0d c0       	rjmp	.+26     	; 0x3e38 <HomeControl_enu_HomeControlSystem+0x4d6>
                    }
                    else if (Local_u8_KeyValue == '4')
    3e1e:	8c ad       	ldd	r24, Y+60	; 0x3c
    3e20:	84 33       	cpi	r24, 0x34	; 52
    3e22:	21 f4       	brne	.+8      	; 0x3e2c <HomeControl_enu_HomeControlSystem+0x4ca>
                    {
                        u8_SystemState = CONTROL_EXIT_OPTION;
    3e24:	87 e0       	ldi	r24, 0x07	; 7
    3e26:	80 93 88 02 	sts	0x0288, r24
    3e2a:	06 c0       	rjmp	.+12     	; 0x3e38 <HomeControl_enu_HomeControlSystem+0x4d6>
                    }
                    else if (Local_u8_KeyValue != KEYPAD_NOT_PRESSED_VALUE)
    3e2c:	8c ad       	ldd	r24, Y+60	; 0x3c
    3e2e:	8f 3f       	cpi	r24, 0xFF	; 255
    3e30:	19 f0       	breq	.+6      	; 0x3e38 <HomeControl_enu_HomeControlSystem+0x4d6>
                    {
                        enu_WrongChoiceSelected(LCD_PAGE_1);
    3e32:	81 e0       	ldi	r24, 0x01	; 1
    3e34:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <enu_WrongChoiceSelected>
                u8 Local_u8_KeyValue;

                //printing the home screen
                enu_PrintScreen(CONTROL_MENU);

                while((Local_u8_KeyValue == KEYPAD_NOT_PRESSED_VALUE) || (u8_SystemState == CONTROL_MENU))
    3e38:	8c ad       	ldd	r24, Y+60	; 0x3c
    3e3a:	8f 3f       	cpi	r24, 0xFF	; 255
    3e3c:	b9 f2       	breq	.-82     	; 0x3dec <HomeControl_enu_HomeControlSystem+0x48a>
    3e3e:	80 91 88 02 	lds	r24, 0x0288
    3e42:	82 30       	cpi	r24, 0x02	; 2
    3e44:	99 f2       	breq	.-90     	; 0x3dec <HomeControl_enu_HomeControlSystem+0x48a>
    3e46:	44 c1       	rjmp	.+648    	; 0x40d0 <HomeControl_enu_HomeControlSystem+0x76e>
            case CONTROL_LED_MENU:
            {
                u8 Local_u8_KeyValue;

                //printing the home screen
                enu_PrintScreen(CONTROL_LED_MENU);            
    3e48:	83 e0       	ldi	r24, 0x03	; 3
    3e4a:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <enu_PrintScreen>
    3e4e:	2e c0       	rjmp	.+92     	; 0x3eac <HomeControl_enu_HomeControlSystem+0x54a>

                while((Local_u8_KeyValue == KEYPAD_NOT_PRESSED_VALUE) || (u8_SystemState == CONTROL_LED_MENU))
                {
                    Keypad_enu_GetButtonPressedValue(&Local_u8_KeyValue);
    3e50:	ce 01       	movw	r24, r28
    3e52:	cd 96       	adiw	r24, 0x3d	; 61
    3e54:	0e 94 92 19 	call	0x3324	; 0x3324 <Keypad_enu_GetButtonPressedValue>

                    if(Local_u8_KeyValue == '1')
    3e58:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e5a:	81 33       	cpi	r24, 0x31	; 49
    3e5c:	31 f4       	brne	.+12     	; 0x3e6a <HomeControl_enu_HomeControlSystem+0x508>
                    {
                        u8_ChosenLED = LED_0;
    3e5e:	10 92 3e 02 	sts	0x023E, r1
                        u8_SystemState = LED_INNER_MENU;
    3e62:	84 e0       	ldi	r24, 0x04	; 4
    3e64:	80 93 88 02 	sts	0x0288, r24
    3e68:	21 c0       	rjmp	.+66     	; 0x3eac <HomeControl_enu_HomeControlSystem+0x54a>
                    }
                    else if (Local_u8_KeyValue == '2')
    3e6a:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e6c:	82 33       	cpi	r24, 0x32	; 50
    3e6e:	39 f4       	brne	.+14     	; 0x3e7e <HomeControl_enu_HomeControlSystem+0x51c>
                    {
                        u8_ChosenLED = LED_1;
    3e70:	81 e0       	ldi	r24, 0x01	; 1
    3e72:	80 93 3e 02 	sts	0x023E, r24
                        u8_SystemState = LED_INNER_MENU;
    3e76:	84 e0       	ldi	r24, 0x04	; 4
    3e78:	80 93 88 02 	sts	0x0288, r24
    3e7c:	17 c0       	rjmp	.+46     	; 0x3eac <HomeControl_enu_HomeControlSystem+0x54a>
                    }
                    else if (Local_u8_KeyValue == '3')
    3e7e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e80:	83 33       	cpi	r24, 0x33	; 51
    3e82:	39 f4       	brne	.+14     	; 0x3e92 <HomeControl_enu_HomeControlSystem+0x530>
                    {
                        u8_ChosenLED = LED_2;
    3e84:	82 e0       	ldi	r24, 0x02	; 2
    3e86:	80 93 3e 02 	sts	0x023E, r24
                        u8_SystemState = LED_INNER_MENU;
    3e8a:	84 e0       	ldi	r24, 0x04	; 4
    3e8c:	80 93 88 02 	sts	0x0288, r24
    3e90:	0d c0       	rjmp	.+26     	; 0x3eac <HomeControl_enu_HomeControlSystem+0x54a>
                    }
                    else if (Local_u8_KeyValue == '4')
    3e92:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e94:	84 33       	cpi	r24, 0x34	; 52
    3e96:	21 f4       	brne	.+8      	; 0x3ea0 <HomeControl_enu_HomeControlSystem+0x53e>
                    {
                        u8_SystemState = CONTROL_MENU;
    3e98:	82 e0       	ldi	r24, 0x02	; 2
    3e9a:	80 93 88 02 	sts	0x0288, r24
    3e9e:	06 c0       	rjmp	.+12     	; 0x3eac <HomeControl_enu_HomeControlSystem+0x54a>
                    }
                    else if(Local_u8_KeyValue != KEYPAD_NOT_PRESSED_VALUE)
    3ea0:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ea2:	8f 3f       	cpi	r24, 0xFF	; 255
    3ea4:	19 f0       	breq	.+6      	; 0x3eac <HomeControl_enu_HomeControlSystem+0x54a>
                    {
                        enu_WrongChoiceSelected(LCD_PAGE_1);
    3ea6:	81 e0       	ldi	r24, 0x01	; 1
    3ea8:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <enu_WrongChoiceSelected>
                u8 Local_u8_KeyValue;

                //printing the home screen
                enu_PrintScreen(CONTROL_LED_MENU);            

                while((Local_u8_KeyValue == KEYPAD_NOT_PRESSED_VALUE) || (u8_SystemState == CONTROL_LED_MENU))
    3eac:	8d ad       	ldd	r24, Y+61	; 0x3d
    3eae:	8f 3f       	cpi	r24, 0xFF	; 255
    3eb0:	79 f2       	breq	.-98     	; 0x3e50 <HomeControl_enu_HomeControlSystem+0x4ee>
    3eb2:	80 91 88 02 	lds	r24, 0x0288
    3eb6:	83 30       	cpi	r24, 0x03	; 3
    3eb8:	59 f2       	breq	.-106    	; 0x3e50 <HomeControl_enu_HomeControlSystem+0x4ee>
    3eba:	0a c1       	rjmp	.+532    	; 0x40d0 <HomeControl_enu_HomeControlSystem+0x76e>
            case LED_INNER_MENU:
            {   
                u8 Local_u8_KeyValue;

                //printing the LED_INNER_MENU
                enu_PrintScreen(LED_INNER_MENU);
    3ebc:	84 e0       	ldi	r24, 0x04	; 4
    3ebe:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <enu_PrintScreen>
    3ec2:	24 c0       	rjmp	.+72     	; 0x3f0c <HomeControl_enu_HomeControlSystem+0x5aa>

                while((Local_u8_KeyValue == KEYPAD_NOT_PRESSED_VALUE) || (u8_SystemState == LED_INNER_MENU))
                {
                    Keypad_enu_GetButtonPressedValue(&Local_u8_KeyValue);
    3ec4:	ce 01       	movw	r24, r28
    3ec6:	ce 96       	adiw	r24, 0x3e	; 62
    3ec8:	0e 94 92 19 	call	0x3324	; 0x3324 <Keypad_enu_GetButtonPressedValue>

                    if(Local_u8_KeyValue == '1')
    3ecc:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ece:	81 33       	cpi	r24, 0x31	; 49
    3ed0:	29 f4       	brne	.+10     	; 0x3edc <HomeControl_enu_HomeControlSystem+0x57a>
                    {
                        LED_enu_TurnOnLED(u8_ChosenLED);
    3ed2:	80 91 3e 02 	lds	r24, 0x023E
    3ed6:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <LED_enu_TurnOnLED>
    3eda:	18 c0       	rjmp	.+48     	; 0x3f0c <HomeControl_enu_HomeControlSystem+0x5aa>
                    }
                    else if(Local_u8_KeyValue == '2')
    3edc:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ede:	82 33       	cpi	r24, 0x32	; 50
    3ee0:	29 f4       	brne	.+10     	; 0x3eec <HomeControl_enu_HomeControlSystem+0x58a>
                    {
                        LED_enu_TurnOffLED(u8_ChosenLED);
    3ee2:	80 91 3e 02 	lds	r24, 0x023E
    3ee6:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LED_enu_TurnOffLED>
    3eea:	10 c0       	rjmp	.+32     	; 0x3f0c <HomeControl_enu_HomeControlSystem+0x5aa>
                        
                    }   
                    else if (Local_u8_KeyValue == '3')
    3eec:	8e ad       	ldd	r24, Y+62	; 0x3e
    3eee:	83 33       	cpi	r24, 0x33	; 51
    3ef0:	39 f4       	brne	.+14     	; 0x3f00 <HomeControl_enu_HomeControlSystem+0x59e>
                    {
                        u8_ChosenLED = LED_NOT_CHOSEN;
    3ef2:	8f ef       	ldi	r24, 0xFF	; 255
    3ef4:	80 93 3e 02 	sts	0x023E, r24
                        u8_SystemState = CONTROL_LED_MENU;
    3ef8:	83 e0       	ldi	r24, 0x03	; 3
    3efa:	80 93 88 02 	sts	0x0288, r24
    3efe:	06 c0       	rjmp	.+12     	; 0x3f0c <HomeControl_enu_HomeControlSystem+0x5aa>
                    }
                    else if(Local_u8_KeyValue != KEYPAD_NOT_PRESSED_VALUE)
    3f00:	8e ad       	ldd	r24, Y+62	; 0x3e
    3f02:	8f 3f       	cpi	r24, 0xFF	; 255
    3f04:	19 f0       	breq	.+6      	; 0x3f0c <HomeControl_enu_HomeControlSystem+0x5aa>
                    {
                        enu_WrongChoiceSelected(LCD_PAGE_1);
    3f06:	81 e0       	ldi	r24, 0x01	; 1
    3f08:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <enu_WrongChoiceSelected>
                u8 Local_u8_KeyValue;

                //printing the LED_INNER_MENU
                enu_PrintScreen(LED_INNER_MENU);

                while((Local_u8_KeyValue == KEYPAD_NOT_PRESSED_VALUE) || (u8_SystemState == LED_INNER_MENU))
    3f0c:	8e ad       	ldd	r24, Y+62	; 0x3e
    3f0e:	8f 3f       	cpi	r24, 0xFF	; 255
    3f10:	c9 f2       	breq	.-78     	; 0x3ec4 <HomeControl_enu_HomeControlSystem+0x562>
    3f12:	80 91 88 02 	lds	r24, 0x0288
    3f16:	84 30       	cpi	r24, 0x04	; 4
    3f18:	a9 f2       	breq	.-86     	; 0x3ec4 <HomeControl_enu_HomeControlSystem+0x562>
    3f1a:	da c0       	rjmp	.+436    	; 0x40d0 <HomeControl_enu_HomeControlSystem+0x76e>
            case CONTROL_AC_OPTION:
            {
                u8 Local_u8_KeyValue;

                //printing the home screen
                enu_PrintScreen(CONTROL_AC_OPTION);
    3f1c:	85 e0       	ldi	r24, 0x05	; 5
    3f1e:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <enu_PrintScreen>
    3f22:	1f c0       	rjmp	.+62     	; 0x3f62 <HomeControl_enu_HomeControlSystem+0x600>

                while((Local_u8_KeyValue == KEYPAD_NOT_PRESSED_VALUE) || (u8_SystemState == CONTROL_AC_OPTION))
                {
                    Keypad_enu_GetButtonPressedValue(&Local_u8_KeyValue);
    3f24:	ce 01       	movw	r24, r28
    3f26:	cf 96       	adiw	r24, 0x3f	; 63
    3f28:	0e 94 92 19 	call	0x3324	; 0x3324 <Keypad_enu_GetButtonPressedValue>

                    if(Local_u8_KeyValue == '1')
    3f2c:	8f ad       	ldd	r24, Y+63	; 0x3f
    3f2e:	81 33       	cpi	r24, 0x31	; 49
    3f30:	21 f4       	brne	.+8      	; 0x3f3a <HomeControl_enu_HomeControlSystem+0x5d8>
                    {
                        Relay_enu_TuronOnRelay(RELAY_0);
    3f32:	80 e0       	ldi	r24, 0x00	; 0
    3f34:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <Relay_enu_TuronOnRelay>
    3f38:	14 c0       	rjmp	.+40     	; 0x3f62 <HomeControl_enu_HomeControlSystem+0x600>
                    }
                    else if(Local_u8_KeyValue == '2')
    3f3a:	8f ad       	ldd	r24, Y+63	; 0x3f
    3f3c:	82 33       	cpi	r24, 0x32	; 50
    3f3e:	21 f4       	brne	.+8      	; 0x3f48 <HomeControl_enu_HomeControlSystem+0x5e6>
                    {
                    
                        Relay_enu_TuronOffRelay(RELAY_0);
    3f40:	80 e0       	ldi	r24, 0x00	; 0
    3f42:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <Relay_enu_TuronOffRelay>
    3f46:	0d c0       	rjmp	.+26     	; 0x3f62 <HomeControl_enu_HomeControlSystem+0x600>
                        
                    }   
                    else if (Local_u8_KeyValue == '3')
    3f48:	8f ad       	ldd	r24, Y+63	; 0x3f
    3f4a:	83 33       	cpi	r24, 0x33	; 51
    3f4c:	21 f4       	brne	.+8      	; 0x3f56 <HomeControl_enu_HomeControlSystem+0x5f4>
                    {
                        u8_SystemState = CONTROL_LED_MENU;
    3f4e:	83 e0       	ldi	r24, 0x03	; 3
    3f50:	80 93 88 02 	sts	0x0288, r24
    3f54:	06 c0       	rjmp	.+12     	; 0x3f62 <HomeControl_enu_HomeControlSystem+0x600>
                    }
                    else if(Local_u8_KeyValue != KEYPAD_NOT_PRESSED_VALUE)
    3f56:	8f ad       	ldd	r24, Y+63	; 0x3f
    3f58:	8f 3f       	cpi	r24, 0xFF	; 255
    3f5a:	19 f0       	breq	.+6      	; 0x3f62 <HomeControl_enu_HomeControlSystem+0x600>
                    {
                        enu_WrongChoiceSelected(LCD_PAGE_1);
    3f5c:	81 e0       	ldi	r24, 0x01	; 1
    3f5e:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <enu_WrongChoiceSelected>
                u8 Local_u8_KeyValue;

                //printing the home screen
                enu_PrintScreen(CONTROL_AC_OPTION);

                while((Local_u8_KeyValue == KEYPAD_NOT_PRESSED_VALUE) || (u8_SystemState == CONTROL_AC_OPTION))
    3f62:	8f ad       	ldd	r24, Y+63	; 0x3f
    3f64:	8f 3f       	cpi	r24, 0xFF	; 255
    3f66:	f1 f2       	breq	.-68     	; 0x3f24 <HomeControl_enu_HomeControlSystem+0x5c2>
    3f68:	80 91 88 02 	lds	r24, 0x0288
    3f6c:	85 30       	cpi	r24, 0x05	; 5
    3f6e:	d1 f2       	breq	.-76     	; 0x3f24 <HomeControl_enu_HomeControlSystem+0x5c2>
    3f70:	af c0       	rjmp	.+350    	; 0x40d0 <HomeControl_enu_HomeControlSystem+0x76e>
            case CONTROL_TEMPERATURE_OPTION:
            {
                u8 Local_u8_KeyValue;

                //printing the home screen
                enu_PrintScreen(CONTROL_TEMPERATURE_OPTION);
    3f72:	86 e0       	ldi	r24, 0x06	; 6
    3f74:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <enu_PrintScreen>

                //Displaying Temperature (Hardcoded for now)
                LCD_enu_GoToPosition(LCD_ROW_1, LCD_COLUMN_15,LCD_PAGE_1);
    3f78:	81 e0       	ldi	r24, 0x01	; 1
    3f7a:	6f e0       	ldi	r22, 0x0F	; 15
    3f7c:	41 e0       	ldi	r20, 0x01	; 1
    3f7e:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enu_GoToPosition>
                LCD_enu_SendString("25");
    3f82:	84 e7       	ldi	r24, 0x74	; 116
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_enu_SendString>
    3f8a:	18 c0       	rjmp	.+48     	; 0x3fbc <HomeControl_enu_HomeControlSystem+0x65a>

                while((Local_u8_KeyValue == KEYPAD_NOT_PRESSED_VALUE) || (u8_SystemState == CONTROL_TEMPERATURE_OPTION))
                {

                    //Getting key pressed
                    Keypad_enu_GetButtonPressedValue(&Local_u8_KeyValue);
    3f8c:	ce 01       	movw	r24, r28
    3f8e:	80 5c       	subi	r24, 0xC0	; 192
    3f90:	9f 4f       	sbci	r25, 0xFF	; 255
    3f92:	0e 94 92 19 	call	0x3324	; 0x3324 <Keypad_enu_GetButtonPressedValue>

                    if(Local_u8_KeyValue == '1')
    3f96:	fe 01       	movw	r30, r28
    3f98:	e0 5c       	subi	r30, 0xC0	; 192
    3f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9c:	80 81       	ld	r24, Z
    3f9e:	81 33       	cpi	r24, 0x31	; 49
    3fa0:	21 f4       	brne	.+8      	; 0x3faa <HomeControl_enu_HomeControlSystem+0x648>
                    {
                        u8_SystemState = CONTROL_MENU;
    3fa2:	82 e0       	ldi	r24, 0x02	; 2
    3fa4:	80 93 88 02 	sts	0x0288, r24
    3fa8:	09 c0       	rjmp	.+18     	; 0x3fbc <HomeControl_enu_HomeControlSystem+0x65a>
                    }
                    else if(Local_u8_KeyValue != KEYPAD_NOT_PRESSED_VALUE)
    3faa:	fe 01       	movw	r30, r28
    3fac:	e0 5c       	subi	r30, 0xC0	; 192
    3fae:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb0:	80 81       	ld	r24, Z
    3fb2:	8f 3f       	cpi	r24, 0xFF	; 255
    3fb4:	19 f0       	breq	.+6      	; 0x3fbc <HomeControl_enu_HomeControlSystem+0x65a>
                    {
                        //If wrong choice was entered
                        enu_WrongChoiceSelected(LCD_PAGE_1);
    3fb6:	81 e0       	ldi	r24, 0x01	; 1
    3fb8:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <enu_WrongChoiceSelected>

                //Displaying Temperature (Hardcoded for now)
                LCD_enu_GoToPosition(LCD_ROW_1, LCD_COLUMN_15,LCD_PAGE_1);
                LCD_enu_SendString("25");

                while((Local_u8_KeyValue == KEYPAD_NOT_PRESSED_VALUE) || (u8_SystemState == CONTROL_TEMPERATURE_OPTION))
    3fbc:	fe 01       	movw	r30, r28
    3fbe:	e0 5c       	subi	r30, 0xC0	; 192
    3fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc2:	80 81       	ld	r24, Z
    3fc4:	8f 3f       	cpi	r24, 0xFF	; 255
    3fc6:	11 f3       	breq	.-60     	; 0x3f8c <HomeControl_enu_HomeControlSystem+0x62a>
    3fc8:	80 91 88 02 	lds	r24, 0x0288
    3fcc:	86 30       	cpi	r24, 0x06	; 6
    3fce:	f1 f2       	breq	.-68     	; 0x3f8c <HomeControl_enu_HomeControlSystem+0x62a>
    3fd0:	7f c0       	rjmp	.+254    	; 0x40d0 <HomeControl_enu_HomeControlSystem+0x76e>
            break;

            case CONTROL_EXIT_OPTION:
            {
                //printing the home screen
                enu_PrintScreen(CONTROL_EXIT_OPTION);
    3fd2:	87 e0       	ldi	r24, 0x07	; 7
    3fd4:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <enu_PrintScreen>
    3fd8:	80 e0       	ldi	r24, 0x00	; 0
    3fda:	90 e0       	ldi	r25, 0x00	; 0
    3fdc:	aa ef       	ldi	r26, 0xFA	; 250
    3fde:	b4 e4       	ldi	r27, 0x44	; 68
    3fe0:	8b 87       	std	Y+11, r24	; 0x0b
    3fe2:	9c 87       	std	Y+12, r25	; 0x0c
    3fe4:	ad 87       	std	Y+13, r26	; 0x0d
    3fe6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fe8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fea:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fec:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fee:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ff0:	20 e0       	ldi	r18, 0x00	; 0
    3ff2:	30 e0       	ldi	r19, 0x00	; 0
    3ff4:	4a e7       	ldi	r20, 0x7A	; 122
    3ff6:	55 e4       	ldi	r21, 0x45	; 69
    3ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ffc:	dc 01       	movw	r26, r24
    3ffe:	cb 01       	movw	r24, r22
    4000:	8f 83       	std	Y+7, r24	; 0x07
    4002:	98 87       	std	Y+8, r25	; 0x08
    4004:	a9 87       	std	Y+9, r26	; 0x09
    4006:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4008:	6f 81       	ldd	r22, Y+7	; 0x07
    400a:	78 85       	ldd	r23, Y+8	; 0x08
    400c:	89 85       	ldd	r24, Y+9	; 0x09
    400e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4010:	20 e0       	ldi	r18, 0x00	; 0
    4012:	30 e0       	ldi	r19, 0x00	; 0
    4014:	40 e8       	ldi	r20, 0x80	; 128
    4016:	5f e3       	ldi	r21, 0x3F	; 63
    4018:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    401c:	88 23       	and	r24, r24
    401e:	2c f4       	brge	.+10     	; 0x402a <HomeControl_enu_HomeControlSystem+0x6c8>
		__ticks = 1;
    4020:	81 e0       	ldi	r24, 0x01	; 1
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	9e 83       	std	Y+6, r25	; 0x06
    4026:	8d 83       	std	Y+5, r24	; 0x05
    4028:	3f c0       	rjmp	.+126    	; 0x40a8 <HomeControl_enu_HomeControlSystem+0x746>
	else if (__tmp > 65535)
    402a:	6f 81       	ldd	r22, Y+7	; 0x07
    402c:	78 85       	ldd	r23, Y+8	; 0x08
    402e:	89 85       	ldd	r24, Y+9	; 0x09
    4030:	9a 85       	ldd	r25, Y+10	; 0x0a
    4032:	20 e0       	ldi	r18, 0x00	; 0
    4034:	3f ef       	ldi	r19, 0xFF	; 255
    4036:	4f e7       	ldi	r20, 0x7F	; 127
    4038:	57 e4       	ldi	r21, 0x47	; 71
    403a:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    403e:	18 16       	cp	r1, r24
    4040:	4c f5       	brge	.+82     	; 0x4094 <HomeControl_enu_HomeControlSystem+0x732>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4042:	6b 85       	ldd	r22, Y+11	; 0x0b
    4044:	7c 85       	ldd	r23, Y+12	; 0x0c
    4046:	8d 85       	ldd	r24, Y+13	; 0x0d
    4048:	9e 85       	ldd	r25, Y+14	; 0x0e
    404a:	20 e0       	ldi	r18, 0x00	; 0
    404c:	30 e0       	ldi	r19, 0x00	; 0
    404e:	40 e2       	ldi	r20, 0x20	; 32
    4050:	51 e4       	ldi	r21, 0x41	; 65
    4052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4056:	dc 01       	movw	r26, r24
    4058:	cb 01       	movw	r24, r22
    405a:	bc 01       	movw	r22, r24
    405c:	cd 01       	movw	r24, r26
    405e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4062:	dc 01       	movw	r26, r24
    4064:	cb 01       	movw	r24, r22
    4066:	9e 83       	std	Y+6, r25	; 0x06
    4068:	8d 83       	std	Y+5, r24	; 0x05
    406a:	0f c0       	rjmp	.+30     	; 0x408a <HomeControl_enu_HomeControlSystem+0x728>
    406c:	80 e9       	ldi	r24, 0x90	; 144
    406e:	91 e0       	ldi	r25, 0x01	; 1
    4070:	9c 83       	std	Y+4, r25	; 0x04
    4072:	8b 83       	std	Y+3, r24	; 0x03
    4074:	8b 81       	ldd	r24, Y+3	; 0x03
    4076:	9c 81       	ldd	r25, Y+4	; 0x04
    4078:	01 97       	sbiw	r24, 0x01	; 1
    407a:	f1 f7       	brne	.-4      	; 0x4078 <HomeControl_enu_HomeControlSystem+0x716>
    407c:	9c 83       	std	Y+4, r25	; 0x04
    407e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4080:	8d 81       	ldd	r24, Y+5	; 0x05
    4082:	9e 81       	ldd	r25, Y+6	; 0x06
    4084:	01 97       	sbiw	r24, 0x01	; 1
    4086:	9e 83       	std	Y+6, r25	; 0x06
    4088:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    408a:	8d 81       	ldd	r24, Y+5	; 0x05
    408c:	9e 81       	ldd	r25, Y+6	; 0x06
    408e:	00 97       	sbiw	r24, 0x00	; 0
    4090:	69 f7       	brne	.-38     	; 0x406c <HomeControl_enu_HomeControlSystem+0x70a>
    4092:	14 c0       	rjmp	.+40     	; 0x40bc <HomeControl_enu_HomeControlSystem+0x75a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4094:	6f 81       	ldd	r22, Y+7	; 0x07
    4096:	78 85       	ldd	r23, Y+8	; 0x08
    4098:	89 85       	ldd	r24, Y+9	; 0x09
    409a:	9a 85       	ldd	r25, Y+10	; 0x0a
    409c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40a0:	dc 01       	movw	r26, r24
    40a2:	cb 01       	movw	r24, r22
    40a4:	9e 83       	std	Y+6, r25	; 0x06
    40a6:	8d 83       	std	Y+5, r24	; 0x05
    40a8:	8d 81       	ldd	r24, Y+5	; 0x05
    40aa:	9e 81       	ldd	r25, Y+6	; 0x06
    40ac:	9a 83       	std	Y+2, r25	; 0x02
    40ae:	89 83       	std	Y+1, r24	; 0x01
    40b0:	89 81       	ldd	r24, Y+1	; 0x01
    40b2:	9a 81       	ldd	r25, Y+2	; 0x02
    40b4:	01 97       	sbiw	r24, 0x01	; 1
    40b6:	f1 f7       	brne	.-4      	; 0x40b4 <HomeControl_enu_HomeControlSystem+0x752>
    40b8:	9a 83       	std	Y+2, r25	; 0x02
    40ba:	89 83       	std	Y+1, r24	; 0x01
                //Fake delay
                _delay_ms(2000);

                u8_SystemState = SHUTDOWN;
    40bc:	89 e0       	ldi	r24, 0x09	; 9
    40be:	80 93 88 02 	sts	0x0288, r24
    40c2:	06 c0       	rjmp	.+12     	; 0x40d0 <HomeControl_enu_HomeControlSystem+0x76e>
            break;

            case ALERT:
            {
                //printing the home screen
                enu_PrintScreen(ALERT);
    40c4:	88 e0       	ldi	r24, 0x08	; 8
    40c6:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <enu_PrintScreen>
                Buzzer_enu_TurnOnAllBuzzers();
    40ca:	0e 94 21 1c 	call	0x3842	; 0x3842 <Buzzer_enu_TurnOnAllBuzzers>
    40ce:	ff cf       	rjmp	.-2      	; 0x40ce <HomeControl_enu_HomeControlSystem+0x76c>
    return Local_u8_ErrorFlag;
}

extern ErrorState_t HomeControl_enu_HomeControlSystem (void)
{
    while (u8_SystemState != SHUTDOWN)
    40d0:	80 91 88 02 	lds	r24, 0x0288
    40d4:	89 30       	cpi	r24, 0x09	; 9
    40d6:	09 f0       	breq	.+2      	; 0x40da <HomeControl_enu_HomeControlSystem+0x778>
    40d8:	50 cc       	rjmp	.-1888   	; 0x397a <HomeControl_enu_HomeControlSystem+0x18>
        }

    }

    //Clearing page when system shutsdown
    LCD_enu_ClearPage(LCD_PAGE_1);
    40da:	81 e0       	ldi	r24, 0x01	; 1
    40dc:	0e 94 b9 11 	call	0x2372	; 0x2372 <LCD_enu_ClearPage>
}
    40e0:	cd 5b       	subi	r28, 0xBD	; 189
    40e2:	df 4f       	sbci	r29, 0xFF	; 255
    40e4:	0f b6       	in	r0, 0x3f	; 63
    40e6:	f8 94       	cli
    40e8:	de bf       	out	0x3e, r29	; 62
    40ea:	0f be       	out	0x3f, r0	; 63
    40ec:	cd bf       	out	0x3d, r28	; 61
    40ee:	cf 91       	pop	r28
    40f0:	df 91       	pop	r29
    40f2:	08 95       	ret

000040f4 <enu_PrintScreen>:



static ErrorState_t enu_PrintScreen(u8 Copy_u8_ScreenToPrint)
{
    40f4:	cf 92       	push	r12
    40f6:	ef 92       	push	r14
    40f8:	0f 93       	push	r16
    40fa:	df 93       	push	r29
    40fc:	cf 93       	push	r28
    40fe:	cd b7       	in	r28, 0x3d	; 61
    4100:	de b7       	in	r29, 0x3e	; 62
    4102:	e1 97       	sbiw	r28, 0x31	; 49
    4104:	0f b6       	in	r0, 0x3f	; 63
    4106:	f8 94       	cli
    4108:	de bf       	out	0x3e, r29	; 62
    410a:	0f be       	out	0x3f, r0	; 63
    410c:	cd bf       	out	0x3d, r28	; 61
    410e:	8a a7       	std	Y+42, r24	; 0x2a
    u8 Local_u8_ErrorFlag = ES_NOK;
    4110:	81 e0       	ldi	r24, 0x01	; 1
    4112:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_ScreenToPrint)
    4114:	8a a5       	ldd	r24, Y+42	; 0x2a
    4116:	28 2f       	mov	r18, r24
    4118:	30 e0       	ldi	r19, 0x00	; 0
    411a:	3c a7       	std	Y+44, r19	; 0x2c
    411c:	2b a7       	std	Y+43, r18	; 0x2b
    411e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4120:	9c a5       	ldd	r25, Y+44	; 0x2c
    4122:	84 30       	cpi	r24, 0x04	; 4
    4124:	91 05       	cpc	r25, r1
    4126:	09 f4       	brne	.+2      	; 0x412a <enu_PrintScreen+0x36>
    4128:	ae c0       	rjmp	.+348    	; 0x4286 <enu_PrintScreen+0x192>
    412a:	eb a5       	ldd	r30, Y+43	; 0x2b
    412c:	fc a5       	ldd	r31, Y+44	; 0x2c
    412e:	e5 30       	cpi	r30, 0x05	; 5
    4130:	f1 05       	cpc	r31, r1
    4132:	ec f4       	brge	.+58     	; 0x416e <enu_PrintScreen+0x7a>
    4134:	2b a5       	ldd	r18, Y+43	; 0x2b
    4136:	3c a5       	ldd	r19, Y+44	; 0x2c
    4138:	21 30       	cpi	r18, 0x01	; 1
    413a:	31 05       	cpc	r19, r1
    413c:	09 f4       	brne	.+2      	; 0x4140 <enu_PrintScreen+0x4c>
    413e:	46 c0       	rjmp	.+140    	; 0x41cc <enu_PrintScreen+0xd8>
    4140:	8b a5       	ldd	r24, Y+43	; 0x2b
    4142:	9c a5       	ldd	r25, Y+44	; 0x2c
    4144:	82 30       	cpi	r24, 0x02	; 2
    4146:	91 05       	cpc	r25, r1
    4148:	2c f4       	brge	.+10     	; 0x4154 <enu_PrintScreen+0x60>
    414a:	eb a5       	ldd	r30, Y+43	; 0x2b
    414c:	fc a5       	ldd	r31, Y+44	; 0x2c
    414e:	30 97       	sbiw	r30, 0x00	; 0
    4150:	39 f1       	breq	.+78     	; 0x41a0 <enu_PrintScreen+0xac>
    4152:	41 c1       	rjmp	.+642    	; 0x43d6 <enu_PrintScreen+0x2e2>
    4154:	2b a5       	ldd	r18, Y+43	; 0x2b
    4156:	3c a5       	ldd	r19, Y+44	; 0x2c
    4158:	22 30       	cpi	r18, 0x02	; 2
    415a:	31 05       	cpc	r19, r1
    415c:	09 f4       	brne	.+2      	; 0x4160 <enu_PrintScreen+0x6c>
    415e:	43 c0       	rjmp	.+134    	; 0x41e6 <enu_PrintScreen+0xf2>
    4160:	8b a5       	ldd	r24, Y+43	; 0x2b
    4162:	9c a5       	ldd	r25, Y+44	; 0x2c
    4164:	83 30       	cpi	r24, 0x03	; 3
    4166:	91 05       	cpc	r25, r1
    4168:	09 f4       	brne	.+2      	; 0x416c <enu_PrintScreen+0x78>
    416a:	65 c0       	rjmp	.+202    	; 0x4236 <enu_PrintScreen+0x142>
    416c:	34 c1       	rjmp	.+616    	; 0x43d6 <enu_PrintScreen+0x2e2>
    416e:	eb a5       	ldd	r30, Y+43	; 0x2b
    4170:	fc a5       	ldd	r31, Y+44	; 0x2c
    4172:	e6 30       	cpi	r30, 0x06	; 6
    4174:	f1 05       	cpc	r31, r1
    4176:	09 f4       	brne	.+2      	; 0x417a <enu_PrintScreen+0x86>
    4178:	c4 c0       	rjmp	.+392    	; 0x4302 <enu_PrintScreen+0x20e>
    417a:	2b a5       	ldd	r18, Y+43	; 0x2b
    417c:	3c a5       	ldd	r19, Y+44	; 0x2c
    417e:	26 30       	cpi	r18, 0x06	; 6
    4180:	31 05       	cpc	r19, r1
    4182:	0c f4       	brge	.+2      	; 0x4186 <enu_PrintScreen+0x92>
    4184:	9f c0       	rjmp	.+318    	; 0x42c4 <enu_PrintScreen+0x1d0>
    4186:	8b a5       	ldd	r24, Y+43	; 0x2b
    4188:	9c a5       	ldd	r25, Y+44	; 0x2c
    418a:	87 30       	cpi	r24, 0x07	; 7
    418c:	91 05       	cpc	r25, r1
    418e:	09 f4       	brne	.+2      	; 0x4192 <enu_PrintScreen+0x9e>
    4190:	ce c0       	rjmp	.+412    	; 0x432e <enu_PrintScreen+0x23a>
    4192:	eb a5       	ldd	r30, Y+43	; 0x2b
    4194:	fc a5       	ldd	r31, Y+44	; 0x2c
    4196:	e8 30       	cpi	r30, 0x08	; 8
    4198:	f1 05       	cpc	r31, r1
    419a:	09 f4       	brne	.+2      	; 0x419e <enu_PrintScreen+0xaa>
    419c:	de c0       	rjmp	.+444    	; 0x435a <enu_PrintScreen+0x266>
    419e:	1b c1       	rjmp	.+566    	; 0x43d6 <enu_PrintScreen+0x2e2>
    {

        case HOME_SCREEN:
        
        //Clearing Page
        LCD_enu_ClearPage(LCD_PAGE_1);
    41a0:	81 e0       	ldi	r24, 0x01	; 1
    41a2:	0e 94 b9 11 	call	0x2372	; 0x2372 <LCD_enu_ClearPage>
        
        //Displaying 'Welcome'
        LCD_enu_GoToPosition(LCD_ROW_1,LCD_COLUMN_5,LCD_PAGE_1);
    41a6:	81 e0       	ldi	r24, 0x01	; 1
    41a8:	65 e0       	ldi	r22, 0x05	; 5
    41aa:	41 e0       	ldi	r20, 0x01	; 1
    41ac:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enu_GoToPosition>
        LCD_enu_SendString("WELCOME!");
    41b0:	87 e7       	ldi	r24, 0x77	; 119
    41b2:	90 e0       	ldi	r25, 0x00	; 0
    41b4:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_enu_SendString>
        
        //Displaying 'PLease wait, System is Loading...'
        LCD_enu_GoToPosition(LCD_ROW_2,LCD_COLUMN_5,LCD_PAGE_1);
    41b8:	82 e0       	ldi	r24, 0x02	; 2
    41ba:	65 e0       	ldi	r22, 0x05	; 5
    41bc:	41 e0       	ldi	r20, 0x01	; 1
    41be:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enu_GoToPosition>
        LCD_enu_SendString("LOADING...");
    41c2:	80 e8       	ldi	r24, 0x80	; 128
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_enu_SendString>
    41ca:	07 c1       	rjmp	.+526    	; 0x43da <enu_PrintScreen+0x2e6>

        break;

        case LOGIN_SCREEN:
        //Clearing Page
        LCD_enu_ClearPage(LCD_PAGE_1);
    41cc:	81 e0       	ldi	r24, 0x01	; 1
    41ce:	0e 94 b9 11 	call	0x2372	; 0x2372 <LCD_enu_ClearPage>
        
        //Displaying 'Enter Password'
        LCD_enu_GoToPosition(LCD_ROW_1,LCD_COLUMN_1,LCD_PAGE_1);
    41d2:	81 e0       	ldi	r24, 0x01	; 1
    41d4:	61 e0       	ldi	r22, 0x01	; 1
    41d6:	41 e0       	ldi	r20, 0x01	; 1
    41d8:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enu_GoToPosition>
        LCD_enu_SendString("ENTER PASSWORD: ");
    41dc:	8b e8       	ldi	r24, 0x8B	; 139
    41de:	90 e0       	ldi	r25, 0x00	; 0
    41e0:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_enu_SendString>
    41e4:	fa c0       	rjmp	.+500    	; 0x43da <enu_PrintScreen+0x2e6>

        break;
        
        case CONTROL_MENU:
        //Clearing Page
        LCD_enu_ClearPage(LCD_PAGE_1);
    41e6:	81 e0       	ldi	r24, 0x01	; 1
    41e8:	0e 94 b9 11 	call	0x2372	; 0x2372 <LCD_enu_ClearPage>

        //Displaying 1-LED MENU
        LCD_enu_GoToPosition(LCD_ROW_1,LCD_COLUMN_1,LCD_PAGE_1);
    41ec:	81 e0       	ldi	r24, 0x01	; 1
    41ee:	61 e0       	ldi	r22, 0x01	; 1
    41f0:	41 e0       	ldi	r20, 0x01	; 1
    41f2:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enu_GoToPosition>
        LCD_enu_SendString("1-LED");
    41f6:	8c e9       	ldi	r24, 0x9C	; 156
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_enu_SendString>

        //Displaying 1-LED MENU
        LCD_enu_GoToPosition(LCD_ROW_1,LCD_COLUMN_8,LCD_PAGE_1);
    41fe:	81 e0       	ldi	r24, 0x01	; 1
    4200:	68 e0       	ldi	r22, 0x08	; 8
    4202:	41 e0       	ldi	r20, 0x01	; 1
    4204:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enu_GoToPosition>
        LCD_enu_SendString("2-AC");
    4208:	82 ea       	ldi	r24, 0xA2	; 162
    420a:	90 e0       	ldi	r25, 0x00	; 0
    420c:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_enu_SendString>

        //Displaying 1-LED MENU
        LCD_enu_GoToPosition(LCD_ROW_2,LCD_COLUMN_1,LCD_PAGE_1);
    4210:	82 e0       	ldi	r24, 0x02	; 2
    4212:	61 e0       	ldi	r22, 0x01	; 1
    4214:	41 e0       	ldi	r20, 0x01	; 1
    4216:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enu_GoToPosition>
        LCD_enu_SendString("3-TEMP");
    421a:	87 ea       	ldi	r24, 0xA7	; 167
    421c:	90 e0       	ldi	r25, 0x00	; 0
    421e:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_enu_SendString>

        //Displaying 1-LED MENU
        LCD_enu_GoToPosition(LCD_ROW_2,LCD_COLUMN_8,LCD_PAGE_1);
    4222:	82 e0       	ldi	r24, 0x02	; 2
    4224:	68 e0       	ldi	r22, 0x08	; 8
    4226:	41 e0       	ldi	r20, 0x01	; 1
    4228:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enu_GoToPosition>
        LCD_enu_SendString("4-EXIT");
    422c:	8e ea       	ldi	r24, 0xAE	; 174
    422e:	90 e0       	ldi	r25, 0x00	; 0
    4230:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_enu_SendString>
    4234:	d2 c0       	rjmp	.+420    	; 0x43da <enu_PrintScreen+0x2e6>
        break; 
        

        case CONTROL_LED_MENU:
        //Clearing Page
        LCD_enu_ClearPage(LCD_PAGE_1);
    4236:	81 e0       	ldi	r24, 0x01	; 1
    4238:	0e 94 b9 11 	call	0x2372	; 0x2372 <LCD_enu_ClearPage>

        //Displaying '1-LED 1
        LCD_enu_GoToPosition(LCD_ROW_1,LCD_COLUMN_1,LCD_PAGE_1);
    423c:	81 e0       	ldi	r24, 0x01	; 1
    423e:	61 e0       	ldi	r22, 0x01	; 1
    4240:	41 e0       	ldi	r20, 0x01	; 1
    4242:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enu_GoToPosition>
        LCD_enu_SendString("1-LED0");
    4246:	85 eb       	ldi	r24, 0xB5	; 181
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_enu_SendString>

        //Displaying '2-LED 2
        LCD_enu_GoToPosition(LCD_ROW_1,LCD_COLUMN_9,LCD_PAGE_1);
    424e:	81 e0       	ldi	r24, 0x01	; 1
    4250:	69 e0       	ldi	r22, 0x09	; 9
    4252:	41 e0       	ldi	r20, 0x01	; 1
    4254:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enu_GoToPosition>
        LCD_enu_SendString("2-LED1");
    4258:	8c eb       	ldi	r24, 0xBC	; 188
    425a:	90 e0       	ldi	r25, 0x00	; 0
    425c:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_enu_SendString>

        //Displaying '3-LED 3
        LCD_enu_GoToPosition(LCD_ROW_2,LCD_COLUMN_1,LCD_PAGE_1);
    4260:	82 e0       	ldi	r24, 0x02	; 2
    4262:	61 e0       	ldi	r22, 0x01	; 1
    4264:	41 e0       	ldi	r20, 0x01	; 1
    4266:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enu_GoToPosition>
        LCD_enu_SendString("3-LED2");
    426a:	83 ec       	ldi	r24, 0xC3	; 195
    426c:	90 e0       	ldi	r25, 0x00	; 0
    426e:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_enu_SendString>


        //Displaying '4-BACK'
        LCD_enu_GoToPosition(LCD_ROW_2,LCD_COLUMN_9,LCD_PAGE_1);
    4272:	82 e0       	ldi	r24, 0x02	; 2
    4274:	69 e0       	ldi	r22, 0x09	; 9
    4276:	41 e0       	ldi	r20, 0x01	; 1
    4278:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enu_GoToPosition>
        LCD_enu_SendString("4-BACK");
    427c:	8a ec       	ldi	r24, 0xCA	; 202
    427e:	90 e0       	ldi	r25, 0x00	; 0
    4280:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_enu_SendString>
    4284:	aa c0       	rjmp	.+340    	; 0x43da <enu_PrintScreen+0x2e6>
        break;
        
        case LED_INNER_MENU:
        //Clearing Page
        LCD_enu_ClearPage(LCD_PAGE_1);
    4286:	81 e0       	ldi	r24, 0x01	; 1
    4288:	0e 94 b9 11 	call	0x2372	; 0x2372 <LCD_enu_ClearPage>

        //Displaying '1-ON'
        LCD_enu_GoToPosition(LCD_ROW_1,LCD_COLUMN_1,LCD_PAGE_1);
    428c:	81 e0       	ldi	r24, 0x01	; 1
    428e:	61 e0       	ldi	r22, 0x01	; 1
    4290:	41 e0       	ldi	r20, 0x01	; 1
    4292:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enu_GoToPosition>
        LCD_enu_SendString("1-ON");
    4296:	81 ed       	ldi	r24, 0xD1	; 209
    4298:	90 e0       	ldi	r25, 0x00	; 0
    429a:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_enu_SendString>

        //Displaying '2-OFF'
        LCD_enu_GoToPosition(LCD_ROW_1,LCD_COLUMN_8,LCD_PAGE_1);
    429e:	81 e0       	ldi	r24, 0x01	; 1
    42a0:	68 e0       	ldi	r22, 0x08	; 8
    42a2:	41 e0       	ldi	r20, 0x01	; 1
    42a4:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enu_GoToPosition>
        LCD_enu_SendString("2-OFF");
    42a8:	86 ed       	ldi	r24, 0xD6	; 214
    42aa:	90 e0       	ldi	r25, 0x00	; 0
    42ac:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_enu_SendString>

        //Displaying '3-BACK'
        LCD_enu_GoToPosition(LCD_ROW_2,LCD_COLUMN_1,LCD_PAGE_1);
    42b0:	82 e0       	ldi	r24, 0x02	; 2
    42b2:	61 e0       	ldi	r22, 0x01	; 1
    42b4:	41 e0       	ldi	r20, 0x01	; 1
    42b6:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enu_GoToPosition>
        LCD_enu_SendString("3-BACK");
    42ba:	8c ed       	ldi	r24, 0xDC	; 220
    42bc:	90 e0       	ldi	r25, 0x00	; 0
    42be:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_enu_SendString>
    42c2:	8b c0       	rjmp	.+278    	; 0x43da <enu_PrintScreen+0x2e6>
        break;


        case CONTROL_AC_OPTION:
        //Clearing Page
        LCD_enu_ClearPage(LCD_PAGE_1);
    42c4:	81 e0       	ldi	r24, 0x01	; 1
    42c6:	0e 94 b9 11 	call	0x2372	; 0x2372 <LCD_enu_ClearPage>

        //Displaying '1-ON'
        LCD_enu_GoToPosition(LCD_ROW_1,LCD_COLUMN_1,LCD_PAGE_1);
    42ca:	81 e0       	ldi	r24, 0x01	; 1
    42cc:	61 e0       	ldi	r22, 0x01	; 1
    42ce:	41 e0       	ldi	r20, 0x01	; 1
    42d0:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enu_GoToPosition>
        LCD_enu_SendString("1-ON");
    42d4:	81 ed       	ldi	r24, 0xD1	; 209
    42d6:	90 e0       	ldi	r25, 0x00	; 0
    42d8:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_enu_SendString>

        //Displaying '2-OFF'
        LCD_enu_GoToPosition(LCD_ROW_1,LCD_COLUMN_8,LCD_PAGE_1);
    42dc:	81 e0       	ldi	r24, 0x01	; 1
    42de:	68 e0       	ldi	r22, 0x08	; 8
    42e0:	41 e0       	ldi	r20, 0x01	; 1
    42e2:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enu_GoToPosition>
        LCD_enu_SendString("2-OFF");
    42e6:	86 ed       	ldi	r24, 0xD6	; 214
    42e8:	90 e0       	ldi	r25, 0x00	; 0
    42ea:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_enu_SendString>

        //Displaying '3-BACK'
        LCD_enu_GoToPosition(LCD_ROW_2,LCD_COLUMN_1,LCD_PAGE_1);
    42ee:	82 e0       	ldi	r24, 0x02	; 2
    42f0:	61 e0       	ldi	r22, 0x01	; 1
    42f2:	41 e0       	ldi	r20, 0x01	; 1
    42f4:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enu_GoToPosition>
        LCD_enu_SendString("3-BACK");
    42f8:	8c ed       	ldi	r24, 0xDC	; 220
    42fa:	90 e0       	ldi	r25, 0x00	; 0
    42fc:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_enu_SendString>
    4300:	6c c0       	rjmp	.+216    	; 0x43da <enu_PrintScreen+0x2e6>
        break;
        

        case CONTROL_TEMPERATURE_OPTION:
        //Clearing Page
        LCD_enu_ClearPage(LCD_PAGE_1);
    4302:	81 e0       	ldi	r24, 0x01	; 1
    4304:	0e 94 b9 11 	call	0x2372	; 0x2372 <LCD_enu_ClearPage>
        
        //Displaying 'Temperature ='
        LCD_enu_GoToPosition(LCD_ROW_1,LCD_COLUMN_1,LCD_PAGE_1);
    4308:	81 e0       	ldi	r24, 0x01	; 1
    430a:	61 e0       	ldi	r22, 0x01	; 1
    430c:	41 e0       	ldi	r20, 0x01	; 1
    430e:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enu_GoToPosition>
        LCD_enu_SendString("TEMPERATURE = ");
    4312:	83 ee       	ldi	r24, 0xE3	; 227
    4314:	90 e0       	ldi	r25, 0x00	; 0
    4316:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_enu_SendString>
        
        //Displaying '1-BACK'
        LCD_enu_GoToPosition(LCD_ROW_2,LCD_COLUMN_1,LCD_PAGE_1);
    431a:	82 e0       	ldi	r24, 0x02	; 2
    431c:	61 e0       	ldi	r22, 0x01	; 1
    431e:	41 e0       	ldi	r20, 0x01	; 1
    4320:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enu_GoToPosition>
        LCD_enu_SendString("1-BACK");
    4324:	82 ef       	ldi	r24, 0xF2	; 242
    4326:	90 e0       	ldi	r25, 0x00	; 0
    4328:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_enu_SendString>
    432c:	56 c0       	rjmp	.+172    	; 0x43da <enu_PrintScreen+0x2e6>
        break;
        

        case CONTROL_EXIT_OPTION:
        //Clearing Page
        LCD_enu_ClearPage(LCD_PAGE_1);
    432e:	81 e0       	ldi	r24, 0x01	; 1
    4330:	0e 94 b9 11 	call	0x2372	; 0x2372 <LCD_enu_ClearPage>

        //Displaying 'GOODBYE!'
        LCD_enu_GoToPosition(LCD_ROW_1,LCD_COLUMN_5,LCD_PAGE_1);
    4334:	81 e0       	ldi	r24, 0x01	; 1
    4336:	65 e0       	ldi	r22, 0x05	; 5
    4338:	41 e0       	ldi	r20, 0x01	; 1
    433a:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enu_GoToPosition>
        LCD_enu_SendString("GOODBYE!");
    433e:	89 ef       	ldi	r24, 0xF9	; 249
    4340:	90 e0       	ldi	r25, 0x00	; 0
    4342:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_enu_SendString>
        
        //Displaying 'PLease wait, System is Loading...'
        LCD_enu_GoToPosition(LCD_ROW_2,LCD_COLUMN_5,LCD_PAGE_1);
    4346:	82 e0       	ldi	r24, 0x02	; 2
    4348:	65 e0       	ldi	r22, 0x05	; 5
    434a:	41 e0       	ldi	r20, 0x01	; 1
    434c:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enu_GoToPosition>
        LCD_enu_SendString("LOADING...");
    4350:	80 e8       	ldi	r24, 0x80	; 128
    4352:	90 e0       	ldi	r25, 0x00	; 0
    4354:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_enu_SendString>
    4358:	40 c0       	rjmp	.+128    	; 0x43da <enu_PrintScreen+0x2e6>
        break;
        

        case ALERT:
        //Clearing Page
        LCD_enu_ClearPage(LCD_PAGE_1);
    435a:	81 e0       	ldi	r24, 0x01	; 1
    435c:	0e 94 b9 11 	call	0x2372	; 0x2372 <LCD_enu_ClearPage>
        u8 HomeControl_au8_AlertMessage []= { 0x00,0x00,0x0E,0x01,0x1F,0x00,0x00,0x00,  //ح
                                  0x00,0x00,0x00,0x04,0x07,0x04,0x04,0x18,  //ر
                                  0x00,0x04,0x04,0x04,0x04,0x00,0x00,0x00,  //ا
                                  0x00,0x00,0x07,0x05,0x1F,0x00,0x00,0x00,  //م
                                  0x00,0x00,0x07,0x04,0x12,0x11,0x0E,0x00   //ي
                                };
    4360:	9e 01       	movw	r18, r28
    4362:	2e 5f       	subi	r18, 0xFE	; 254
    4364:	3f 4f       	sbci	r19, 0xFF	; 255
    4366:	3e a7       	std	Y+46, r19	; 0x2e
    4368:	2d a7       	std	Y+45, r18	; 0x2d
    436a:	8f e4       	ldi	r24, 0x4F	; 79
    436c:	92 e0       	ldi	r25, 0x02	; 2
    436e:	98 ab       	std	Y+48, r25	; 0x30
    4370:	8f a7       	std	Y+47, r24	; 0x2f
    4372:	98 e2       	ldi	r25, 0x28	; 40
    4374:	99 ab       	std	Y+49, r25	; 0x31
    4376:	ef a5       	ldd	r30, Y+47	; 0x2f
    4378:	f8 a9       	ldd	r31, Y+48	; 0x30
    437a:	00 80       	ld	r0, Z
    437c:	2f a5       	ldd	r18, Y+47	; 0x2f
    437e:	38 a9       	ldd	r19, Y+48	; 0x30
    4380:	2f 5f       	subi	r18, 0xFF	; 255
    4382:	3f 4f       	sbci	r19, 0xFF	; 255
    4384:	38 ab       	std	Y+48, r19	; 0x30
    4386:	2f a7       	std	Y+47, r18	; 0x2f
    4388:	ed a5       	ldd	r30, Y+45	; 0x2d
    438a:	fe a5       	ldd	r31, Y+46	; 0x2e
    438c:	00 82       	st	Z, r0
    438e:	2d a5       	ldd	r18, Y+45	; 0x2d
    4390:	3e a5       	ldd	r19, Y+46	; 0x2e
    4392:	2f 5f       	subi	r18, 0xFF	; 255
    4394:	3f 4f       	sbci	r19, 0xFF	; 255
    4396:	3e a7       	std	Y+46, r19	; 0x2e
    4398:	2d a7       	std	Y+45, r18	; 0x2d
    439a:	39 a9       	ldd	r19, Y+49	; 0x31
    439c:	31 50       	subi	r19, 0x01	; 1
    439e:	39 ab       	std	Y+49, r19	; 0x31
    43a0:	89 a9       	ldd	r24, Y+49	; 0x31
    43a2:	88 23       	and	r24, r24
    43a4:	41 f7       	brne	.-48     	; 0x4376 <enu_PrintScreen+0x282>


        LCD_enu_DrawSpecialCharacter( HomeControl_au8_AlertMessage,5,LCD_CUSTOM_PATTERN_0,LCD_ROW_1,LCD_COLUMN_10,LCD_PAGE_1,LCD_AC_DEC);
    43a6:	ce 01       	movw	r24, r28
    43a8:	02 96       	adiw	r24, 0x02	; 2
    43aa:	65 e0       	ldi	r22, 0x05	; 5
    43ac:	40 e0       	ldi	r20, 0x00	; 0
    43ae:	21 e0       	ldi	r18, 0x01	; 1
    43b0:	0a e0       	ldi	r16, 0x0A	; 10
    43b2:	ee 24       	eor	r14, r14
    43b4:	e3 94       	inc	r14
    43b6:	cc 24       	eor	r12, r12
    43b8:	0e 94 8f 12 	call	0x251e	; 0x251e <LCD_enu_DrawSpecialCharacter>
        //Reetting AC to increase agin
        LCD_enu_SendCommand(0x06);
    43bc:	86 e0       	ldi	r24, 0x06	; 6
    43be:	0e 94 13 11 	call	0x2226	; 0x2226 <LCD_enu_SendCommand>
        
        //Displaying '!!!!!!!'
        LCD_enu_GoToPosition(LCD_ROW_2,LCD_COLUMN_5,LCD_PAGE_1);
    43c2:	82 e0       	ldi	r24, 0x02	; 2
    43c4:	65 e0       	ldi	r22, 0x05	; 5
    43c6:	41 e0       	ldi	r20, 0x01	; 1
    43c8:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enu_GoToPosition>
        LCD_enu_SendString("!!!!!!!");
    43cc:	82 e0       	ldi	r24, 0x02	; 2
    43ce:	91 e0       	ldi	r25, 0x01	; 1
    43d0:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_enu_SendString>
    43d4:	02 c0       	rjmp	.+4      	; 0x43da <enu_PrintScreen+0x2e6>

        break;

        
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    43d6:	82 e0       	ldi	r24, 0x02	; 2
    43d8:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;    
    43da:	89 81       	ldd	r24, Y+1	; 0x01
}
    43dc:	e1 96       	adiw	r28, 0x31	; 49
    43de:	0f b6       	in	r0, 0x3f	; 63
    43e0:	f8 94       	cli
    43e2:	de bf       	out	0x3e, r29	; 62
    43e4:	0f be       	out	0x3f, r0	; 63
    43e6:	cd bf       	out	0x3d, r28	; 61
    43e8:	cf 91       	pop	r28
    43ea:	df 91       	pop	r29
    43ec:	0f 91       	pop	r16
    43ee:	ef 90       	pop	r14
    43f0:	cf 90       	pop	r12
    43f2:	08 95       	ret

000043f4 <enu_WrongChoiceSelected>:

static ErrorState_t enu_WrongChoiceSelected(u8 Copy_Page_Number)
{
    43f4:	df 93       	push	r29
    43f6:	cf 93       	push	r28
    43f8:	cd b7       	in	r28, 0x3d	; 61
    43fa:	de b7       	in	r29, 0x3e	; 62
    43fc:	60 97       	sbiw	r28, 0x10	; 16
    43fe:	0f b6       	in	r0, 0x3f	; 63
    4400:	f8 94       	cli
    4402:	de bf       	out	0x3e, r29	; 62
    4404:	0f be       	out	0x3f, r0	; 63
    4406:	cd bf       	out	0x3d, r28	; 61
    4408:	88 8b       	std	Y+16, r24	; 0x10
    u8 Local_u8_ErrorFlag = ES_NOK;
    440a:	81 e0       	ldi	r24, 0x01	; 1
    440c:	8f 87       	std	Y+15, r24	; 0x0f


    //Displaying 'X' for wrong choice entered
    LCD_enu_GoToPosition(LCD_ROW_2,LCD_COLUMN_16,Copy_Page_Number);
    440e:	82 e0       	ldi	r24, 0x02	; 2
    4410:	60 e1       	ldi	r22, 0x10	; 16
    4412:	48 89       	ldd	r20, Y+16	; 0x10
    4414:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enu_GoToPosition>
    LCD_enu_SendData('X');
    4418:	88 e5       	ldi	r24, 0x58	; 88
    441a:	0e 94 2a 11 	call	0x2254	; 0x2254 <LCD_enu_SendData>
    441e:	80 e0       	ldi	r24, 0x00	; 0
    4420:	90 e0       	ldi	r25, 0x00	; 0
    4422:	aa ef       	ldi	r26, 0xFA	; 250
    4424:	b3 e4       	ldi	r27, 0x43	; 67
    4426:	8b 87       	std	Y+11, r24	; 0x0b
    4428:	9c 87       	std	Y+12, r25	; 0x0c
    442a:	ad 87       	std	Y+13, r26	; 0x0d
    442c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    442e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4430:	7c 85       	ldd	r23, Y+12	; 0x0c
    4432:	8d 85       	ldd	r24, Y+13	; 0x0d
    4434:	9e 85       	ldd	r25, Y+14	; 0x0e
    4436:	20 e0       	ldi	r18, 0x00	; 0
    4438:	30 e0       	ldi	r19, 0x00	; 0
    443a:	4a e7       	ldi	r20, 0x7A	; 122
    443c:	55 e4       	ldi	r21, 0x45	; 69
    443e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4442:	dc 01       	movw	r26, r24
    4444:	cb 01       	movw	r24, r22
    4446:	8f 83       	std	Y+7, r24	; 0x07
    4448:	98 87       	std	Y+8, r25	; 0x08
    444a:	a9 87       	std	Y+9, r26	; 0x09
    444c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    444e:	6f 81       	ldd	r22, Y+7	; 0x07
    4450:	78 85       	ldd	r23, Y+8	; 0x08
    4452:	89 85       	ldd	r24, Y+9	; 0x09
    4454:	9a 85       	ldd	r25, Y+10	; 0x0a
    4456:	20 e0       	ldi	r18, 0x00	; 0
    4458:	30 e0       	ldi	r19, 0x00	; 0
    445a:	40 e8       	ldi	r20, 0x80	; 128
    445c:	5f e3       	ldi	r21, 0x3F	; 63
    445e:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    4462:	88 23       	and	r24, r24
    4464:	2c f4       	brge	.+10     	; 0x4470 <enu_WrongChoiceSelected+0x7c>
		__ticks = 1;
    4466:	81 e0       	ldi	r24, 0x01	; 1
    4468:	90 e0       	ldi	r25, 0x00	; 0
    446a:	9e 83       	std	Y+6, r25	; 0x06
    446c:	8d 83       	std	Y+5, r24	; 0x05
    446e:	3f c0       	rjmp	.+126    	; 0x44ee <enu_WrongChoiceSelected+0xfa>
	else if (__tmp > 65535)
    4470:	6f 81       	ldd	r22, Y+7	; 0x07
    4472:	78 85       	ldd	r23, Y+8	; 0x08
    4474:	89 85       	ldd	r24, Y+9	; 0x09
    4476:	9a 85       	ldd	r25, Y+10	; 0x0a
    4478:	20 e0       	ldi	r18, 0x00	; 0
    447a:	3f ef       	ldi	r19, 0xFF	; 255
    447c:	4f e7       	ldi	r20, 0x7F	; 127
    447e:	57 e4       	ldi	r21, 0x47	; 71
    4480:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    4484:	18 16       	cp	r1, r24
    4486:	4c f5       	brge	.+82     	; 0x44da <enu_WrongChoiceSelected+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4488:	6b 85       	ldd	r22, Y+11	; 0x0b
    448a:	7c 85       	ldd	r23, Y+12	; 0x0c
    448c:	8d 85       	ldd	r24, Y+13	; 0x0d
    448e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4490:	20 e0       	ldi	r18, 0x00	; 0
    4492:	30 e0       	ldi	r19, 0x00	; 0
    4494:	40 e2       	ldi	r20, 0x20	; 32
    4496:	51 e4       	ldi	r21, 0x41	; 65
    4498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    449c:	dc 01       	movw	r26, r24
    449e:	cb 01       	movw	r24, r22
    44a0:	bc 01       	movw	r22, r24
    44a2:	cd 01       	movw	r24, r26
    44a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44a8:	dc 01       	movw	r26, r24
    44aa:	cb 01       	movw	r24, r22
    44ac:	9e 83       	std	Y+6, r25	; 0x06
    44ae:	8d 83       	std	Y+5, r24	; 0x05
    44b0:	0f c0       	rjmp	.+30     	; 0x44d0 <enu_WrongChoiceSelected+0xdc>
    44b2:	80 e9       	ldi	r24, 0x90	; 144
    44b4:	91 e0       	ldi	r25, 0x01	; 1
    44b6:	9c 83       	std	Y+4, r25	; 0x04
    44b8:	8b 83       	std	Y+3, r24	; 0x03
    44ba:	8b 81       	ldd	r24, Y+3	; 0x03
    44bc:	9c 81       	ldd	r25, Y+4	; 0x04
    44be:	01 97       	sbiw	r24, 0x01	; 1
    44c0:	f1 f7       	brne	.-4      	; 0x44be <enu_WrongChoiceSelected+0xca>
    44c2:	9c 83       	std	Y+4, r25	; 0x04
    44c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44c6:	8d 81       	ldd	r24, Y+5	; 0x05
    44c8:	9e 81       	ldd	r25, Y+6	; 0x06
    44ca:	01 97       	sbiw	r24, 0x01	; 1
    44cc:	9e 83       	std	Y+6, r25	; 0x06
    44ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44d0:	8d 81       	ldd	r24, Y+5	; 0x05
    44d2:	9e 81       	ldd	r25, Y+6	; 0x06
    44d4:	00 97       	sbiw	r24, 0x00	; 0
    44d6:	69 f7       	brne	.-38     	; 0x44b2 <enu_WrongChoiceSelected+0xbe>
    44d8:	14 c0       	rjmp	.+40     	; 0x4502 <enu_WrongChoiceSelected+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44da:	6f 81       	ldd	r22, Y+7	; 0x07
    44dc:	78 85       	ldd	r23, Y+8	; 0x08
    44de:	89 85       	ldd	r24, Y+9	; 0x09
    44e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    44e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44e6:	dc 01       	movw	r26, r24
    44e8:	cb 01       	movw	r24, r22
    44ea:	9e 83       	std	Y+6, r25	; 0x06
    44ec:	8d 83       	std	Y+5, r24	; 0x05
    44ee:	8d 81       	ldd	r24, Y+5	; 0x05
    44f0:	9e 81       	ldd	r25, Y+6	; 0x06
    44f2:	9a 83       	std	Y+2, r25	; 0x02
    44f4:	89 83       	std	Y+1, r24	; 0x01
    44f6:	89 81       	ldd	r24, Y+1	; 0x01
    44f8:	9a 81       	ldd	r25, Y+2	; 0x02
    44fa:	01 97       	sbiw	r24, 0x01	; 1
    44fc:	f1 f7       	brne	.-4      	; 0x44fa <enu_WrongChoiceSelected+0x106>
    44fe:	9a 83       	std	Y+2, r25	; 0x02
    4500:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(500);
                        
    LCD_enu_GoToPosition(LCD_ROW_2,LCD_COLUMN_16,Copy_Page_Number);
    4502:	82 e0       	ldi	r24, 0x02	; 2
    4504:	60 e1       	ldi	r22, 0x10	; 16
    4506:	48 89       	ldd	r20, Y+16	; 0x10
    4508:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enu_GoToPosition>
    LCD_enu_SendData(' ');
    450c:	80 e2       	ldi	r24, 0x20	; 32
    450e:	0e 94 2a 11 	call	0x2254	; 0x2254 <LCD_enu_SendData>

    Local_u8_ErrorFlag = ES_OK;
    4512:	1f 86       	std	Y+15, r1	; 0x0f

    return Local_u8_ErrorFlag;
    4514:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    4516:	60 96       	adiw	r28, 0x10	; 16
    4518:	0f b6       	in	r0, 0x3f	; 63
    451a:	f8 94       	cli
    451c:	de bf       	out	0x3e, r29	; 62
    451e:	0f be       	out	0x3f, r0	; 63
    4520:	cd bf       	out	0x3d, r28	; 61
    4522:	cf 91       	pop	r28
    4524:	df 91       	pop	r29
    4526:	08 95       	ret

00004528 <__mulsi3>:
    4528:	62 9f       	mul	r22, r18
    452a:	d0 01       	movw	r26, r0
    452c:	73 9f       	mul	r23, r19
    452e:	f0 01       	movw	r30, r0
    4530:	82 9f       	mul	r24, r18
    4532:	e0 0d       	add	r30, r0
    4534:	f1 1d       	adc	r31, r1
    4536:	64 9f       	mul	r22, r20
    4538:	e0 0d       	add	r30, r0
    453a:	f1 1d       	adc	r31, r1
    453c:	92 9f       	mul	r25, r18
    453e:	f0 0d       	add	r31, r0
    4540:	83 9f       	mul	r24, r19
    4542:	f0 0d       	add	r31, r0
    4544:	74 9f       	mul	r23, r20
    4546:	f0 0d       	add	r31, r0
    4548:	65 9f       	mul	r22, r21
    454a:	f0 0d       	add	r31, r0
    454c:	99 27       	eor	r25, r25
    454e:	72 9f       	mul	r23, r18
    4550:	b0 0d       	add	r27, r0
    4552:	e1 1d       	adc	r30, r1
    4554:	f9 1f       	adc	r31, r25
    4556:	63 9f       	mul	r22, r19
    4558:	b0 0d       	add	r27, r0
    455a:	e1 1d       	adc	r30, r1
    455c:	f9 1f       	adc	r31, r25
    455e:	bd 01       	movw	r22, r26
    4560:	cf 01       	movw	r24, r30
    4562:	11 24       	eor	r1, r1
    4564:	08 95       	ret

00004566 <__udivmodsi4>:
    4566:	a1 e2       	ldi	r26, 0x21	; 33
    4568:	1a 2e       	mov	r1, r26
    456a:	aa 1b       	sub	r26, r26
    456c:	bb 1b       	sub	r27, r27
    456e:	fd 01       	movw	r30, r26
    4570:	0d c0       	rjmp	.+26     	; 0x458c <__udivmodsi4_ep>

00004572 <__udivmodsi4_loop>:
    4572:	aa 1f       	adc	r26, r26
    4574:	bb 1f       	adc	r27, r27
    4576:	ee 1f       	adc	r30, r30
    4578:	ff 1f       	adc	r31, r31
    457a:	a2 17       	cp	r26, r18
    457c:	b3 07       	cpc	r27, r19
    457e:	e4 07       	cpc	r30, r20
    4580:	f5 07       	cpc	r31, r21
    4582:	20 f0       	brcs	.+8      	; 0x458c <__udivmodsi4_ep>
    4584:	a2 1b       	sub	r26, r18
    4586:	b3 0b       	sbc	r27, r19
    4588:	e4 0b       	sbc	r30, r20
    458a:	f5 0b       	sbc	r31, r21

0000458c <__udivmodsi4_ep>:
    458c:	66 1f       	adc	r22, r22
    458e:	77 1f       	adc	r23, r23
    4590:	88 1f       	adc	r24, r24
    4592:	99 1f       	adc	r25, r25
    4594:	1a 94       	dec	r1
    4596:	69 f7       	brne	.-38     	; 0x4572 <__udivmodsi4_loop>
    4598:	60 95       	com	r22
    459a:	70 95       	com	r23
    459c:	80 95       	com	r24
    459e:	90 95       	com	r25
    45a0:	9b 01       	movw	r18, r22
    45a2:	ac 01       	movw	r20, r24
    45a4:	bd 01       	movw	r22, r26
    45a6:	cf 01       	movw	r24, r30
    45a8:	08 95       	ret

000045aa <__divmodsi4>:
    45aa:	97 fb       	bst	r25, 7
    45ac:	09 2e       	mov	r0, r25
    45ae:	05 26       	eor	r0, r21
    45b0:	0e d0       	rcall	.+28     	; 0x45ce <__divmodsi4_neg1>
    45b2:	57 fd       	sbrc	r21, 7
    45b4:	04 d0       	rcall	.+8      	; 0x45be <__divmodsi4_neg2>
    45b6:	d7 df       	rcall	.-82     	; 0x4566 <__udivmodsi4>
    45b8:	0a d0       	rcall	.+20     	; 0x45ce <__divmodsi4_neg1>
    45ba:	00 1c       	adc	r0, r0
    45bc:	38 f4       	brcc	.+14     	; 0x45cc <__divmodsi4_exit>

000045be <__divmodsi4_neg2>:
    45be:	50 95       	com	r21
    45c0:	40 95       	com	r20
    45c2:	30 95       	com	r19
    45c4:	21 95       	neg	r18
    45c6:	3f 4f       	sbci	r19, 0xFF	; 255
    45c8:	4f 4f       	sbci	r20, 0xFF	; 255
    45ca:	5f 4f       	sbci	r21, 0xFF	; 255

000045cc <__divmodsi4_exit>:
    45cc:	08 95       	ret

000045ce <__divmodsi4_neg1>:
    45ce:	f6 f7       	brtc	.-4      	; 0x45cc <__divmodsi4_exit>
    45d0:	90 95       	com	r25
    45d2:	80 95       	com	r24
    45d4:	70 95       	com	r23
    45d6:	61 95       	neg	r22
    45d8:	7f 4f       	sbci	r23, 0xFF	; 255
    45da:	8f 4f       	sbci	r24, 0xFF	; 255
    45dc:	9f 4f       	sbci	r25, 0xFF	; 255
    45de:	08 95       	ret

000045e0 <__prologue_saves__>:
    45e0:	2f 92       	push	r2
    45e2:	3f 92       	push	r3
    45e4:	4f 92       	push	r4
    45e6:	5f 92       	push	r5
    45e8:	6f 92       	push	r6
    45ea:	7f 92       	push	r7
    45ec:	8f 92       	push	r8
    45ee:	9f 92       	push	r9
    45f0:	af 92       	push	r10
    45f2:	bf 92       	push	r11
    45f4:	cf 92       	push	r12
    45f6:	df 92       	push	r13
    45f8:	ef 92       	push	r14
    45fa:	ff 92       	push	r15
    45fc:	0f 93       	push	r16
    45fe:	1f 93       	push	r17
    4600:	cf 93       	push	r28
    4602:	df 93       	push	r29
    4604:	cd b7       	in	r28, 0x3d	; 61
    4606:	de b7       	in	r29, 0x3e	; 62
    4608:	ca 1b       	sub	r28, r26
    460a:	db 0b       	sbc	r29, r27
    460c:	0f b6       	in	r0, 0x3f	; 63
    460e:	f8 94       	cli
    4610:	de bf       	out	0x3e, r29	; 62
    4612:	0f be       	out	0x3f, r0	; 63
    4614:	cd bf       	out	0x3d, r28	; 61
    4616:	09 94       	ijmp

00004618 <__epilogue_restores__>:
    4618:	2a 88       	ldd	r2, Y+18	; 0x12
    461a:	39 88       	ldd	r3, Y+17	; 0x11
    461c:	48 88       	ldd	r4, Y+16	; 0x10
    461e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4620:	6e 84       	ldd	r6, Y+14	; 0x0e
    4622:	7d 84       	ldd	r7, Y+13	; 0x0d
    4624:	8c 84       	ldd	r8, Y+12	; 0x0c
    4626:	9b 84       	ldd	r9, Y+11	; 0x0b
    4628:	aa 84       	ldd	r10, Y+10	; 0x0a
    462a:	b9 84       	ldd	r11, Y+9	; 0x09
    462c:	c8 84       	ldd	r12, Y+8	; 0x08
    462e:	df 80       	ldd	r13, Y+7	; 0x07
    4630:	ee 80       	ldd	r14, Y+6	; 0x06
    4632:	fd 80       	ldd	r15, Y+5	; 0x05
    4634:	0c 81       	ldd	r16, Y+4	; 0x04
    4636:	1b 81       	ldd	r17, Y+3	; 0x03
    4638:	aa 81       	ldd	r26, Y+2	; 0x02
    463a:	b9 81       	ldd	r27, Y+1	; 0x01
    463c:	ce 0f       	add	r28, r30
    463e:	d1 1d       	adc	r29, r1
    4640:	0f b6       	in	r0, 0x3f	; 63
    4642:	f8 94       	cli
    4644:	de bf       	out	0x3e, r29	; 62
    4646:	0f be       	out	0x3f, r0	; 63
    4648:	cd bf       	out	0x3d, r28	; 61
    464a:	ed 01       	movw	r28, r26
    464c:	08 95       	ret

0000464e <_exit>:
    464e:	f8 94       	cli

00004650 <__stop_program>:
    4650:	ff cf       	rjmp	.-2      	; 0x4650 <__stop_program>
